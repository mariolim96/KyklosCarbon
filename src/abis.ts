// Generated by @wagmi/cli@0.1.15 on 10/8/2023 at 09:34:28
import {
  getContract,
  GetContractArgs,
  readContract,
  ReadContractConfig,
  writeContract,
  WriteContractArgs,
  WriteContractPreparedArgs,
  WriteContractUnpreparedArgs,
  prepareWriteContract,
  PrepareWriteContractConfig,
  watchContractEvent,
  WatchContractEventConfig,
  WatchContractEventCallback,
} from 'wagmi/actions'

import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import { ReadContractResult, WriteContractMode, PrepareWriteContractResult } from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ICarbonProjects
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iCarbonProjectsABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'projectId', internalType: 'string', type: 'string' },
      { name: 'standard', internalType: 'string', type: 'string' },
      { name: 'methodology', internalType: 'string', type: 'string' },
      { name: 'region', internalType: 'string', type: 'string' },
      { name: 'storageMethod', internalType: 'string', type: 'string' },
      { name: 'method', internalType: 'string', type: 'string' },
      { name: 'emissionType', internalType: 'string', type: 'string' },
      { name: 'category', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'beneficiary', internalType: 'address', type: 'address' },
    ],
    name: 'addNewProject',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'projectId', internalType: 'string', type: 'string' }],
    name: 'existProjectId',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'projectId', internalType: 'string', type: 'string' }],
    name: 'getPidToTokenId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getProjectDataByTokenId',
    outputs: [
      {
        name: '',
        internalType: 'struct ProjectData',
        type: 'tuple',
        components: [
          { name: 'projectId', internalType: 'string', type: 'string' },
          { name: 'standard', internalType: 'string', type: 'string' },
          { name: 'methodology', internalType: 'string', type: 'string' },
          { name: 'region', internalType: 'string', type: 'string' },
          { name: 'storageMethod', internalType: 'string', type: 'string' },
          { name: 'method', internalType: 'string', type: 'string' },
          { name: 'emissionType', internalType: 'string', type: 'string' },
          { name: 'category', internalType: 'string', type: 'string' },
          { name: 'uri', internalType: 'string', type: 'string' },
          { name: 'beneficiary', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'isValidProjectTokenId',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IKyklosTokenFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iKyklosTokenFactoryABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_vintageTokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'createToken',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'projectVintageTokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getProjectVintageToErc20',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'increaseTotalRetired',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IProjectVintages
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iProjectVintagesABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      {
        name: '_vintageData',
        internalType: 'struct VintageData',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'startTime', internalType: 'uint64', type: 'uint64' },
          { name: 'endTime', internalType: 'uint64', type: 'uint64' },
          { name: 'projectTokenId', internalType: 'uint256', type: 'uint256' },
          { name: 'totalVintageQuantity', internalType: 'uint64', type: 'uint64' },
          { name: 'isCorsiaCompliant', internalType: 'bool', type: 'bool' },
          { name: 'isCCPcompliant', internalType: 'bool', type: 'bool' },
          { name: 'coBenefits', internalType: 'string', type: 'string' },
          { name: 'correspAdjustment', internalType: 'string', type: 'string' },
          { name: 'additionalCertification', internalType: 'string', type: 'string' },
          { name: 'uri', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addNewVintage',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'exists',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getProjectVintageDataByTokenId',
    outputs: [
      {
        name: '',
        internalType: 'struct VintageData',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'startTime', internalType: 'uint64', type: 'uint64' },
          { name: 'endTime', internalType: 'uint64', type: 'uint64' },
          { name: 'projectTokenId', internalType: 'uint256', type: 'uint256' },
          { name: 'totalVintageQuantity', internalType: 'uint64', type: 'uint64' },
          { name: 'isCorsiaCompliant', internalType: 'bool', type: 'bool' },
          { name: 'isCCPcompliant', internalType: 'bool', type: 'bool' },
          { name: 'coBenefits', internalType: 'string', type: 'string' },
          { name: 'correspAdjustment', internalType: 'string', type: 'string' },
          { name: 'additionalCertification', internalType: 'string', type: 'string' },
          { name: 'uri', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IRegistry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iRegistryABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCarbonProjectAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCarbonProjectVintagesAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getKyklosTokenAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getKyklosTokenFactoryAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_address', internalType: 'address', type: 'address' }],
    name: 'getProjectVintageERC20Registry',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getRetirementCertificatesAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_address', internalType: 'address', type: 'address' }],
    name: 'setCarbonProjectAddress',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_address', internalType: 'address', type: 'address' }],
    name: 'setCarbonProjectVintagesAddress',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_address', internalType: 'address', type: 'address' }],
    name: 'setKyklosTokenAddress',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_address', internalType: 'address', type: 'address' }],
    name: 'setKyklosTokenFactoryAddress',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_address', internalType: 'address', type: 'address' },
      { name: '_bool', internalType: 'bool', type: 'bool' },
    ],
    name: 'setProjectVintageERC20Registry',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_address', internalType: 'address', type: 'address' }],
    name: 'setRetirementCertificatesAddress',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CarbonProject
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const carbonProjectABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Paused',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'receiver', internalType: 'address', type: 'address', indexed: false },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ProjectMinted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'previousAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'newAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'RoleRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Unpaused',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MANAGER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MINTER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'PAUSER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'projectId', internalType: 'string', type: 'string' },
      { name: 'standard', internalType: 'string', type: 'string' },
      { name: 'methodology', internalType: 'string', type: 'string' },
      { name: 'region', internalType: 'string', type: 'string' },
      { name: 'storageMethod', internalType: 'string', type: 'string' },
      { name: 'method', internalType: 'string', type: 'string' },
      { name: 'emissionType', internalType: 'string', type: 'string' },
      { name: 'category', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'beneficiary', internalType: 'address', type: 'address' },
    ],
    name: 'addNewProject',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'baseURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'contractRegistry',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'projectId', internalType: 'string', type: 'string' }],
    name: 'existProjectId',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'projectId', internalType: 'string', type: 'string' }],
    name: 'getPidToTokenId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getProjectDataByTokenId',
    outputs: [
      {
        name: '',
        internalType: 'struct ProjectData',
        type: 'tuple',
        components: [
          { name: 'projectId', internalType: 'string', type: 'string' },
          { name: 'standard', internalType: 'string', type: 'string' },
          { name: 'methodology', internalType: 'string', type: 'string' },
          { name: 'region', internalType: 'string', type: 'string' },
          { name: 'storageMethod', internalType: 'string', type: 'string' },
          { name: 'method', internalType: 'string', type: 'string' },
          { name: 'emissionType', internalType: 'string', type: 'string' },
          { name: 'category', internalType: 'string', type: 'string' },
          { name: 'uri', internalType: 'string', type: 'string' },
          { name: 'beneficiary', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'isValidProjectTokenId',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'pause', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'pidToTokenId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'projectData',
    outputs: [
      { name: 'projectId', internalType: 'string', type: 'string' },
      { name: 'standard', internalType: 'string', type: 'string' },
      { name: 'methodology', internalType: 'string', type: 'string' },
      { name: 'region', internalType: 'string', type: 'string' },
      { name: 'storageMethod', internalType: 'string', type: 'string' },
      { name: 'method', internalType: 'string', type: 'string' },
      { name: 'emissionType', internalType: 'string', type: 'string' },
      { name: 'category', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'beneficiary', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'projectIds',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'projectTokenCounter',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'renounceOwnership', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeMint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_address', internalType: 'address', type: 'address' }],
    name: 'setRegistry',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'unpause', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'validProjectTokenIds',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CarbonProjectsStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const carbonProjectsStorageABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'baseURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'contractRegistry',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'pidToTokenId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'projectData',
    outputs: [
      { name: 'projectId', internalType: 'string', type: 'string' },
      { name: 'standard', internalType: 'string', type: 'string' },
      { name: 'methodology', internalType: 'string', type: 'string' },
      { name: 'region', internalType: 'string', type: 'string' },
      { name: 'storageMethod', internalType: 'string', type: 'string' },
      { name: 'method', internalType: 'string', type: 'string' },
      { name: 'emissionType', internalType: 'string', type: 'string' },
      { name: 'category', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'beneficiary', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'projectIds',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'projectTokenCounter',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'validProjectTokenIds',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CarbonProjectVintagesStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const carbonProjectVintagesStorageABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'baseURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'contractRegistry',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'isRetired',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'projectVintageTokenCounter',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'pvToTokenId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'validProjectVintageIds',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'vintageData',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'startTime', internalType: 'uint64', type: 'uint64' },
      { name: 'endTime', internalType: 'uint64', type: 'uint64' },
      { name: 'projectTokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'totalVintageQuantity', internalType: 'uint64', type: 'uint64' },
      { name: 'isCorsiaCompliant', internalType: 'bool', type: 'bool' },
      { name: 'isCCPcompliant', internalType: 'bool', type: 'bool' },
      { name: 'coBenefits', internalType: 'string', type: 'string' },
      { name: 'correspAdjustment', internalType: 'string', type: 'string' },
      { name: 'additionalCertification', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ProjectVintages
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const projectVintagesABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Paused',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'receiver', internalType: 'address', type: 'address', indexed: false },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'projectTokenId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'startTime', internalType: 'uint64', type: 'uint64', indexed: false },
    ],
    name: 'ProjectVintageMinted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'previousAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'newAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'RoleRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Unpaused',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MANAGER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MINTER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'PAUSER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      {
        name: '_vintageData',
        internalType: 'struct VintageData',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'startTime', internalType: 'uint64', type: 'uint64' },
          { name: 'endTime', internalType: 'uint64', type: 'uint64' },
          { name: 'projectTokenId', internalType: 'uint256', type: 'uint256' },
          { name: 'totalVintageQuantity', internalType: 'uint64', type: 'uint64' },
          { name: 'isCorsiaCompliant', internalType: 'bool', type: 'bool' },
          { name: 'isCCPcompliant', internalType: 'bool', type: 'bool' },
          { name: 'coBenefits', internalType: 'string', type: 'string' },
          { name: 'correspAdjustment', internalType: 'string', type: 'string' },
          { name: 'additionalCertification', internalType: 'string', type: 'string' },
          { name: 'uri', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addNewVintage',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'baseURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'contractRegistry',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'exists',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'fractionalize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getProjectVintageDataByTokenId',
    outputs: [
      {
        name: '',
        internalType: 'struct VintageData',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'startTime', internalType: 'uint64', type: 'uint64' },
          { name: 'endTime', internalType: 'uint64', type: 'uint64' },
          { name: 'projectTokenId', internalType: 'uint256', type: 'uint256' },
          { name: 'totalVintageQuantity', internalType: 'uint64', type: 'uint64' },
          { name: 'isCorsiaCompliant', internalType: 'bool', type: 'bool' },
          { name: 'isCCPcompliant', internalType: 'bool', type: 'bool' },
          { name: 'coBenefits', internalType: 'string', type: 'string' },
          { name: 'correspAdjustment', internalType: 'string', type: 'string' },
          { name: 'additionalCertification', internalType: 'string', type: 'string' },
          { name: 'uri', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getVintageData',
    outputs: [
      {
        name: '',
        internalType: 'struct VintageData',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'startTime', internalType: 'uint64', type: 'uint64' },
          { name: 'endTime', internalType: 'uint64', type: 'uint64' },
          { name: 'projectTokenId', internalType: 'uint256', type: 'uint256' },
          { name: 'totalVintageQuantity', internalType: 'uint64', type: 'uint64' },
          { name: 'isCorsiaCompliant', internalType: 'bool', type: 'bool' },
          { name: 'isCCPcompliant', internalType: 'bool', type: 'bool' },
          { name: 'coBenefits', internalType: 'string', type: 'string' },
          { name: 'correspAdjustment', internalType: 'string', type: 'string' },
          { name: 'additionalCertification', internalType: 'string', type: 'string' },
          { name: 'uri', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'isRetired',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'pause', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'projectVintageTokenCounter',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'pvToTokenId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'renounceOwnership', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeMint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_address', internalType: 'address', type: 'address' }],
    name: 'setRegistry',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'status', internalType: 'bool', type: 'bool' },
    ],
    name: 'setRetirementStatus',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'unpause', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'validProjectVintageIds',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'vintageData',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'startTime', internalType: 'uint64', type: 'uint64' },
      { name: 'endTime', internalType: 'uint64', type: 'uint64' },
      { name: 'projectTokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'totalVintageQuantity', internalType: 'uint64', type: 'uint64' },
      { name: 'isCorsiaCompliant', internalType: 'bool', type: 'bool' },
      { name: 'isCCPcompliant', internalType: 'bool', type: 'bool' },
      { name: 'coBenefits', internalType: 'string', type: 'string' },
      { name: 'correspAdjustment', internalType: 'string', type: 'string' },
      { name: 'additionalCertification', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Registry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const registryABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCarbonProjectAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCarbonProjectVintagesAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getKyklosTokenAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getKyklosTokenFactoryAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_address', internalType: 'address', type: 'address' }],
    name: 'getProjectVintageERC20Registry',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getRetirementCertificatesAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'projectVintageERC20Registry',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_address', internalType: 'address', type: 'address' }],
    name: 'setCarbonProjectAddress',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_address', internalType: 'address', type: 'address' }],
    name: 'setCarbonProjectVintagesAddress',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_address', internalType: 'address', type: 'address' }],
    name: 'setKyklosTokenAddress',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_address', internalType: 'address', type: 'address' }],
    name: 'setKyklosTokenFactoryAddress',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_address', internalType: 'address', type: 'address' },
      { name: '_bool', internalType: 'bool', type: 'bool' },
    ],
    name: 'setProjectVintageERC20Registry',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_address', internalType: 'address', type: 'address' }],
    name: 'setRetirementCertificatesAddress',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// KyklosToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const kyklosTokenABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_contractRegistry', internalType: 'address', type: 'address' },
      { name: '_projectVintageTokenId', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'bridger', internalType: 'address', type: 'address', indexed: false },
      { name: 'fees', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'FeeBurnt',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'bridger', internalType: 'address', type: 'address', indexed: false },
      { name: 'fees', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'FeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: false },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'eventId', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Retired',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'contractRegistry',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'minterToId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'projectVintageTokenId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// KyklosTokenStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const kyklosTokenStorageABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'contractRegistry',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'minterToId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'projectVintageTokenId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// KyklosTokenFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const kyklosTokenFactoryABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_contractRegistry', internalType: 'address', type: 'address' },
      { name: '_beacon', internalType: 'address', type: 'address' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Paused',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'vintageTokenId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'tokenAddress', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'TokenCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Unpaused',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'beacon',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'bridgeFeeBurnAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'bridgeFeeBurnPercentageInBase',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'bridgeFeePercentageInBase',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'bridgeFeeReceiver',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'contractRegistry',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_vintageTokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'createToken',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_vintageTokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'createToken2',
    outputs: [{ name: 'tokenAddress', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'deployedContracts',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'projectVintageTokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getProjectVintageToErc20',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'implementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'increaseTotalRetired',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'pause', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'projectVintageToErc20',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'renounceOwnership', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_address', internalType: 'address', type: 'address' }],
    name: 'setBridgeFeeBurnAddress',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_percentage', internalType: 'uint256', type: 'uint256' }],
    name: 'setBridgeFeeBurnPercentageInBase',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_percentage', internalType: 'uint256', type: 'uint256' }],
    name: 'setBridgeFeePercentageInBase',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_address', internalType: 'address', type: 'address' }],
    name: 'setBridgeFeeReceiver',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_address', internalType: 'address', type: 'address' }],
    name: 'setRegistry',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalRetired',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'unpause', outputs: [] },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// KyklosTokenFactoryStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const kyklosTokenFactoryStorageABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'beacon',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'bridgeFeeBurnAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'bridgeFeeBurnPercentageInBase',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'bridgeFeePercentageInBase',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'bridgeFeeReceiver',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'contractRegistry',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'deployedContracts',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'projectVintageToErc20',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalRetired',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// NFTRetirementBatch
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const nftRetirementBatchABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: false },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'BatchMinted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'status', internalType: 'enum RetirementStatus', type: 'uint8', indexed: false },
    ],
    name: 'BatchStatusUpdate',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'serialNumber', internalType: 'string', type: 'string', indexed: false },
      { name: 'quantity', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'BatchUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'previousAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'newAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'RoleRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'URIs',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'VERIFIER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'baseURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'batchTokenCounter',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'confirmRetirement',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'contractRegistry',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'fractionalize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'getAllNftOfUser',
    outputs: [
      {
        name: '',
        internalType: 'struct NFTRetirementBatch.NFTData[]',
        type: 'tuple[]',
        components: [
          { name: 'serialNumber', internalType: 'string', type: 'string' },
          { name: 'quantity', internalType: 'uint256', type: 'uint256' },
          { name: 'status', internalType: 'enum RetirementStatus', type: 'uint8' },
          { name: 'uri', internalType: 'string', type: 'string' },
        ],
      },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getBatchNFTData',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'enum RetirementStatus', type: 'uint8' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getConfirmationStatus',
    outputs: [{ name: '', internalType: 'enum RetirementStatus', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getRegistry',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'to', internalType: 'address', type: 'address' }],
    name: 'mintEmptyBatch',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'nftList',
    outputs: [
      { name: 'serialNumber', internalType: 'string', type: 'string' },
      { name: 'quantity', internalType: 'uint256', type: 'uint256' },
      { name: 'status', internalType: 'enum RetirementStatus', type: 'uint8' },
      { name: 'uri', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'rejectRetirement',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'serialNumberApproved',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'gateway', internalType: 'string', type: 'string' }],
    name: 'setBaseURI',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_address', internalType: 'address', type: 'address' }],
    name: 'setRegistry',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'newSerialNumber', internalType: 'string', type: 'string' },
      { name: 'newQuantity', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setSerialandQuantity',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'setToPending',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'serialNumber', internalType: 'string', type: 'string' },
      { name: 'quantity', internalType: 'uint256', type: 'uint256' },
      { name: 'uri', internalType: 'string', type: 'string' },
    ],
    name: 'updateBatchWithData',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AccessControl
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const accessControlABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'previousAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'newAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'RoleRevoked',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAccessControl
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAccessControlABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'previousAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'newAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'RoleRevoked',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Ownable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'renounceOwnership', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1822Proxiable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1822ProxiableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1967
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1967ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Proxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const proxyABI = [
  { stateMutability: 'payable', type: 'fallback' },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Pausable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pausableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Paused',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Unpaused',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BeaconProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const beaconProxyABI = [
  {
    stateMutability: 'payable',
    type: 'constructor',
    inputs: [
      { name: 'beacon', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded',
  },
  { stateMutability: 'payable', type: 'fallback' },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IBeacon
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iBeaconABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'implementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC1967Upgrade
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc1967UpgradeABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name_', internalType: 'string', type: 'string' },
      { name: 'symbol_', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name_', internalType: 'string', type: 'string' },
      { name: 'symbol_', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721Receiver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721ReceiverABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc165ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc165ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Metadata
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20MetadataABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721Burnable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721BurnableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721Metadata
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721MetadataABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Core
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link iCarbonProjectsABI}__.
 */
export function getICarbonProjects(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: iCarbonProjectsABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link iCarbonProjectsABI}__.
 */
export function readICarbonProjects<
  TAbi extends readonly unknown[] = typeof iCarbonProjectsABI,
  TFunctionName extends string = string
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({ abi: iCarbonProjectsABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link iCarbonProjectsABI}__.
 */
export function writeICarbonProjects<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof iCarbonProjectsABI, TFunctionName>, 'abi'>
    | Omit<WriteContractUnpreparedArgs<typeof iCarbonProjectsABI, TFunctionName>, 'abi'>
) {
  return writeContract({ abi: iCarbonProjectsABI, ...config } as WriteContractArgs<
    typeof iCarbonProjectsABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link iCarbonProjectsABI}__.
 */
export function prepareWriteICarbonProjects<
  TAbi extends readonly unknown[] = typeof iCarbonProjectsABI,
  TFunctionName extends string = string
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({ abi: iCarbonProjectsABI, ...config } as unknown as PrepareWriteContractConfig<
    TAbi,
    TFunctionName
  >)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link iCarbonProjectsABI}__.
 */
export function watchICarbonProjectsEvent<
  TAbi extends readonly unknown[] = typeof iCarbonProjectsABI,
  TEventName extends string = string
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>
) {
  return watchContractEvent(
    { abi: iCarbonProjectsABI, ...config } as WatchContractEventConfig<TAbi, TEventName>,
    callback
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link iKyklosTokenFactoryABI}__.
 */
export function getIKyklosTokenFactory(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: iKyklosTokenFactoryABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link iKyklosTokenFactoryABI}__.
 */
export function readIKyklosTokenFactory<
  TAbi extends readonly unknown[] = typeof iKyklosTokenFactoryABI,
  TFunctionName extends string = string
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({ abi: iKyklosTokenFactoryABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link iKyklosTokenFactoryABI}__.
 */
export function writeIKyklosTokenFactory<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof iKyklosTokenFactoryABI, TFunctionName>, 'abi'>
    | Omit<WriteContractUnpreparedArgs<typeof iKyklosTokenFactoryABI, TFunctionName>, 'abi'>
) {
  return writeContract({ abi: iKyklosTokenFactoryABI, ...config } as WriteContractArgs<
    typeof iKyklosTokenFactoryABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link iKyklosTokenFactoryABI}__.
 */
export function prepareWriteIKyklosTokenFactory<
  TAbi extends readonly unknown[] = typeof iKyklosTokenFactoryABI,
  TFunctionName extends string = string
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({ abi: iKyklosTokenFactoryABI, ...config } as unknown as PrepareWriteContractConfig<
    TAbi,
    TFunctionName
  >)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link iProjectVintagesABI}__.
 */
export function getIProjectVintages(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: iProjectVintagesABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link iProjectVintagesABI}__.
 */
export function readIProjectVintages<
  TAbi extends readonly unknown[] = typeof iProjectVintagesABI,
  TFunctionName extends string = string
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({ abi: iProjectVintagesABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link iProjectVintagesABI}__.
 */
export function writeIProjectVintages<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof iProjectVintagesABI, TFunctionName>, 'abi'>
    | Omit<WriteContractUnpreparedArgs<typeof iProjectVintagesABI, TFunctionName>, 'abi'>
) {
  return writeContract({ abi: iProjectVintagesABI, ...config } as WriteContractArgs<
    typeof iProjectVintagesABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link iProjectVintagesABI}__.
 */
export function prepareWriteIProjectVintages<
  TAbi extends readonly unknown[] = typeof iProjectVintagesABI,
  TFunctionName extends string = string
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({ abi: iProjectVintagesABI, ...config } as unknown as PrepareWriteContractConfig<
    TAbi,
    TFunctionName
  >)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link iProjectVintagesABI}__.
 */
export function watchIProjectVintagesEvent<
  TAbi extends readonly unknown[] = typeof iProjectVintagesABI,
  TEventName extends string = string
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>
) {
  return watchContractEvent(
    { abi: iProjectVintagesABI, ...config } as WatchContractEventConfig<TAbi, TEventName>,
    callback
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link iRegistryABI}__.
 */
export function getIRegistry(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: iRegistryABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link iRegistryABI}__.
 */
export function readIRegistry<
  TAbi extends readonly unknown[] = typeof iRegistryABI,
  TFunctionName extends string = string
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({ abi: iRegistryABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link iRegistryABI}__.
 */
export function writeIRegistry<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof iRegistryABI, TFunctionName>, 'abi'>
    | Omit<WriteContractUnpreparedArgs<typeof iRegistryABI, TFunctionName>, 'abi'>
) {
  return writeContract({ abi: iRegistryABI, ...config } as WriteContractArgs<typeof iRegistryABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link iRegistryABI}__.
 */
export function prepareWriteIRegistry<
  TAbi extends readonly unknown[] = typeof iRegistryABI,
  TFunctionName extends string = string
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({ abi: iRegistryABI, ...config } as unknown as PrepareWriteContractConfig<
    TAbi,
    TFunctionName
  >)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link carbonProjectABI}__.
 */
export function getCarbonProject(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: carbonProjectABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link carbonProjectABI}__.
 */
export function readCarbonProject<
  TAbi extends readonly unknown[] = typeof carbonProjectABI,
  TFunctionName extends string = string
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({ abi: carbonProjectABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link carbonProjectABI}__.
 */
export function writeCarbonProject<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof carbonProjectABI, TFunctionName>, 'abi'>
    | Omit<WriteContractUnpreparedArgs<typeof carbonProjectABI, TFunctionName>, 'abi'>
) {
  return writeContract({ abi: carbonProjectABI, ...config } as WriteContractArgs<
    typeof carbonProjectABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link carbonProjectABI}__.
 */
export function prepareWriteCarbonProject<
  TAbi extends readonly unknown[] = typeof carbonProjectABI,
  TFunctionName extends string = string
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({ abi: carbonProjectABI, ...config } as unknown as PrepareWriteContractConfig<
    TAbi,
    TFunctionName
  >)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link carbonProjectABI}__.
 */
export function watchCarbonProjectEvent<
  TAbi extends readonly unknown[] = typeof carbonProjectABI,
  TEventName extends string = string
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>
) {
  return watchContractEvent(
    { abi: carbonProjectABI, ...config } as WatchContractEventConfig<TAbi, TEventName>,
    callback
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link carbonProjectsStorageABI}__.
 */
export function getCarbonProjectsStorage(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: carbonProjectsStorageABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link carbonProjectsStorageABI}__.
 */
export function readCarbonProjectsStorage<
  TAbi extends readonly unknown[] = typeof carbonProjectsStorageABI,
  TFunctionName extends string = string
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({ abi: carbonProjectsStorageABI, ...config } as unknown as ReadContractConfig<
    TAbi,
    TFunctionName
  >)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link carbonProjectVintagesStorageABI}__.
 */
export function getCarbonProjectVintagesStorage(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: carbonProjectVintagesStorageABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link carbonProjectVintagesStorageABI}__.
 */
export function readCarbonProjectVintagesStorage<
  TAbi extends readonly unknown[] = typeof carbonProjectVintagesStorageABI,
  TFunctionName extends string = string
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({ abi: carbonProjectVintagesStorageABI, ...config } as unknown as ReadContractConfig<
    TAbi,
    TFunctionName
  >)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link projectVintagesABI}__.
 */
export function getProjectVintages(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: projectVintagesABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link projectVintagesABI}__.
 */
export function readProjectVintages<
  TAbi extends readonly unknown[] = typeof projectVintagesABI,
  TFunctionName extends string = string
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({ abi: projectVintagesABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link projectVintagesABI}__.
 */
export function writeProjectVintages<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof projectVintagesABI, TFunctionName>, 'abi'>
    | Omit<WriteContractUnpreparedArgs<typeof projectVintagesABI, TFunctionName>, 'abi'>
) {
  return writeContract({ abi: projectVintagesABI, ...config } as WriteContractArgs<
    typeof projectVintagesABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link projectVintagesABI}__.
 */
export function prepareWriteProjectVintages<
  TAbi extends readonly unknown[] = typeof projectVintagesABI,
  TFunctionName extends string = string
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({ abi: projectVintagesABI, ...config } as unknown as PrepareWriteContractConfig<
    TAbi,
    TFunctionName
  >)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link projectVintagesABI}__.
 */
export function watchProjectVintagesEvent<
  TAbi extends readonly unknown[] = typeof projectVintagesABI,
  TEventName extends string = string
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>
) {
  return watchContractEvent(
    { abi: projectVintagesABI, ...config } as WatchContractEventConfig<TAbi, TEventName>,
    callback
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link registryABI}__.
 */
export function getRegistry(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: registryABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link registryABI}__.
 */
export function readRegistry<
  TAbi extends readonly unknown[] = typeof registryABI,
  TFunctionName extends string = string
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({ abi: registryABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link registryABI}__.
 */
export function writeRegistry<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof registryABI, TFunctionName>, 'abi'>
    | Omit<WriteContractUnpreparedArgs<typeof registryABI, TFunctionName>, 'abi'>
) {
  return writeContract({ abi: registryABI, ...config } as WriteContractArgs<typeof registryABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link registryABI}__.
 */
export function prepareWriteRegistry<
  TAbi extends readonly unknown[] = typeof registryABI,
  TFunctionName extends string = string
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({ abi: registryABI, ...config } as unknown as PrepareWriteContractConfig<
    TAbi,
    TFunctionName
  >)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link kyklosTokenABI}__.
 */
export function getKyklosToken(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: kyklosTokenABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link kyklosTokenABI}__.
 */
export function readKyklosToken<
  TAbi extends readonly unknown[] = typeof kyklosTokenABI,
  TFunctionName extends string = string
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({ abi: kyklosTokenABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link kyklosTokenABI}__.
 */
export function writeKyklosToken<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof kyklosTokenABI, TFunctionName>, 'abi'>
    | Omit<WriteContractUnpreparedArgs<typeof kyklosTokenABI, TFunctionName>, 'abi'>
) {
  return writeContract({ abi: kyklosTokenABI, ...config } as WriteContractArgs<typeof kyklosTokenABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link kyklosTokenABI}__.
 */
export function prepareWriteKyklosToken<
  TAbi extends readonly unknown[] = typeof kyklosTokenABI,
  TFunctionName extends string = string
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({ abi: kyklosTokenABI, ...config } as unknown as PrepareWriteContractConfig<
    TAbi,
    TFunctionName
  >)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link kyklosTokenABI}__.
 */
export function watchKyklosTokenEvent<
  TAbi extends readonly unknown[] = typeof kyklosTokenABI,
  TEventName extends string = string
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>
) {
  return watchContractEvent({ abi: kyklosTokenABI, ...config } as WatchContractEventConfig<TAbi, TEventName>, callback)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link kyklosTokenStorageABI}__.
 */
export function getKyklosTokenStorage(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: kyklosTokenStorageABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link kyklosTokenStorageABI}__.
 */
export function readKyklosTokenStorage<
  TAbi extends readonly unknown[] = typeof kyklosTokenStorageABI,
  TFunctionName extends string = string
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({ abi: kyklosTokenStorageABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link kyklosTokenFactoryABI}__.
 */
export function getKyklosTokenFactory(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: kyklosTokenFactoryABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link kyklosTokenFactoryABI}__.
 */
export function readKyklosTokenFactory<
  TAbi extends readonly unknown[] = typeof kyklosTokenFactoryABI,
  TFunctionName extends string = string
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({ abi: kyklosTokenFactoryABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link kyklosTokenFactoryABI}__.
 */
export function writeKyklosTokenFactory<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof kyklosTokenFactoryABI, TFunctionName>, 'abi'>
    | Omit<WriteContractUnpreparedArgs<typeof kyklosTokenFactoryABI, TFunctionName>, 'abi'>
) {
  return writeContract({ abi: kyklosTokenFactoryABI, ...config } as WriteContractArgs<
    typeof kyklosTokenFactoryABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link kyklosTokenFactoryABI}__.
 */
export function prepareWriteKyklosTokenFactory<
  TAbi extends readonly unknown[] = typeof kyklosTokenFactoryABI,
  TFunctionName extends string = string
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({ abi: kyklosTokenFactoryABI, ...config } as unknown as PrepareWriteContractConfig<
    TAbi,
    TFunctionName
  >)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link kyklosTokenFactoryABI}__.
 */
export function watchKyklosTokenFactoryEvent<
  TAbi extends readonly unknown[] = typeof kyklosTokenFactoryABI,
  TEventName extends string = string
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>
) {
  return watchContractEvent(
    { abi: kyklosTokenFactoryABI, ...config } as WatchContractEventConfig<TAbi, TEventName>,
    callback
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link kyklosTokenFactoryStorageABI}__.
 */
export function getKyklosTokenFactoryStorage(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: kyklosTokenFactoryStorageABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link kyklosTokenFactoryStorageABI}__.
 */
export function readKyklosTokenFactoryStorage<
  TAbi extends readonly unknown[] = typeof kyklosTokenFactoryStorageABI,
  TFunctionName extends string = string
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({ abi: kyklosTokenFactoryStorageABI, ...config } as unknown as ReadContractConfig<
    TAbi,
    TFunctionName
  >)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link nftRetirementBatchABI}__.
 */
export function getNftRetirementBatch(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: nftRetirementBatchABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link nftRetirementBatchABI}__.
 */
export function readNftRetirementBatch<
  TAbi extends readonly unknown[] = typeof nftRetirementBatchABI,
  TFunctionName extends string = string
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({ abi: nftRetirementBatchABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link nftRetirementBatchABI}__.
 */
export function writeNftRetirementBatch<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof nftRetirementBatchABI, TFunctionName>, 'abi'>
    | Omit<WriteContractUnpreparedArgs<typeof nftRetirementBatchABI, TFunctionName>, 'abi'>
) {
  return writeContract({ abi: nftRetirementBatchABI, ...config } as WriteContractArgs<
    typeof nftRetirementBatchABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link nftRetirementBatchABI}__.
 */
export function prepareWriteNftRetirementBatch<
  TAbi extends readonly unknown[] = typeof nftRetirementBatchABI,
  TFunctionName extends string = string
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({ abi: nftRetirementBatchABI, ...config } as unknown as PrepareWriteContractConfig<
    TAbi,
    TFunctionName
  >)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link nftRetirementBatchABI}__.
 */
export function watchNftRetirementBatchEvent<
  TAbi extends readonly unknown[] = typeof nftRetirementBatchABI,
  TEventName extends string = string
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>
) {
  return watchContractEvent(
    { abi: nftRetirementBatchABI, ...config } as WatchContractEventConfig<TAbi, TEventName>,
    callback
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link accessControlABI}__.
 */
export function getAccessControl(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: accessControlABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link accessControlABI}__.
 */
export function readAccessControl<
  TAbi extends readonly unknown[] = typeof accessControlABI,
  TFunctionName extends string = string
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({ abi: accessControlABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link accessControlABI}__.
 */
export function writeAccessControl<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof accessControlABI, TFunctionName>, 'abi'>
    | Omit<WriteContractUnpreparedArgs<typeof accessControlABI, TFunctionName>, 'abi'>
) {
  return writeContract({ abi: accessControlABI, ...config } as WriteContractArgs<
    typeof accessControlABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link accessControlABI}__.
 */
export function prepareWriteAccessControl<
  TAbi extends readonly unknown[] = typeof accessControlABI,
  TFunctionName extends string = string
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({ abi: accessControlABI, ...config } as unknown as PrepareWriteContractConfig<
    TAbi,
    TFunctionName
  >)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link accessControlABI}__.
 */
export function watchAccessControlEvent<
  TAbi extends readonly unknown[] = typeof accessControlABI,
  TEventName extends string = string
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>
) {
  return watchContractEvent(
    { abi: accessControlABI, ...config } as WatchContractEventConfig<TAbi, TEventName>,
    callback
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function getIAccessControl(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: iAccessControlABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function readIAccessControl<
  TAbi extends readonly unknown[] = typeof iAccessControlABI,
  TFunctionName extends string = string
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({ abi: iAccessControlABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function writeIAccessControl<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof iAccessControlABI, TFunctionName>, 'abi'>
    | Omit<WriteContractUnpreparedArgs<typeof iAccessControlABI, TFunctionName>, 'abi'>
) {
  return writeContract({ abi: iAccessControlABI, ...config } as WriteContractArgs<
    typeof iAccessControlABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function prepareWriteIAccessControl<
  TAbi extends readonly unknown[] = typeof iAccessControlABI,
  TFunctionName extends string = string
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({ abi: iAccessControlABI, ...config } as unknown as PrepareWriteContractConfig<
    TAbi,
    TFunctionName
  >)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function watchIAccessControlEvent<
  TAbi extends readonly unknown[] = typeof iAccessControlABI,
  TEventName extends string = string
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>
) {
  return watchContractEvent(
    { abi: iAccessControlABI, ...config } as WatchContractEventConfig<TAbi, TEventName>,
    callback
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link ownableABI}__.
 */
export function getOwnable(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: ownableABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link ownableABI}__.
 */
export function readOwnable<TAbi extends readonly unknown[] = typeof ownableABI, TFunctionName extends string = string>(
  config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>
) {
  return readContract({ abi: ownableABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link ownableABI}__.
 */
export function writeOwnable<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof ownableABI, TFunctionName>, 'abi'>
    | Omit<WriteContractUnpreparedArgs<typeof ownableABI, TFunctionName>, 'abi'>
) {
  return writeContract({ abi: ownableABI, ...config } as WriteContractArgs<typeof ownableABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link ownableABI}__.
 */
export function prepareWriteOwnable<
  TAbi extends readonly unknown[] = typeof ownableABI,
  TFunctionName extends string = string
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({ abi: ownableABI, ...config } as unknown as PrepareWriteContractConfig<
    TAbi,
    TFunctionName
  >)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link ownableABI}__.
 */
export function watchOwnableEvent<
  TAbi extends readonly unknown[] = typeof ownableABI,
  TEventName extends string = string
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>
) {
  return watchContractEvent({ abi: ownableABI, ...config } as WatchContractEventConfig<TAbi, TEventName>, callback)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link ierc1822ProxiableABI}__.
 */
export function getIerc1822Proxiable(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: ierc1822ProxiableABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link ierc1822ProxiableABI}__.
 */
export function readIerc1822Proxiable<
  TAbi extends readonly unknown[] = typeof ierc1822ProxiableABI,
  TFunctionName extends string = string
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({ abi: ierc1822ProxiableABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link ierc1967ABI}__.
 */
export function getIerc1967(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: ierc1967ABI, ...config })
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link ierc1967ABI}__.
 */
export function watchIerc1967Event<
  TAbi extends readonly unknown[] = typeof ierc1967ABI,
  TEventName extends string = string
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>
) {
  return watchContractEvent({ abi: ierc1967ABI, ...config } as WatchContractEventConfig<TAbi, TEventName>, callback)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link proxyABI}__.
 */
export function getProxy(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: proxyABI, ...config })
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link pausableABI}__.
 */
export function getPausable(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: pausableABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link pausableABI}__.
 */
export function readPausable<
  TAbi extends readonly unknown[] = typeof pausableABI,
  TFunctionName extends string = string
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({ abi: pausableABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link pausableABI}__.
 */
export function watchPausableEvent<
  TAbi extends readonly unknown[] = typeof pausableABI,
  TEventName extends string = string
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>
) {
  return watchContractEvent({ abi: pausableABI, ...config } as WatchContractEventConfig<TAbi, TEventName>, callback)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link beaconProxyABI}__.
 */
export function getBeaconProxy(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: beaconProxyABI, ...config })
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link beaconProxyABI}__.
 */
export function watchBeaconProxyEvent<
  TAbi extends readonly unknown[] = typeof beaconProxyABI,
  TEventName extends string = string
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>
) {
  return watchContractEvent({ abi: beaconProxyABI, ...config } as WatchContractEventConfig<TAbi, TEventName>, callback)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link iBeaconABI}__.
 */
export function getIBeacon(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: iBeaconABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link iBeaconABI}__.
 */
export function readIBeacon<TAbi extends readonly unknown[] = typeof iBeaconABI, TFunctionName extends string = string>(
  config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>
) {
  return readContract({ abi: iBeaconABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link erc1967UpgradeABI}__.
 */
export function getErc1967Upgrade(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: erc1967UpgradeABI, ...config })
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link erc1967UpgradeABI}__.
 */
export function watchErc1967UpgradeEvent<
  TAbi extends readonly unknown[] = typeof erc1967UpgradeABI,
  TEventName extends string = string
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>
) {
  return watchContractEvent(
    { abi: erc1967UpgradeABI, ...config } as WatchContractEventConfig<TAbi, TEventName>,
    callback
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link erc20ABI}__.
 */
export function getErc20(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: erc20ABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link erc20ABI}__.
 */
export function readErc20<TAbi extends readonly unknown[] = typeof erc20ABI, TFunctionName extends string = string>(
  config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>
) {
  return readContract({ abi: erc20ABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link erc20ABI}__.
 */
export function writeErc20<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof erc20ABI, TFunctionName>, 'abi'>
    | Omit<WriteContractUnpreparedArgs<typeof erc20ABI, TFunctionName>, 'abi'>
) {
  return writeContract({ abi: erc20ABI, ...config } as WriteContractArgs<typeof erc20ABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link erc20ABI}__.
 */
export function prepareWriteErc20<
  TAbi extends readonly unknown[] = typeof erc20ABI,
  TFunctionName extends string = string
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({ abi: erc20ABI, ...config } as unknown as PrepareWriteContractConfig<
    TAbi,
    TFunctionName
  >)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function watchErc20Event<TAbi extends readonly unknown[] = typeof erc20ABI, TEventName extends string = string>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>
) {
  return watchContractEvent({ abi: erc20ABI, ...config } as WatchContractEventConfig<TAbi, TEventName>, callback)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function getIerc20(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: ierc20ABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function readIerc20<TAbi extends readonly unknown[] = typeof ierc20ABI, TFunctionName extends string = string>(
  config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>
) {
  return readContract({ abi: ierc20ABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function writeIerc20<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof ierc20ABI, TFunctionName>, 'abi'>
    | Omit<WriteContractUnpreparedArgs<typeof ierc20ABI, TFunctionName>, 'abi'>
) {
  return writeContract({ abi: ierc20ABI, ...config } as WriteContractArgs<typeof ierc20ABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function prepareWriteIerc20<
  TAbi extends readonly unknown[] = typeof ierc20ABI,
  TFunctionName extends string = string
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({ abi: ierc20ABI, ...config } as unknown as PrepareWriteContractConfig<
    TAbi,
    TFunctionName
  >)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function watchIerc20Event<
  TAbi extends readonly unknown[] = typeof ierc20ABI,
  TEventName extends string = string
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>
) {
  return watchContractEvent({ abi: ierc20ABI, ...config } as WatchContractEventConfig<TAbi, TEventName>, callback)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link erc721ABI}__.
 */
export function getErc721(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: erc721ABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link erc721ABI}__.
 */
export function readErc721<TAbi extends readonly unknown[] = typeof erc721ABI, TFunctionName extends string = string>(
  config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>
) {
  return readContract({ abi: erc721ABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link erc721ABI}__.
 */
export function writeErc721<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof erc721ABI, TFunctionName>, 'abi'>
    | Omit<WriteContractUnpreparedArgs<typeof erc721ABI, TFunctionName>, 'abi'>
) {
  return writeContract({ abi: erc721ABI, ...config } as WriteContractArgs<typeof erc721ABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link erc721ABI}__.
 */
export function prepareWriteErc721<
  TAbi extends readonly unknown[] = typeof erc721ABI,
  TFunctionName extends string = string
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({ abi: erc721ABI, ...config } as unknown as PrepareWriteContractConfig<
    TAbi,
    TFunctionName
  >)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link erc721ABI}__.
 */
export function watchErc721Event<
  TAbi extends readonly unknown[] = typeof erc721ABI,
  TEventName extends string = string
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>
) {
  return watchContractEvent({ abi: erc721ABI, ...config } as WatchContractEventConfig<TAbi, TEventName>, callback)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function getIerc721(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: ierc721ABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function readIerc721<TAbi extends readonly unknown[] = typeof ierc721ABI, TFunctionName extends string = string>(
  config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>
) {
  return readContract({ abi: ierc721ABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function writeIerc721<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof ierc721ABI, TFunctionName>, 'abi'>
    | Omit<WriteContractUnpreparedArgs<typeof ierc721ABI, TFunctionName>, 'abi'>
) {
  return writeContract({ abi: ierc721ABI, ...config } as WriteContractArgs<typeof ierc721ABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function prepareWriteIerc721<
  TAbi extends readonly unknown[] = typeof ierc721ABI,
  TFunctionName extends string = string
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({ abi: ierc721ABI, ...config } as unknown as PrepareWriteContractConfig<
    TAbi,
    TFunctionName
  >)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function watchIerc721Event<
  TAbi extends readonly unknown[] = typeof ierc721ABI,
  TEventName extends string = string
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>
) {
  return watchContractEvent({ abi: ierc721ABI, ...config } as WatchContractEventConfig<TAbi, TEventName>, callback)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link ierc721ReceiverABI}__.
 */
export function getIerc721Receiver(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: ierc721ReceiverABI, ...config })
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link ierc721ReceiverABI}__.
 */
export function writeIerc721Receiver<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof ierc721ReceiverABI, TFunctionName>, 'abi'>
    | Omit<WriteContractUnpreparedArgs<typeof ierc721ReceiverABI, TFunctionName>, 'abi'>
) {
  return writeContract({ abi: ierc721ReceiverABI, ...config } as WriteContractArgs<
    typeof ierc721ReceiverABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link ierc721ReceiverABI}__.
 */
export function prepareWriteIerc721Receiver<
  TAbi extends readonly unknown[] = typeof ierc721ReceiverABI,
  TFunctionName extends string = string
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({ abi: ierc721ReceiverABI, ...config } as unknown as PrepareWriteContractConfig<
    TAbi,
    TFunctionName
  >)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link erc165ABI}__.
 */
export function getErc165(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: erc165ABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link erc165ABI}__.
 */
export function readErc165<TAbi extends readonly unknown[] = typeof erc165ABI, TFunctionName extends string = string>(
  config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>
) {
  return readContract({ abi: erc165ABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function getIerc165(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: ierc165ABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function readIerc165<TAbi extends readonly unknown[] = typeof ierc165ABI, TFunctionName extends string = string>(
  config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>
) {
  return readContract({ abi: ierc165ABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function getIerc20Metadata(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: ierc20MetadataABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function readIerc20Metadata<
  TAbi extends readonly unknown[] = typeof ierc20MetadataABI,
  TFunctionName extends string = string
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({ abi: ierc20MetadataABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function writeIerc20Metadata<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof ierc20MetadataABI, TFunctionName>, 'abi'>
    | Omit<WriteContractUnpreparedArgs<typeof ierc20MetadataABI, TFunctionName>, 'abi'>
) {
  return writeContract({ abi: ierc20MetadataABI, ...config } as WriteContractArgs<
    typeof ierc20MetadataABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function prepareWriteIerc20Metadata<
  TAbi extends readonly unknown[] = typeof ierc20MetadataABI,
  TFunctionName extends string = string
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({ abi: ierc20MetadataABI, ...config } as unknown as PrepareWriteContractConfig<
    TAbi,
    TFunctionName
  >)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function watchIerc20MetadataEvent<
  TAbi extends readonly unknown[] = typeof ierc20MetadataABI,
  TEventName extends string = string
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>
) {
  return watchContractEvent(
    { abi: ierc20MetadataABI, ...config } as WatchContractEventConfig<TAbi, TEventName>,
    callback
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link erc721BurnableABI}__.
 */
export function getErc721Burnable(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: erc721BurnableABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link erc721BurnableABI}__.
 */
export function readErc721Burnable<
  TAbi extends readonly unknown[] = typeof erc721BurnableABI,
  TFunctionName extends string = string
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({ abi: erc721BurnableABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link erc721BurnableABI}__.
 */
export function writeErc721Burnable<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof erc721BurnableABI, TFunctionName>, 'abi'>
    | Omit<WriteContractUnpreparedArgs<typeof erc721BurnableABI, TFunctionName>, 'abi'>
) {
  return writeContract({ abi: erc721BurnableABI, ...config } as WriteContractArgs<
    typeof erc721BurnableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link erc721BurnableABI}__.
 */
export function prepareWriteErc721Burnable<
  TAbi extends readonly unknown[] = typeof erc721BurnableABI,
  TFunctionName extends string = string
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({ abi: erc721BurnableABI, ...config } as unknown as PrepareWriteContractConfig<
    TAbi,
    TFunctionName
  >)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link erc721BurnableABI}__.
 */
export function watchErc721BurnableEvent<
  TAbi extends readonly unknown[] = typeof erc721BurnableABI,
  TEventName extends string = string
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>
) {
  return watchContractEvent(
    { abi: erc721BurnableABI, ...config } as WatchContractEventConfig<TAbi, TEventName>,
    callback
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function getIerc721Metadata(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: ierc721MetadataABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function readIerc721Metadata<
  TAbi extends readonly unknown[] = typeof ierc721MetadataABI,
  TFunctionName extends string = string
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({ abi: ierc721MetadataABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function writeIerc721Metadata<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof ierc721MetadataABI, TFunctionName>, 'abi'>
    | Omit<WriteContractUnpreparedArgs<typeof ierc721MetadataABI, TFunctionName>, 'abi'>
) {
  return writeContract({ abi: ierc721MetadataABI, ...config } as WriteContractArgs<
    typeof ierc721MetadataABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function prepareWriteIerc721Metadata<
  TAbi extends readonly unknown[] = typeof ierc721MetadataABI,
  TFunctionName extends string = string
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({ abi: ierc721MetadataABI, ...config } as unknown as PrepareWriteContractConfig<
    TAbi,
    TFunctionName
  >)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function watchIerc721MetadataEvent<
  TAbi extends readonly unknown[] = typeof ierc721MetadataABI,
  TEventName extends string = string
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>
) {
  return watchContractEvent(
    { abi: ierc721MetadataABI, ...config } as WatchContractEventConfig<TAbi, TEventName>,
    callback
  )
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iCarbonProjectsABI}__.
 */
export function useICarbonProjects(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: iCarbonProjectsABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCarbonProjectsABI}__.
 */
export function useICarbonProjectsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iCarbonProjectsABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof iCarbonProjectsABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: iCarbonProjectsABI, ...config } as UseContractReadConfig<
    typeof iCarbonProjectsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCarbonProjectsABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useICarbonProjectsBalanceOf<TSelectData = ReadContractResult<typeof iCarbonProjectsABI, 'balanceOf'>>(
  config: Omit<
    UseContractReadConfig<typeof iCarbonProjectsABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: iCarbonProjectsABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof iCarbonProjectsABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCarbonProjectsABI}__ and `functionName` set to `"existProjectId"`.
 */
export function useICarbonProjectsExistProjectId<
  TSelectData = ReadContractResult<typeof iCarbonProjectsABI, 'existProjectId'>
>(
  config: Omit<
    UseContractReadConfig<typeof iCarbonProjectsABI, 'existProjectId', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: iCarbonProjectsABI,
    functionName: 'existProjectId',
    ...config,
  } as UseContractReadConfig<typeof iCarbonProjectsABI, 'existProjectId', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCarbonProjectsABI}__ and `functionName` set to `"getApproved"`.
 */
export function useICarbonProjectsGetApproved<
  TSelectData = ReadContractResult<typeof iCarbonProjectsABI, 'getApproved'>
>(
  config: Omit<
    UseContractReadConfig<typeof iCarbonProjectsABI, 'getApproved', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: iCarbonProjectsABI, functionName: 'getApproved', ...config } as UseContractReadConfig<
    typeof iCarbonProjectsABI,
    'getApproved',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCarbonProjectsABI}__ and `functionName` set to `"getPidToTokenId"`.
 */
export function useICarbonProjectsGetPidToTokenId<
  TSelectData = ReadContractResult<typeof iCarbonProjectsABI, 'getPidToTokenId'>
>(
  config: Omit<
    UseContractReadConfig<typeof iCarbonProjectsABI, 'getPidToTokenId', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: iCarbonProjectsABI,
    functionName: 'getPidToTokenId',
    ...config,
  } as UseContractReadConfig<typeof iCarbonProjectsABI, 'getPidToTokenId', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCarbonProjectsABI}__ and `functionName` set to `"getProjectDataByTokenId"`.
 */
export function useICarbonProjectsGetProjectDataByTokenId<
  TSelectData = ReadContractResult<typeof iCarbonProjectsABI, 'getProjectDataByTokenId'>
>(
  config: Omit<
    UseContractReadConfig<typeof iCarbonProjectsABI, 'getProjectDataByTokenId', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: iCarbonProjectsABI,
    functionName: 'getProjectDataByTokenId',
    ...config,
  } as UseContractReadConfig<typeof iCarbonProjectsABI, 'getProjectDataByTokenId', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCarbonProjectsABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useICarbonProjectsIsApprovedForAll<
  TSelectData = ReadContractResult<typeof iCarbonProjectsABI, 'isApprovedForAll'>
>(
  config: Omit<
    UseContractReadConfig<typeof iCarbonProjectsABI, 'isApprovedForAll', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: iCarbonProjectsABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof iCarbonProjectsABI, 'isApprovedForAll', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCarbonProjectsABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useICarbonProjectsOwnerOf<TSelectData = ReadContractResult<typeof iCarbonProjectsABI, 'ownerOf'>>(
  config: Omit<
    UseContractReadConfig<typeof iCarbonProjectsABI, 'ownerOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: iCarbonProjectsABI, functionName: 'ownerOf', ...config } as UseContractReadConfig<
    typeof iCarbonProjectsABI,
    'ownerOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCarbonProjectsABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useICarbonProjectsSupportsInterface<
  TSelectData = ReadContractResult<typeof iCarbonProjectsABI, 'supportsInterface'>
>(
  config: Omit<
    UseContractReadConfig<typeof iCarbonProjectsABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: iCarbonProjectsABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof iCarbonProjectsABI, 'supportsInterface', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCarbonProjectsABI}__.
 */
export function useICarbonProjectsWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof iCarbonProjectsABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof iCarbonProjectsABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof iCarbonProjectsABI, TFunctionName>({
    abi: iCarbonProjectsABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCarbonProjectsABI}__ and `functionName` set to `"addNewProject"`.
 */
export function useICarbonProjectsAddNewProject<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iCarbonProjectsABI, 'addNewProject'>['abi'],
        'addNewProject'
      > & { functionName?: 'addNewProject' }
    : UseContractWriteConfig<TMode, typeof iCarbonProjectsABI, 'addNewProject'> & {
        abi?: never
        functionName?: 'addNewProject'
      } = {} as any
) {
  return useContractWrite<TMode, typeof iCarbonProjectsABI, 'addNewProject'>({
    abi: iCarbonProjectsABI,
    functionName: 'addNewProject',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCarbonProjectsABI}__ and `functionName` set to `"approve"`.
 */
export function useICarbonProjectsApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iCarbonProjectsABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof iCarbonProjectsABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<TMode, typeof iCarbonProjectsABI, 'approve'>({
    abi: iCarbonProjectsABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCarbonProjectsABI}__ and `functionName` set to `"isValidProjectTokenId"`.
 */
export function useICarbonProjectsIsValidProjectTokenId<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iCarbonProjectsABI, 'isValidProjectTokenId'>['abi'],
        'isValidProjectTokenId'
      > & { functionName?: 'isValidProjectTokenId' }
    : UseContractWriteConfig<TMode, typeof iCarbonProjectsABI, 'isValidProjectTokenId'> & {
        abi?: never
        functionName?: 'isValidProjectTokenId'
      } = {} as any
) {
  return useContractWrite<TMode, typeof iCarbonProjectsABI, 'isValidProjectTokenId'>({
    abi: iCarbonProjectsABI,
    functionName: 'isValidProjectTokenId',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCarbonProjectsABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useICarbonProjectsSafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iCarbonProjectsABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof iCarbonProjectsABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof iCarbonProjectsABI, 'safeTransferFrom'>({
    abi: iCarbonProjectsABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCarbonProjectsABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useICarbonProjectsSetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iCarbonProjectsABI, 'setApprovalForAll'>['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof iCarbonProjectsABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any
) {
  return useContractWrite<TMode, typeof iCarbonProjectsABI, 'setApprovalForAll'>({
    abi: iCarbonProjectsABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCarbonProjectsABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useICarbonProjectsTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iCarbonProjectsABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof iCarbonProjectsABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof iCarbonProjectsABI, 'transferFrom'>({
    abi: iCarbonProjectsABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCarbonProjectsABI}__.
 */
export function usePrepareICarbonProjectsWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof iCarbonProjectsABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: iCarbonProjectsABI, ...config } as UsePrepareContractWriteConfig<
    typeof iCarbonProjectsABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCarbonProjectsABI}__ and `functionName` set to `"addNewProject"`.
 */
export function usePrepareICarbonProjectsAddNewProject(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iCarbonProjectsABI, 'addNewProject'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iCarbonProjectsABI,
    functionName: 'addNewProject',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iCarbonProjectsABI, 'addNewProject'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCarbonProjectsABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareICarbonProjectsApprove(
  config: Omit<UsePrepareContractWriteConfig<typeof iCarbonProjectsABI, 'approve'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: iCarbonProjectsABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iCarbonProjectsABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCarbonProjectsABI}__ and `functionName` set to `"isValidProjectTokenId"`.
 */
export function usePrepareICarbonProjectsIsValidProjectTokenId(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iCarbonProjectsABI, 'isValidProjectTokenId'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iCarbonProjectsABI,
    functionName: 'isValidProjectTokenId',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iCarbonProjectsABI, 'isValidProjectTokenId'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCarbonProjectsABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareICarbonProjectsSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iCarbonProjectsABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iCarbonProjectsABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iCarbonProjectsABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCarbonProjectsABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareICarbonProjectsSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iCarbonProjectsABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iCarbonProjectsABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iCarbonProjectsABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCarbonProjectsABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareICarbonProjectsTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iCarbonProjectsABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iCarbonProjectsABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iCarbonProjectsABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iCarbonProjectsABI}__.
 */
export function useICarbonProjectsEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof iCarbonProjectsABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: iCarbonProjectsABI, ...config } as UseContractEventConfig<
    typeof iCarbonProjectsABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iCarbonProjectsABI}__ and `eventName` set to `"Approval"`.
 */
export function useICarbonProjectsApprovalEvent(
  config: Omit<UseContractEventConfig<typeof iCarbonProjectsABI, 'Approval'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: iCarbonProjectsABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof iCarbonProjectsABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iCarbonProjectsABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useICarbonProjectsApprovalForAllEvent(
  config: Omit<UseContractEventConfig<typeof iCarbonProjectsABI, 'ApprovalForAll'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: iCarbonProjectsABI, eventName: 'ApprovalForAll', ...config } as UseContractEventConfig<
    typeof iCarbonProjectsABI,
    'ApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iCarbonProjectsABI}__ and `eventName` set to `"Transfer"`.
 */
export function useICarbonProjectsTransferEvent(
  config: Omit<UseContractEventConfig<typeof iCarbonProjectsABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: iCarbonProjectsABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof iCarbonProjectsABI,
    'Transfer'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iKyklosTokenFactoryABI}__.
 */
export function useIKyklosTokenFactory(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: iKyklosTokenFactoryABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iKyklosTokenFactoryABI}__.
 */
export function useIKyklosTokenFactoryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iKyklosTokenFactoryABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof iKyklosTokenFactoryABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: iKyklosTokenFactoryABI, ...config } as UseContractReadConfig<
    typeof iKyklosTokenFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iKyklosTokenFactoryABI}__ and `functionName` set to `"getProjectVintageToErc20"`.
 */
export function useIKyklosTokenFactoryGetProjectVintageToErc20<
  TSelectData = ReadContractResult<typeof iKyklosTokenFactoryABI, 'getProjectVintageToErc20'>
>(
  config: Omit<
    UseContractReadConfig<typeof iKyklosTokenFactoryABI, 'getProjectVintageToErc20', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: iKyklosTokenFactoryABI,
    functionName: 'getProjectVintageToErc20',
    ...config,
  } as UseContractReadConfig<typeof iKyklosTokenFactoryABI, 'getProjectVintageToErc20', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iKyklosTokenFactoryABI}__.
 */
export function useIKyklosTokenFactoryWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iKyklosTokenFactoryABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iKyklosTokenFactoryABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof iKyklosTokenFactoryABI, TFunctionName>({
    abi: iKyklosTokenFactoryABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iKyklosTokenFactoryABI}__ and `functionName` set to `"createToken"`.
 */
export function useIKyklosTokenFactoryCreateToken<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iKyklosTokenFactoryABI, 'createToken'>['abi'],
        'createToken'
      > & { functionName?: 'createToken' }
    : UseContractWriteConfig<TMode, typeof iKyklosTokenFactoryABI, 'createToken'> & {
        abi?: never
        functionName?: 'createToken'
      } = {} as any
) {
  return useContractWrite<TMode, typeof iKyklosTokenFactoryABI, 'createToken'>({
    abi: iKyklosTokenFactoryABI,
    functionName: 'createToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iKyklosTokenFactoryABI}__ and `functionName` set to `"increaseTotalRetired"`.
 */
export function useIKyklosTokenFactoryIncreaseTotalRetired<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iKyklosTokenFactoryABI, 'increaseTotalRetired'>['abi'],
        'increaseTotalRetired'
      > & { functionName?: 'increaseTotalRetired' }
    : UseContractWriteConfig<TMode, typeof iKyklosTokenFactoryABI, 'increaseTotalRetired'> & {
        abi?: never
        functionName?: 'increaseTotalRetired'
      } = {} as any
) {
  return useContractWrite<TMode, typeof iKyklosTokenFactoryABI, 'increaseTotalRetired'>({
    abi: iKyklosTokenFactoryABI,
    functionName: 'increaseTotalRetired',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iKyklosTokenFactoryABI}__.
 */
export function usePrepareIKyklosTokenFactoryWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof iKyklosTokenFactoryABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: iKyklosTokenFactoryABI, ...config } as UsePrepareContractWriteConfig<
    typeof iKyklosTokenFactoryABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iKyklosTokenFactoryABI}__ and `functionName` set to `"createToken"`.
 */
export function usePrepareIKyklosTokenFactoryCreateToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iKyklosTokenFactoryABI, 'createToken'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iKyklosTokenFactoryABI,
    functionName: 'createToken',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iKyklosTokenFactoryABI, 'createToken'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iKyklosTokenFactoryABI}__ and `functionName` set to `"increaseTotalRetired"`.
 */
export function usePrepareIKyklosTokenFactoryIncreaseTotalRetired(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iKyklosTokenFactoryABI, 'increaseTotalRetired'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iKyklosTokenFactoryABI,
    functionName: 'increaseTotalRetired',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iKyklosTokenFactoryABI, 'increaseTotalRetired'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iProjectVintagesABI}__.
 */
export function useIProjectVintages(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: iProjectVintagesABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iProjectVintagesABI}__.
 */
export function useIProjectVintagesRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iProjectVintagesABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof iProjectVintagesABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: iProjectVintagesABI, ...config } as UseContractReadConfig<
    typeof iProjectVintagesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iProjectVintagesABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIProjectVintagesBalanceOf<TSelectData = ReadContractResult<typeof iProjectVintagesABI, 'balanceOf'>>(
  config: Omit<
    UseContractReadConfig<typeof iProjectVintagesABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: iProjectVintagesABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof iProjectVintagesABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iProjectVintagesABI}__ and `functionName` set to `"exists"`.
 */
export function useIProjectVintagesExists<TSelectData = ReadContractResult<typeof iProjectVintagesABI, 'exists'>>(
  config: Omit<
    UseContractReadConfig<typeof iProjectVintagesABI, 'exists', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: iProjectVintagesABI, functionName: 'exists', ...config } as UseContractReadConfig<
    typeof iProjectVintagesABI,
    'exists',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iProjectVintagesABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIProjectVintagesGetApproved<
  TSelectData = ReadContractResult<typeof iProjectVintagesABI, 'getApproved'>
>(
  config: Omit<
    UseContractReadConfig<typeof iProjectVintagesABI, 'getApproved', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: iProjectVintagesABI, functionName: 'getApproved', ...config } as UseContractReadConfig<
    typeof iProjectVintagesABI,
    'getApproved',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iProjectVintagesABI}__ and `functionName` set to `"getProjectVintageDataByTokenId"`.
 */
export function useIProjectVintagesGetProjectVintageDataByTokenId<
  TSelectData = ReadContractResult<typeof iProjectVintagesABI, 'getProjectVintageDataByTokenId'>
>(
  config: Omit<
    UseContractReadConfig<typeof iProjectVintagesABI, 'getProjectVintageDataByTokenId', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: iProjectVintagesABI,
    functionName: 'getProjectVintageDataByTokenId',
    ...config,
  } as UseContractReadConfig<typeof iProjectVintagesABI, 'getProjectVintageDataByTokenId', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iProjectVintagesABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIProjectVintagesIsApprovedForAll<
  TSelectData = ReadContractResult<typeof iProjectVintagesABI, 'isApprovedForAll'>
>(
  config: Omit<
    UseContractReadConfig<typeof iProjectVintagesABI, 'isApprovedForAll', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: iProjectVintagesABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof iProjectVintagesABI, 'isApprovedForAll', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iProjectVintagesABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIProjectVintagesOwnerOf<TSelectData = ReadContractResult<typeof iProjectVintagesABI, 'ownerOf'>>(
  config: Omit<
    UseContractReadConfig<typeof iProjectVintagesABI, 'ownerOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: iProjectVintagesABI, functionName: 'ownerOf', ...config } as UseContractReadConfig<
    typeof iProjectVintagesABI,
    'ownerOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iProjectVintagesABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIProjectVintagesSupportsInterface<
  TSelectData = ReadContractResult<typeof iProjectVintagesABI, 'supportsInterface'>
>(
  config: Omit<
    UseContractReadConfig<typeof iProjectVintagesABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: iProjectVintagesABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof iProjectVintagesABI, 'supportsInterface', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iProjectVintagesABI}__.
 */
export function useIProjectVintagesWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iProjectVintagesABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iProjectVintagesABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof iProjectVintagesABI, TFunctionName>({
    abi: iProjectVintagesABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iProjectVintagesABI}__ and `functionName` set to `"addNewVintage"`.
 */
export function useIProjectVintagesAddNewVintage<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iProjectVintagesABI, 'addNewVintage'>['abi'],
        'addNewVintage'
      > & { functionName?: 'addNewVintage' }
    : UseContractWriteConfig<TMode, typeof iProjectVintagesABI, 'addNewVintage'> & {
        abi?: never
        functionName?: 'addNewVintage'
      } = {} as any
) {
  return useContractWrite<TMode, typeof iProjectVintagesABI, 'addNewVintage'>({
    abi: iProjectVintagesABI,
    functionName: 'addNewVintage',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iProjectVintagesABI}__ and `functionName` set to `"approve"`.
 */
export function useIProjectVintagesApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iProjectVintagesABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof iProjectVintagesABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<TMode, typeof iProjectVintagesABI, 'approve'>({
    abi: iProjectVintagesABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iProjectVintagesABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIProjectVintagesSafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iProjectVintagesABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof iProjectVintagesABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof iProjectVintagesABI, 'safeTransferFrom'>({
    abi: iProjectVintagesABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iProjectVintagesABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIProjectVintagesSetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iProjectVintagesABI, 'setApprovalForAll'>['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof iProjectVintagesABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any
) {
  return useContractWrite<TMode, typeof iProjectVintagesABI, 'setApprovalForAll'>({
    abi: iProjectVintagesABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iProjectVintagesABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIProjectVintagesTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iProjectVintagesABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof iProjectVintagesABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof iProjectVintagesABI, 'transferFrom'>({
    abi: iProjectVintagesABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iProjectVintagesABI}__.
 */
export function usePrepareIProjectVintagesWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof iProjectVintagesABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: iProjectVintagesABI, ...config } as UsePrepareContractWriteConfig<
    typeof iProjectVintagesABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iProjectVintagesABI}__ and `functionName` set to `"addNewVintage"`.
 */
export function usePrepareIProjectVintagesAddNewVintage(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iProjectVintagesABI, 'addNewVintage'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iProjectVintagesABI,
    functionName: 'addNewVintage',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iProjectVintagesABI, 'addNewVintage'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iProjectVintagesABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIProjectVintagesApprove(
  config: Omit<UsePrepareContractWriteConfig<typeof iProjectVintagesABI, 'approve'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: iProjectVintagesABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iProjectVintagesABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iProjectVintagesABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIProjectVintagesSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iProjectVintagesABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iProjectVintagesABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iProjectVintagesABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iProjectVintagesABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIProjectVintagesSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iProjectVintagesABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iProjectVintagesABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iProjectVintagesABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iProjectVintagesABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIProjectVintagesTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iProjectVintagesABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iProjectVintagesABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iProjectVintagesABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iProjectVintagesABI}__.
 */
export function useIProjectVintagesEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof iProjectVintagesABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: iProjectVintagesABI, ...config } as UseContractEventConfig<
    typeof iProjectVintagesABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iProjectVintagesABI}__ and `eventName` set to `"Approval"`.
 */
export function useIProjectVintagesApprovalEvent(
  config: Omit<UseContractEventConfig<typeof iProjectVintagesABI, 'Approval'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: iProjectVintagesABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof iProjectVintagesABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iProjectVintagesABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIProjectVintagesApprovalForAllEvent(
  config: Omit<UseContractEventConfig<typeof iProjectVintagesABI, 'ApprovalForAll'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: iProjectVintagesABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof iProjectVintagesABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iProjectVintagesABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIProjectVintagesTransferEvent(
  config: Omit<UseContractEventConfig<typeof iProjectVintagesABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: iProjectVintagesABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof iProjectVintagesABI,
    'Transfer'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iRegistryABI}__.
 */
export function useIRegistry(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: iRegistryABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegistryABI}__.
 */
export function useIRegistryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iRegistryABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof iRegistryABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: iRegistryABI, ...config } as UseContractReadConfig<
    typeof iRegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegistryABI}__ and `functionName` set to `"getCarbonProjectAddress"`.
 */
export function useIRegistryGetCarbonProjectAddress<
  TSelectData = ReadContractResult<typeof iRegistryABI, 'getCarbonProjectAddress'>
>(
  config: Omit<
    UseContractReadConfig<typeof iRegistryABI, 'getCarbonProjectAddress', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: iRegistryABI,
    functionName: 'getCarbonProjectAddress',
    ...config,
  } as UseContractReadConfig<typeof iRegistryABI, 'getCarbonProjectAddress', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegistryABI}__ and `functionName` set to `"getCarbonProjectVintagesAddress"`.
 */
export function useIRegistryGetCarbonProjectVintagesAddress<
  TSelectData = ReadContractResult<typeof iRegistryABI, 'getCarbonProjectVintagesAddress'>
>(
  config: Omit<
    UseContractReadConfig<typeof iRegistryABI, 'getCarbonProjectVintagesAddress', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: iRegistryABI,
    functionName: 'getCarbonProjectVintagesAddress',
    ...config,
  } as UseContractReadConfig<typeof iRegistryABI, 'getCarbonProjectVintagesAddress', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegistryABI}__ and `functionName` set to `"getKyklosTokenAddress"`.
 */
export function useIRegistryGetKyklosTokenAddress<
  TSelectData = ReadContractResult<typeof iRegistryABI, 'getKyklosTokenAddress'>
>(
  config: Omit<
    UseContractReadConfig<typeof iRegistryABI, 'getKyklosTokenAddress', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: iRegistryABI,
    functionName: 'getKyklosTokenAddress',
    ...config,
  } as UseContractReadConfig<typeof iRegistryABI, 'getKyklosTokenAddress', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegistryABI}__ and `functionName` set to `"getKyklosTokenFactoryAddress"`.
 */
export function useIRegistryGetKyklosTokenFactoryAddress<
  TSelectData = ReadContractResult<typeof iRegistryABI, 'getKyklosTokenFactoryAddress'>
>(
  config: Omit<
    UseContractReadConfig<typeof iRegistryABI, 'getKyklosTokenFactoryAddress', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: iRegistryABI,
    functionName: 'getKyklosTokenFactoryAddress',
    ...config,
  } as UseContractReadConfig<typeof iRegistryABI, 'getKyklosTokenFactoryAddress', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegistryABI}__ and `functionName` set to `"getProjectVintageERC20Registry"`.
 */
export function useIRegistryGetProjectVintageErc20Registry<
  TSelectData = ReadContractResult<typeof iRegistryABI, 'getProjectVintageERC20Registry'>
>(
  config: Omit<
    UseContractReadConfig<typeof iRegistryABI, 'getProjectVintageERC20Registry', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: iRegistryABI,
    functionName: 'getProjectVintageERC20Registry',
    ...config,
  } as UseContractReadConfig<typeof iRegistryABI, 'getProjectVintageERC20Registry', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRegistryABI}__ and `functionName` set to `"getRetirementCertificatesAddress"`.
 */
export function useIRegistryGetRetirementCertificatesAddress<
  TSelectData = ReadContractResult<typeof iRegistryABI, 'getRetirementCertificatesAddress'>
>(
  config: Omit<
    UseContractReadConfig<typeof iRegistryABI, 'getRetirementCertificatesAddress', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: iRegistryABI,
    functionName: 'getRetirementCertificatesAddress',
    ...config,
  } as UseContractReadConfig<typeof iRegistryABI, 'getRetirementCertificatesAddress', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegistryABI}__.
 */
export function useIRegistryWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof iRegistryABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof iRegistryABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof iRegistryABI, TFunctionName>({ abi: iRegistryABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegistryABI}__ and `functionName` set to `"setCarbonProjectAddress"`.
 */
export function useIRegistrySetCarbonProjectAddress<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iRegistryABI, 'setCarbonProjectAddress'>['abi'],
        'setCarbonProjectAddress'
      > & { functionName?: 'setCarbonProjectAddress' }
    : UseContractWriteConfig<TMode, typeof iRegistryABI, 'setCarbonProjectAddress'> & {
        abi?: never
        functionName?: 'setCarbonProjectAddress'
      } = {} as any
) {
  return useContractWrite<TMode, typeof iRegistryABI, 'setCarbonProjectAddress'>({
    abi: iRegistryABI,
    functionName: 'setCarbonProjectAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegistryABI}__ and `functionName` set to `"setCarbonProjectVintagesAddress"`.
 */
export function useIRegistrySetCarbonProjectVintagesAddress<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iRegistryABI, 'setCarbonProjectVintagesAddress'>['abi'],
        'setCarbonProjectVintagesAddress'
      > & { functionName?: 'setCarbonProjectVintagesAddress' }
    : UseContractWriteConfig<TMode, typeof iRegistryABI, 'setCarbonProjectVintagesAddress'> & {
        abi?: never
        functionName?: 'setCarbonProjectVintagesAddress'
      } = {} as any
) {
  return useContractWrite<TMode, typeof iRegistryABI, 'setCarbonProjectVintagesAddress'>({
    abi: iRegistryABI,
    functionName: 'setCarbonProjectVintagesAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegistryABI}__ and `functionName` set to `"setKyklosTokenAddress"`.
 */
export function useIRegistrySetKyklosTokenAddress<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iRegistryABI, 'setKyklosTokenAddress'>['abi'],
        'setKyklosTokenAddress'
      > & { functionName?: 'setKyklosTokenAddress' }
    : UseContractWriteConfig<TMode, typeof iRegistryABI, 'setKyklosTokenAddress'> & {
        abi?: never
        functionName?: 'setKyklosTokenAddress'
      } = {} as any
) {
  return useContractWrite<TMode, typeof iRegistryABI, 'setKyklosTokenAddress'>({
    abi: iRegistryABI,
    functionName: 'setKyklosTokenAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegistryABI}__ and `functionName` set to `"setKyklosTokenFactoryAddress"`.
 */
export function useIRegistrySetKyklosTokenFactoryAddress<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iRegistryABI, 'setKyklosTokenFactoryAddress'>['abi'],
        'setKyklosTokenFactoryAddress'
      > & { functionName?: 'setKyklosTokenFactoryAddress' }
    : UseContractWriteConfig<TMode, typeof iRegistryABI, 'setKyklosTokenFactoryAddress'> & {
        abi?: never
        functionName?: 'setKyklosTokenFactoryAddress'
      } = {} as any
) {
  return useContractWrite<TMode, typeof iRegistryABI, 'setKyklosTokenFactoryAddress'>({
    abi: iRegistryABI,
    functionName: 'setKyklosTokenFactoryAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegistryABI}__ and `functionName` set to `"setProjectVintageERC20Registry"`.
 */
export function useIRegistrySetProjectVintageErc20Registry<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iRegistryABI, 'setProjectVintageERC20Registry'>['abi'],
        'setProjectVintageERC20Registry'
      > & { functionName?: 'setProjectVintageERC20Registry' }
    : UseContractWriteConfig<TMode, typeof iRegistryABI, 'setProjectVintageERC20Registry'> & {
        abi?: never
        functionName?: 'setProjectVintageERC20Registry'
      } = {} as any
) {
  return useContractWrite<TMode, typeof iRegistryABI, 'setProjectVintageERC20Registry'>({
    abi: iRegistryABI,
    functionName: 'setProjectVintageERC20Registry',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRegistryABI}__ and `functionName` set to `"setRetirementCertificatesAddress"`.
 */
export function useIRegistrySetRetirementCertificatesAddress<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iRegistryABI, 'setRetirementCertificatesAddress'>['abi'],
        'setRetirementCertificatesAddress'
      > & { functionName?: 'setRetirementCertificatesAddress' }
    : UseContractWriteConfig<TMode, typeof iRegistryABI, 'setRetirementCertificatesAddress'> & {
        abi?: never
        functionName?: 'setRetirementCertificatesAddress'
      } = {} as any
) {
  return useContractWrite<TMode, typeof iRegistryABI, 'setRetirementCertificatesAddress'>({
    abi: iRegistryABI,
    functionName: 'setRetirementCertificatesAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegistryABI}__.
 */
export function usePrepareIRegistryWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof iRegistryABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: iRegistryABI, ...config } as UsePrepareContractWriteConfig<
    typeof iRegistryABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegistryABI}__ and `functionName` set to `"setCarbonProjectAddress"`.
 */
export function usePrepareIRegistrySetCarbonProjectAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegistryABI, 'setCarbonProjectAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iRegistryABI,
    functionName: 'setCarbonProjectAddress',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegistryABI, 'setCarbonProjectAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegistryABI}__ and `functionName` set to `"setCarbonProjectVintagesAddress"`.
 */
export function usePrepareIRegistrySetCarbonProjectVintagesAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegistryABI, 'setCarbonProjectVintagesAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iRegistryABI,
    functionName: 'setCarbonProjectVintagesAddress',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegistryABI, 'setCarbonProjectVintagesAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegistryABI}__ and `functionName` set to `"setKyklosTokenAddress"`.
 */
export function usePrepareIRegistrySetKyklosTokenAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegistryABI, 'setKyklosTokenAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iRegistryABI,
    functionName: 'setKyklosTokenAddress',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegistryABI, 'setKyklosTokenAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegistryABI}__ and `functionName` set to `"setKyklosTokenFactoryAddress"`.
 */
export function usePrepareIRegistrySetKyklosTokenFactoryAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegistryABI, 'setKyklosTokenFactoryAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iRegistryABI,
    functionName: 'setKyklosTokenFactoryAddress',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegistryABI, 'setKyklosTokenFactoryAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegistryABI}__ and `functionName` set to `"setProjectVintageERC20Registry"`.
 */
export function usePrepareIRegistrySetProjectVintageErc20Registry(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegistryABI, 'setProjectVintageERC20Registry'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iRegistryABI,
    functionName: 'setProjectVintageERC20Registry',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegistryABI, 'setProjectVintageERC20Registry'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRegistryABI}__ and `functionName` set to `"setRetirementCertificatesAddress"`.
 */
export function usePrepareIRegistrySetRetirementCertificatesAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRegistryABI, 'setRetirementCertificatesAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iRegistryABI,
    functionName: 'setRetirementCertificatesAddress',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRegistryABI, 'setRetirementCertificatesAddress'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link carbonProjectABI}__.
 */
export function useCarbonProject(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: carbonProjectABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectABI}__.
 */
export function useCarbonProjectRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof carbonProjectABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof carbonProjectABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: carbonProjectABI, ...config } as UseContractReadConfig<
    typeof carbonProjectABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useCarbonProjectDefaultAdminRole<
  TSelectData = ReadContractResult<typeof carbonProjectABI, 'DEFAULT_ADMIN_ROLE'>
>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectABI, 'DEFAULT_ADMIN_ROLE', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: carbonProjectABI,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config,
  } as UseContractReadConfig<typeof carbonProjectABI, 'DEFAULT_ADMIN_ROLE', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"MANAGER_ROLE"`.
 */
export function useCarbonProjectManagerRole<TSelectData = ReadContractResult<typeof carbonProjectABI, 'MANAGER_ROLE'>>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectABI, 'MANAGER_ROLE', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: carbonProjectABI, functionName: 'MANAGER_ROLE', ...config } as UseContractReadConfig<
    typeof carbonProjectABI,
    'MANAGER_ROLE',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"MINTER_ROLE"`.
 */
export function useCarbonProjectMinterRole<TSelectData = ReadContractResult<typeof carbonProjectABI, 'MINTER_ROLE'>>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectABI, 'MINTER_ROLE', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: carbonProjectABI, functionName: 'MINTER_ROLE', ...config } as UseContractReadConfig<
    typeof carbonProjectABI,
    'MINTER_ROLE',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"PAUSER_ROLE"`.
 */
export function useCarbonProjectPauserRole<TSelectData = ReadContractResult<typeof carbonProjectABI, 'PAUSER_ROLE'>>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectABI, 'PAUSER_ROLE', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: carbonProjectABI, functionName: 'PAUSER_ROLE', ...config } as UseContractReadConfig<
    typeof carbonProjectABI,
    'PAUSER_ROLE',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useCarbonProjectBalanceOf<TSelectData = ReadContractResult<typeof carbonProjectABI, 'balanceOf'>>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: carbonProjectABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof carbonProjectABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"baseURI"`.
 */
export function useCarbonProjectBaseUri<TSelectData = ReadContractResult<typeof carbonProjectABI, 'baseURI'>>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectABI, 'baseURI', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: carbonProjectABI, functionName: 'baseURI', ...config } as UseContractReadConfig<
    typeof carbonProjectABI,
    'baseURI',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"contractRegistry"`.
 */
export function useCarbonProjectContractRegistry<
  TSelectData = ReadContractResult<typeof carbonProjectABI, 'contractRegistry'>
>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectABI, 'contractRegistry', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: carbonProjectABI,
    functionName: 'contractRegistry',
    ...config,
  } as UseContractReadConfig<typeof carbonProjectABI, 'contractRegistry', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"existProjectId"`.
 */
export function useCarbonProjectExistProjectId<
  TSelectData = ReadContractResult<typeof carbonProjectABI, 'existProjectId'>
>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectABI, 'existProjectId', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: carbonProjectABI, functionName: 'existProjectId', ...config } as UseContractReadConfig<
    typeof carbonProjectABI,
    'existProjectId',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"getApproved"`.
 */
export function useCarbonProjectGetApproved<TSelectData = ReadContractResult<typeof carbonProjectABI, 'getApproved'>>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectABI, 'getApproved', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: carbonProjectABI, functionName: 'getApproved', ...config } as UseContractReadConfig<
    typeof carbonProjectABI,
    'getApproved',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"getPidToTokenId"`.
 */
export function useCarbonProjectGetPidToTokenId<
  TSelectData = ReadContractResult<typeof carbonProjectABI, 'getPidToTokenId'>
>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectABI, 'getPidToTokenId', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: carbonProjectABI, functionName: 'getPidToTokenId', ...config } as UseContractReadConfig<
    typeof carbonProjectABI,
    'getPidToTokenId',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"getProjectDataByTokenId"`.
 */
export function useCarbonProjectGetProjectDataByTokenId<
  TSelectData = ReadContractResult<typeof carbonProjectABI, 'getProjectDataByTokenId'>
>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectABI, 'getProjectDataByTokenId', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: carbonProjectABI,
    functionName: 'getProjectDataByTokenId',
    ...config,
  } as UseContractReadConfig<typeof carbonProjectABI, 'getProjectDataByTokenId', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useCarbonProjectGetRoleAdmin<TSelectData = ReadContractResult<typeof carbonProjectABI, 'getRoleAdmin'>>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectABI, 'getRoleAdmin', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: carbonProjectABI, functionName: 'getRoleAdmin', ...config } as UseContractReadConfig<
    typeof carbonProjectABI,
    'getRoleAdmin',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"hasRole"`.
 */
export function useCarbonProjectHasRole<TSelectData = ReadContractResult<typeof carbonProjectABI, 'hasRole'>>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: carbonProjectABI, functionName: 'hasRole', ...config } as UseContractReadConfig<
    typeof carbonProjectABI,
    'hasRole',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useCarbonProjectIsApprovedForAll<
  TSelectData = ReadContractResult<typeof carbonProjectABI, 'isApprovedForAll'>
>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectABI, 'isApprovedForAll', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: carbonProjectABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof carbonProjectABI, 'isApprovedForAll', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"isValidProjectTokenId"`.
 */
export function useCarbonProjectIsValidProjectTokenId<
  TSelectData = ReadContractResult<typeof carbonProjectABI, 'isValidProjectTokenId'>
>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectABI, 'isValidProjectTokenId', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: carbonProjectABI,
    functionName: 'isValidProjectTokenId',
    ...config,
  } as UseContractReadConfig<typeof carbonProjectABI, 'isValidProjectTokenId', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"name"`.
 */
export function useCarbonProjectName<TSelectData = ReadContractResult<typeof carbonProjectABI, 'name'>>(
  config: Omit<UseContractReadConfig<typeof carbonProjectABI, 'name', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: carbonProjectABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof carbonProjectABI,
    'name',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"owner"`.
 */
export function useCarbonProjectOwner<TSelectData = ReadContractResult<typeof carbonProjectABI, 'owner'>>(
  config: Omit<UseContractReadConfig<typeof carbonProjectABI, 'owner', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: carbonProjectABI, functionName: 'owner', ...config } as UseContractReadConfig<
    typeof carbonProjectABI,
    'owner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useCarbonProjectOwnerOf<TSelectData = ReadContractResult<typeof carbonProjectABI, 'ownerOf'>>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectABI, 'ownerOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: carbonProjectABI, functionName: 'ownerOf', ...config } as UseContractReadConfig<
    typeof carbonProjectABI,
    'ownerOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"paused"`.
 */
export function useCarbonProjectPaused<TSelectData = ReadContractResult<typeof carbonProjectABI, 'paused'>>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectABI, 'paused', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: carbonProjectABI, functionName: 'paused', ...config } as UseContractReadConfig<
    typeof carbonProjectABI,
    'paused',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"pidToTokenId"`.
 */
export function useCarbonProjectPidToTokenId<TSelectData = ReadContractResult<typeof carbonProjectABI, 'pidToTokenId'>>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectABI, 'pidToTokenId', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: carbonProjectABI, functionName: 'pidToTokenId', ...config } as UseContractReadConfig<
    typeof carbonProjectABI,
    'pidToTokenId',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"projectData"`.
 */
export function useCarbonProjectProjectData<TSelectData = ReadContractResult<typeof carbonProjectABI, 'projectData'>>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectABI, 'projectData', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: carbonProjectABI, functionName: 'projectData', ...config } as UseContractReadConfig<
    typeof carbonProjectABI,
    'projectData',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"projectIds"`.
 */
export function useCarbonProjectProjectIds<TSelectData = ReadContractResult<typeof carbonProjectABI, 'projectIds'>>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectABI, 'projectIds', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: carbonProjectABI, functionName: 'projectIds', ...config } as UseContractReadConfig<
    typeof carbonProjectABI,
    'projectIds',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"projectTokenCounter"`.
 */
export function useCarbonProjectProjectTokenCounter<
  TSelectData = ReadContractResult<typeof carbonProjectABI, 'projectTokenCounter'>
>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectABI, 'projectTokenCounter', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: carbonProjectABI,
    functionName: 'projectTokenCounter',
    ...config,
  } as UseContractReadConfig<typeof carbonProjectABI, 'projectTokenCounter', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useCarbonProjectSupportsInterface<
  TSelectData = ReadContractResult<typeof carbonProjectABI, 'supportsInterface'>
>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: carbonProjectABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof carbonProjectABI, 'supportsInterface', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"symbol"`.
 */
export function useCarbonProjectSymbol<TSelectData = ReadContractResult<typeof carbonProjectABI, 'symbol'>>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: carbonProjectABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof carbonProjectABI,
    'symbol',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useCarbonProjectTokenUri<TSelectData = ReadContractResult<typeof carbonProjectABI, 'tokenURI'>>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectABI, 'tokenURI', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: carbonProjectABI, functionName: 'tokenURI', ...config } as UseContractReadConfig<
    typeof carbonProjectABI,
    'tokenURI',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useCarbonProjectTotalSupply<TSelectData = ReadContractResult<typeof carbonProjectABI, 'totalSupply'>>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: carbonProjectABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
    typeof carbonProjectABI,
    'totalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"validProjectTokenIds"`.
 */
export function useCarbonProjectValidProjectTokenIds<
  TSelectData = ReadContractResult<typeof carbonProjectABI, 'validProjectTokenIds'>
>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectABI, 'validProjectTokenIds', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: carbonProjectABI,
    functionName: 'validProjectTokenIds',
    ...config,
  } as UseContractReadConfig<typeof carbonProjectABI, 'validProjectTokenIds', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link carbonProjectABI}__.
 */
export function useCarbonProjectWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof carbonProjectABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof carbonProjectABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof carbonProjectABI, TFunctionName>({ abi: carbonProjectABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"addNewProject"`.
 */
export function useCarbonProjectAddNewProject<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof carbonProjectABI, 'addNewProject'>['abi'],
        'addNewProject'
      > & { functionName?: 'addNewProject' }
    : UseContractWriteConfig<TMode, typeof carbonProjectABI, 'addNewProject'> & {
        abi?: never
        functionName?: 'addNewProject'
      } = {} as any
) {
  return useContractWrite<TMode, typeof carbonProjectABI, 'addNewProject'>({
    abi: carbonProjectABI,
    functionName: 'addNewProject',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"approve"`.
 */
export function useCarbonProjectApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof carbonProjectABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof carbonProjectABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<TMode, typeof carbonProjectABI, 'approve'>({
    abi: carbonProjectABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"grantRole"`.
 */
export function useCarbonProjectGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof carbonProjectABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof carbonProjectABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any
) {
  return useContractWrite<TMode, typeof carbonProjectABI, 'grantRole'>({
    abi: carbonProjectABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"pause"`.
 */
export function useCarbonProjectPause<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof carbonProjectABI, 'pause'>['abi'], 'pause'> & {
        functionName?: 'pause'
      }
    : UseContractWriteConfig<TMode, typeof carbonProjectABI, 'pause'> & {
        abi?: never
        functionName?: 'pause'
      } = {} as any
) {
  return useContractWrite<TMode, typeof carbonProjectABI, 'pause'>({
    abi: carbonProjectABI,
    functionName: 'pause',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useCarbonProjectRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof carbonProjectABI, 'renounceOwnership'>['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<TMode, typeof carbonProjectABI, 'renounceOwnership'> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof carbonProjectABI, 'renounceOwnership'>({
    abi: carbonProjectABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useCarbonProjectRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof carbonProjectABI, 'renounceRole'>['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof carbonProjectABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any
) {
  return useContractWrite<TMode, typeof carbonProjectABI, 'renounceRole'>({
    abi: carbonProjectABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useCarbonProjectRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof carbonProjectABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof carbonProjectABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any
) {
  return useContractWrite<TMode, typeof carbonProjectABI, 'revokeRole'>({
    abi: carbonProjectABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"safeMint"`.
 */
export function useCarbonProjectSafeMint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof carbonProjectABI, 'safeMint'>['abi'],
        'safeMint'
      > & { functionName?: 'safeMint' }
    : UseContractWriteConfig<TMode, typeof carbonProjectABI, 'safeMint'> & {
        abi?: never
        functionName?: 'safeMint'
      } = {} as any
) {
  return useContractWrite<TMode, typeof carbonProjectABI, 'safeMint'>({
    abi: carbonProjectABI,
    functionName: 'safeMint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useCarbonProjectSafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof carbonProjectABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof carbonProjectABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof carbonProjectABI, 'safeTransferFrom'>({
    abi: carbonProjectABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useCarbonProjectSetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof carbonProjectABI, 'setApprovalForAll'>['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof carbonProjectABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any
) {
  return useContractWrite<TMode, typeof carbonProjectABI, 'setApprovalForAll'>({
    abi: carbonProjectABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"setRegistry"`.
 */
export function useCarbonProjectSetRegistry<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof carbonProjectABI, 'setRegistry'>['abi'],
        'setRegistry'
      > & { functionName?: 'setRegistry' }
    : UseContractWriteConfig<TMode, typeof carbonProjectABI, 'setRegistry'> & {
        abi?: never
        functionName?: 'setRegistry'
      } = {} as any
) {
  return useContractWrite<TMode, typeof carbonProjectABI, 'setRegistry'>({
    abi: carbonProjectABI,
    functionName: 'setRegistry',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useCarbonProjectTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof carbonProjectABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof carbonProjectABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof carbonProjectABI, 'transferFrom'>({
    abi: carbonProjectABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useCarbonProjectTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof carbonProjectABI, 'transferOwnership'>['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<TMode, typeof carbonProjectABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof carbonProjectABI, 'transferOwnership'>({
    abi: carbonProjectABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"unpause"`.
 */
export function useCarbonProjectUnpause<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof carbonProjectABI, 'unpause'>['abi'],
        'unpause'
      > & { functionName?: 'unpause' }
    : UseContractWriteConfig<TMode, typeof carbonProjectABI, 'unpause'> & {
        abi?: never
        functionName?: 'unpause'
      } = {} as any
) {
  return useContractWrite<TMode, typeof carbonProjectABI, 'unpause'>({
    abi: carbonProjectABI,
    functionName: 'unpause',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link carbonProjectABI}__.
 */
export function usePrepareCarbonProjectWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof carbonProjectABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: carbonProjectABI, ...config } as UsePrepareContractWriteConfig<
    typeof carbonProjectABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"addNewProject"`.
 */
export function usePrepareCarbonProjectAddNewProject(
  config: Omit<
    UsePrepareContractWriteConfig<typeof carbonProjectABI, 'addNewProject'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: carbonProjectABI,
    functionName: 'addNewProject',
    ...config,
  } as UsePrepareContractWriteConfig<typeof carbonProjectABI, 'addNewProject'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareCarbonProjectApprove(
  config: Omit<UsePrepareContractWriteConfig<typeof carbonProjectABI, 'approve'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: carbonProjectABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof carbonProjectABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareCarbonProjectGrantRole(
  config: Omit<UsePrepareContractWriteConfig<typeof carbonProjectABI, 'grantRole'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: carbonProjectABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof carbonProjectABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareCarbonProjectPause(
  config: Omit<UsePrepareContractWriteConfig<typeof carbonProjectABI, 'pause'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: carbonProjectABI,
    functionName: 'pause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof carbonProjectABI, 'pause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareCarbonProjectRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof carbonProjectABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: carbonProjectABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof carbonProjectABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareCarbonProjectRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof carbonProjectABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: carbonProjectABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof carbonProjectABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareCarbonProjectRevokeRole(
  config: Omit<UsePrepareContractWriteConfig<typeof carbonProjectABI, 'revokeRole'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: carbonProjectABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof carbonProjectABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"safeMint"`.
 */
export function usePrepareCarbonProjectSafeMint(
  config: Omit<UsePrepareContractWriteConfig<typeof carbonProjectABI, 'safeMint'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: carbonProjectABI,
    functionName: 'safeMint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof carbonProjectABI, 'safeMint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareCarbonProjectSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof carbonProjectABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: carbonProjectABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof carbonProjectABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareCarbonProjectSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof carbonProjectABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: carbonProjectABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof carbonProjectABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"setRegistry"`.
 */
export function usePrepareCarbonProjectSetRegistry(
  config: Omit<
    UsePrepareContractWriteConfig<typeof carbonProjectABI, 'setRegistry'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: carbonProjectABI,
    functionName: 'setRegistry',
    ...config,
  } as UsePrepareContractWriteConfig<typeof carbonProjectABI, 'setRegistry'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareCarbonProjectTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof carbonProjectABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: carbonProjectABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof carbonProjectABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareCarbonProjectTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof carbonProjectABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: carbonProjectABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof carbonProjectABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link carbonProjectABI}__ and `functionName` set to `"unpause"`.
 */
export function usePrepareCarbonProjectUnpause(
  config: Omit<UsePrepareContractWriteConfig<typeof carbonProjectABI, 'unpause'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: carbonProjectABI,
    functionName: 'unpause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof carbonProjectABI, 'unpause'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link carbonProjectABI}__.
 */
export function useCarbonProjectEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof carbonProjectABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: carbonProjectABI, ...config } as UseContractEventConfig<
    typeof carbonProjectABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link carbonProjectABI}__ and `eventName` set to `"Approval"`.
 */
export function useCarbonProjectApprovalEvent(
  config: Omit<UseContractEventConfig<typeof carbonProjectABI, 'Approval'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: carbonProjectABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof carbonProjectABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link carbonProjectABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useCarbonProjectApprovalForAllEvent(
  config: Omit<UseContractEventConfig<typeof carbonProjectABI, 'ApprovalForAll'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: carbonProjectABI, eventName: 'ApprovalForAll', ...config } as UseContractEventConfig<
    typeof carbonProjectABI,
    'ApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link carbonProjectABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useCarbonProjectOwnershipTransferredEvent(
  config: Omit<UseContractEventConfig<typeof carbonProjectABI, 'OwnershipTransferred'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: carbonProjectABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof carbonProjectABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link carbonProjectABI}__ and `eventName` set to `"Paused"`.
 */
export function useCarbonProjectPausedEvent(
  config: Omit<UseContractEventConfig<typeof carbonProjectABI, 'Paused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: carbonProjectABI, eventName: 'Paused', ...config } as UseContractEventConfig<
    typeof carbonProjectABI,
    'Paused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link carbonProjectABI}__ and `eventName` set to `"ProjectMinted"`.
 */
export function useCarbonProjectProjectMintedEvent(
  config: Omit<UseContractEventConfig<typeof carbonProjectABI, 'ProjectMinted'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: carbonProjectABI, eventName: 'ProjectMinted', ...config } as UseContractEventConfig<
    typeof carbonProjectABI,
    'ProjectMinted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link carbonProjectABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useCarbonProjectRoleAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof carbonProjectABI, 'RoleAdminChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: carbonProjectABI, eventName: 'RoleAdminChanged', ...config } as UseContractEventConfig<
    typeof carbonProjectABI,
    'RoleAdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link carbonProjectABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useCarbonProjectRoleGrantedEvent(
  config: Omit<UseContractEventConfig<typeof carbonProjectABI, 'RoleGranted'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: carbonProjectABI, eventName: 'RoleGranted', ...config } as UseContractEventConfig<
    typeof carbonProjectABI,
    'RoleGranted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link carbonProjectABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useCarbonProjectRoleRevokedEvent(
  config: Omit<UseContractEventConfig<typeof carbonProjectABI, 'RoleRevoked'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: carbonProjectABI, eventName: 'RoleRevoked', ...config } as UseContractEventConfig<
    typeof carbonProjectABI,
    'RoleRevoked'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link carbonProjectABI}__ and `eventName` set to `"Transfer"`.
 */
export function useCarbonProjectTransferEvent(
  config: Omit<UseContractEventConfig<typeof carbonProjectABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: carbonProjectABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof carbonProjectABI,
    'Transfer'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link carbonProjectABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useCarbonProjectUnpausedEvent(
  config: Omit<UseContractEventConfig<typeof carbonProjectABI, 'Unpaused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: carbonProjectABI, eventName: 'Unpaused', ...config } as UseContractEventConfig<
    typeof carbonProjectABI,
    'Unpaused'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link carbonProjectsStorageABI}__.
 */
export function useCarbonProjectsStorage(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: carbonProjectsStorageABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectsStorageABI}__.
 */
export function useCarbonProjectsStorageRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof carbonProjectsStorageABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof carbonProjectsStorageABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: carbonProjectsStorageABI, ...config } as UseContractReadConfig<
    typeof carbonProjectsStorageABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectsStorageABI}__ and `functionName` set to `"baseURI"`.
 */
export function useCarbonProjectsStorageBaseUri<
  TSelectData = ReadContractResult<typeof carbonProjectsStorageABI, 'baseURI'>
>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectsStorageABI, 'baseURI', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: carbonProjectsStorageABI, functionName: 'baseURI', ...config } as UseContractReadConfig<
    typeof carbonProjectsStorageABI,
    'baseURI',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectsStorageABI}__ and `functionName` set to `"contractRegistry"`.
 */
export function useCarbonProjectsStorageContractRegistry<
  TSelectData = ReadContractResult<typeof carbonProjectsStorageABI, 'contractRegistry'>
>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectsStorageABI, 'contractRegistry', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: carbonProjectsStorageABI,
    functionName: 'contractRegistry',
    ...config,
  } as UseContractReadConfig<typeof carbonProjectsStorageABI, 'contractRegistry', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectsStorageABI}__ and `functionName` set to `"pidToTokenId"`.
 */
export function useCarbonProjectsStoragePidToTokenId<
  TSelectData = ReadContractResult<typeof carbonProjectsStorageABI, 'pidToTokenId'>
>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectsStorageABI, 'pidToTokenId', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: carbonProjectsStorageABI,
    functionName: 'pidToTokenId',
    ...config,
  } as UseContractReadConfig<typeof carbonProjectsStorageABI, 'pidToTokenId', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectsStorageABI}__ and `functionName` set to `"projectData"`.
 */
export function useCarbonProjectsStorageProjectData<
  TSelectData = ReadContractResult<typeof carbonProjectsStorageABI, 'projectData'>
>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectsStorageABI, 'projectData', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: carbonProjectsStorageABI,
    functionName: 'projectData',
    ...config,
  } as UseContractReadConfig<typeof carbonProjectsStorageABI, 'projectData', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectsStorageABI}__ and `functionName` set to `"projectIds"`.
 */
export function useCarbonProjectsStorageProjectIds<
  TSelectData = ReadContractResult<typeof carbonProjectsStorageABI, 'projectIds'>
>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectsStorageABI, 'projectIds', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: carbonProjectsStorageABI,
    functionName: 'projectIds',
    ...config,
  } as UseContractReadConfig<typeof carbonProjectsStorageABI, 'projectIds', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectsStorageABI}__ and `functionName` set to `"projectTokenCounter"`.
 */
export function useCarbonProjectsStorageProjectTokenCounter<
  TSelectData = ReadContractResult<typeof carbonProjectsStorageABI, 'projectTokenCounter'>
>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectsStorageABI, 'projectTokenCounter', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: carbonProjectsStorageABI,
    functionName: 'projectTokenCounter',
    ...config,
  } as UseContractReadConfig<typeof carbonProjectsStorageABI, 'projectTokenCounter', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectsStorageABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useCarbonProjectsStorageTotalSupply<
  TSelectData = ReadContractResult<typeof carbonProjectsStorageABI, 'totalSupply'>
>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectsStorageABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: carbonProjectsStorageABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof carbonProjectsStorageABI, 'totalSupply', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectsStorageABI}__ and `functionName` set to `"validProjectTokenIds"`.
 */
export function useCarbonProjectsStorageValidProjectTokenIds<
  TSelectData = ReadContractResult<typeof carbonProjectsStorageABI, 'validProjectTokenIds'>
>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectsStorageABI, 'validProjectTokenIds', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: carbonProjectsStorageABI,
    functionName: 'validProjectTokenIds',
    ...config,
  } as UseContractReadConfig<typeof carbonProjectsStorageABI, 'validProjectTokenIds', TSelectData>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link carbonProjectVintagesStorageABI}__.
 */
export function useCarbonProjectVintagesStorage(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: carbonProjectVintagesStorageABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectVintagesStorageABI}__.
 */
export function useCarbonProjectVintagesStorageRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof carbonProjectVintagesStorageABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectVintagesStorageABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: carbonProjectVintagesStorageABI, ...config } as UseContractReadConfig<
    typeof carbonProjectVintagesStorageABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectVintagesStorageABI}__ and `functionName` set to `"baseURI"`.
 */
export function useCarbonProjectVintagesStorageBaseUri<
  TSelectData = ReadContractResult<typeof carbonProjectVintagesStorageABI, 'baseURI'>
>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectVintagesStorageABI, 'baseURI', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: carbonProjectVintagesStorageABI,
    functionName: 'baseURI',
    ...config,
  } as UseContractReadConfig<typeof carbonProjectVintagesStorageABI, 'baseURI', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectVintagesStorageABI}__ and `functionName` set to `"contractRegistry"`.
 */
export function useCarbonProjectVintagesStorageContractRegistry<
  TSelectData = ReadContractResult<typeof carbonProjectVintagesStorageABI, 'contractRegistry'>
>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectVintagesStorageABI, 'contractRegistry', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: carbonProjectVintagesStorageABI,
    functionName: 'contractRegistry',
    ...config,
  } as UseContractReadConfig<typeof carbonProjectVintagesStorageABI, 'contractRegistry', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectVintagesStorageABI}__ and `functionName` set to `"isRetired"`.
 */
export function useCarbonProjectVintagesStorageIsRetired<
  TSelectData = ReadContractResult<typeof carbonProjectVintagesStorageABI, 'isRetired'>
>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectVintagesStorageABI, 'isRetired', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: carbonProjectVintagesStorageABI,
    functionName: 'isRetired',
    ...config,
  } as UseContractReadConfig<typeof carbonProjectVintagesStorageABI, 'isRetired', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectVintagesStorageABI}__ and `functionName` set to `"projectVintageTokenCounter"`.
 */
export function useCarbonProjectVintagesStorageProjectVintageTokenCounter<
  TSelectData = ReadContractResult<typeof carbonProjectVintagesStorageABI, 'projectVintageTokenCounter'>
>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectVintagesStorageABI, 'projectVintageTokenCounter', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: carbonProjectVintagesStorageABI,
    functionName: 'projectVintageTokenCounter',
    ...config,
  } as UseContractReadConfig<typeof carbonProjectVintagesStorageABI, 'projectVintageTokenCounter', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectVintagesStorageABI}__ and `functionName` set to `"pvToTokenId"`.
 */
export function useCarbonProjectVintagesStoragePvToTokenId<
  TSelectData = ReadContractResult<typeof carbonProjectVintagesStorageABI, 'pvToTokenId'>
>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectVintagesStorageABI, 'pvToTokenId', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: carbonProjectVintagesStorageABI,
    functionName: 'pvToTokenId',
    ...config,
  } as UseContractReadConfig<typeof carbonProjectVintagesStorageABI, 'pvToTokenId', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectVintagesStorageABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useCarbonProjectVintagesStorageTotalSupply<
  TSelectData = ReadContractResult<typeof carbonProjectVintagesStorageABI, 'totalSupply'>
>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectVintagesStorageABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: carbonProjectVintagesStorageABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof carbonProjectVintagesStorageABI, 'totalSupply', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectVintagesStorageABI}__ and `functionName` set to `"validProjectVintageIds"`.
 */
export function useCarbonProjectVintagesStorageValidProjectVintageIds<
  TSelectData = ReadContractResult<typeof carbonProjectVintagesStorageABI, 'validProjectVintageIds'>
>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectVintagesStorageABI, 'validProjectVintageIds', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: carbonProjectVintagesStorageABI,
    functionName: 'validProjectVintageIds',
    ...config,
  } as UseContractReadConfig<typeof carbonProjectVintagesStorageABI, 'validProjectVintageIds', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link carbonProjectVintagesStorageABI}__ and `functionName` set to `"vintageData"`.
 */
export function useCarbonProjectVintagesStorageVintageData<
  TSelectData = ReadContractResult<typeof carbonProjectVintagesStorageABI, 'vintageData'>
>(
  config: Omit<
    UseContractReadConfig<typeof carbonProjectVintagesStorageABI, 'vintageData', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: carbonProjectVintagesStorageABI,
    functionName: 'vintageData',
    ...config,
  } as UseContractReadConfig<typeof carbonProjectVintagesStorageABI, 'vintageData', TSelectData>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link projectVintagesABI}__.
 */
export function useProjectVintages(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: projectVintagesABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link projectVintagesABI}__.
 */
export function useProjectVintagesRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof projectVintagesABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof projectVintagesABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: projectVintagesABI, ...config } as UseContractReadConfig<
    typeof projectVintagesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useProjectVintagesDefaultAdminRole<
  TSelectData = ReadContractResult<typeof projectVintagesABI, 'DEFAULT_ADMIN_ROLE'>
>(
  config: Omit<
    UseContractReadConfig<typeof projectVintagesABI, 'DEFAULT_ADMIN_ROLE', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: projectVintagesABI,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config,
  } as UseContractReadConfig<typeof projectVintagesABI, 'DEFAULT_ADMIN_ROLE', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"MANAGER_ROLE"`.
 */
export function useProjectVintagesManagerRole<
  TSelectData = ReadContractResult<typeof projectVintagesABI, 'MANAGER_ROLE'>
>(
  config: Omit<
    UseContractReadConfig<typeof projectVintagesABI, 'MANAGER_ROLE', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: projectVintagesABI, functionName: 'MANAGER_ROLE', ...config } as UseContractReadConfig<
    typeof projectVintagesABI,
    'MANAGER_ROLE',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"MINTER_ROLE"`.
 */
export function useProjectVintagesMinterRole<
  TSelectData = ReadContractResult<typeof projectVintagesABI, 'MINTER_ROLE'>
>(
  config: Omit<
    UseContractReadConfig<typeof projectVintagesABI, 'MINTER_ROLE', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: projectVintagesABI, functionName: 'MINTER_ROLE', ...config } as UseContractReadConfig<
    typeof projectVintagesABI,
    'MINTER_ROLE',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"PAUSER_ROLE"`.
 */
export function useProjectVintagesPauserRole<
  TSelectData = ReadContractResult<typeof projectVintagesABI, 'PAUSER_ROLE'>
>(
  config: Omit<
    UseContractReadConfig<typeof projectVintagesABI, 'PAUSER_ROLE', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: projectVintagesABI, functionName: 'PAUSER_ROLE', ...config } as UseContractReadConfig<
    typeof projectVintagesABI,
    'PAUSER_ROLE',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useProjectVintagesBalanceOf<TSelectData = ReadContractResult<typeof projectVintagesABI, 'balanceOf'>>(
  config: Omit<
    UseContractReadConfig<typeof projectVintagesABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: projectVintagesABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof projectVintagesABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"baseURI"`.
 */
export function useProjectVintagesBaseUri<TSelectData = ReadContractResult<typeof projectVintagesABI, 'baseURI'>>(
  config: Omit<
    UseContractReadConfig<typeof projectVintagesABI, 'baseURI', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: projectVintagesABI, functionName: 'baseURI', ...config } as UseContractReadConfig<
    typeof projectVintagesABI,
    'baseURI',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"contractRegistry"`.
 */
export function useProjectVintagesContractRegistry<
  TSelectData = ReadContractResult<typeof projectVintagesABI, 'contractRegistry'>
>(
  config: Omit<
    UseContractReadConfig<typeof projectVintagesABI, 'contractRegistry', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: projectVintagesABI,
    functionName: 'contractRegistry',
    ...config,
  } as UseContractReadConfig<typeof projectVintagesABI, 'contractRegistry', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"exists"`.
 */
export function useProjectVintagesExists<TSelectData = ReadContractResult<typeof projectVintagesABI, 'exists'>>(
  config: Omit<
    UseContractReadConfig<typeof projectVintagesABI, 'exists', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: projectVintagesABI, functionName: 'exists', ...config } as UseContractReadConfig<
    typeof projectVintagesABI,
    'exists',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"getApproved"`.
 */
export function useProjectVintagesGetApproved<
  TSelectData = ReadContractResult<typeof projectVintagesABI, 'getApproved'>
>(
  config: Omit<
    UseContractReadConfig<typeof projectVintagesABI, 'getApproved', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: projectVintagesABI, functionName: 'getApproved', ...config } as UseContractReadConfig<
    typeof projectVintagesABI,
    'getApproved',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"getProjectVintageDataByTokenId"`.
 */
export function useProjectVintagesGetProjectVintageDataByTokenId<
  TSelectData = ReadContractResult<typeof projectVintagesABI, 'getProjectVintageDataByTokenId'>
>(
  config: Omit<
    UseContractReadConfig<typeof projectVintagesABI, 'getProjectVintageDataByTokenId', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: projectVintagesABI,
    functionName: 'getProjectVintageDataByTokenId',
    ...config,
  } as UseContractReadConfig<typeof projectVintagesABI, 'getProjectVintageDataByTokenId', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useProjectVintagesGetRoleAdmin<
  TSelectData = ReadContractResult<typeof projectVintagesABI, 'getRoleAdmin'>
>(
  config: Omit<
    UseContractReadConfig<typeof projectVintagesABI, 'getRoleAdmin', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: projectVintagesABI, functionName: 'getRoleAdmin', ...config } as UseContractReadConfig<
    typeof projectVintagesABI,
    'getRoleAdmin',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"getVintageData"`.
 */
export function useProjectVintagesGetVintageData<
  TSelectData = ReadContractResult<typeof projectVintagesABI, 'getVintageData'>
>(
  config: Omit<
    UseContractReadConfig<typeof projectVintagesABI, 'getVintageData', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: projectVintagesABI,
    functionName: 'getVintageData',
    ...config,
  } as UseContractReadConfig<typeof projectVintagesABI, 'getVintageData', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"hasRole"`.
 */
export function useProjectVintagesHasRole<TSelectData = ReadContractResult<typeof projectVintagesABI, 'hasRole'>>(
  config: Omit<
    UseContractReadConfig<typeof projectVintagesABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: projectVintagesABI, functionName: 'hasRole', ...config } as UseContractReadConfig<
    typeof projectVintagesABI,
    'hasRole',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useProjectVintagesIsApprovedForAll<
  TSelectData = ReadContractResult<typeof projectVintagesABI, 'isApprovedForAll'>
>(
  config: Omit<
    UseContractReadConfig<typeof projectVintagesABI, 'isApprovedForAll', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: projectVintagesABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof projectVintagesABI, 'isApprovedForAll', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"isRetired"`.
 */
export function useProjectVintagesIsRetired<TSelectData = ReadContractResult<typeof projectVintagesABI, 'isRetired'>>(
  config: Omit<
    UseContractReadConfig<typeof projectVintagesABI, 'isRetired', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: projectVintagesABI, functionName: 'isRetired', ...config } as UseContractReadConfig<
    typeof projectVintagesABI,
    'isRetired',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"name"`.
 */
export function useProjectVintagesName<TSelectData = ReadContractResult<typeof projectVintagesABI, 'name'>>(
  config: Omit<
    UseContractReadConfig<typeof projectVintagesABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: projectVintagesABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof projectVintagesABI,
    'name',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"owner"`.
 */
export function useProjectVintagesOwner<TSelectData = ReadContractResult<typeof projectVintagesABI, 'owner'>>(
  config: Omit<
    UseContractReadConfig<typeof projectVintagesABI, 'owner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: projectVintagesABI, functionName: 'owner', ...config } as UseContractReadConfig<
    typeof projectVintagesABI,
    'owner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useProjectVintagesOwnerOf<TSelectData = ReadContractResult<typeof projectVintagesABI, 'ownerOf'>>(
  config: Omit<
    UseContractReadConfig<typeof projectVintagesABI, 'ownerOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: projectVintagesABI, functionName: 'ownerOf', ...config } as UseContractReadConfig<
    typeof projectVintagesABI,
    'ownerOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"paused"`.
 */
export function useProjectVintagesPaused<TSelectData = ReadContractResult<typeof projectVintagesABI, 'paused'>>(
  config: Omit<
    UseContractReadConfig<typeof projectVintagesABI, 'paused', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: projectVintagesABI, functionName: 'paused', ...config } as UseContractReadConfig<
    typeof projectVintagesABI,
    'paused',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"projectVintageTokenCounter"`.
 */
export function useProjectVintagesProjectVintageTokenCounter<
  TSelectData = ReadContractResult<typeof projectVintagesABI, 'projectVintageTokenCounter'>
>(
  config: Omit<
    UseContractReadConfig<typeof projectVintagesABI, 'projectVintageTokenCounter', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: projectVintagesABI,
    functionName: 'projectVintageTokenCounter',
    ...config,
  } as UseContractReadConfig<typeof projectVintagesABI, 'projectVintageTokenCounter', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"pvToTokenId"`.
 */
export function useProjectVintagesPvToTokenId<
  TSelectData = ReadContractResult<typeof projectVintagesABI, 'pvToTokenId'>
>(
  config: Omit<
    UseContractReadConfig<typeof projectVintagesABI, 'pvToTokenId', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: projectVintagesABI, functionName: 'pvToTokenId', ...config } as UseContractReadConfig<
    typeof projectVintagesABI,
    'pvToTokenId',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useProjectVintagesSupportsInterface<
  TSelectData = ReadContractResult<typeof projectVintagesABI, 'supportsInterface'>
>(
  config: Omit<
    UseContractReadConfig<typeof projectVintagesABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: projectVintagesABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof projectVintagesABI, 'supportsInterface', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"symbol"`.
 */
export function useProjectVintagesSymbol<TSelectData = ReadContractResult<typeof projectVintagesABI, 'symbol'>>(
  config: Omit<
    UseContractReadConfig<typeof projectVintagesABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: projectVintagesABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof projectVintagesABI,
    'symbol',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useProjectVintagesTokenUri<TSelectData = ReadContractResult<typeof projectVintagesABI, 'tokenURI'>>(
  config: Omit<
    UseContractReadConfig<typeof projectVintagesABI, 'tokenURI', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: projectVintagesABI, functionName: 'tokenURI', ...config } as UseContractReadConfig<
    typeof projectVintagesABI,
    'tokenURI',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useProjectVintagesTotalSupply<
  TSelectData = ReadContractResult<typeof projectVintagesABI, 'totalSupply'>
>(
  config: Omit<
    UseContractReadConfig<typeof projectVintagesABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: projectVintagesABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
    typeof projectVintagesABI,
    'totalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"validProjectVintageIds"`.
 */
export function useProjectVintagesValidProjectVintageIds<
  TSelectData = ReadContractResult<typeof projectVintagesABI, 'validProjectVintageIds'>
>(
  config: Omit<
    UseContractReadConfig<typeof projectVintagesABI, 'validProjectVintageIds', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: projectVintagesABI,
    functionName: 'validProjectVintageIds',
    ...config,
  } as UseContractReadConfig<typeof projectVintagesABI, 'validProjectVintageIds', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"vintageData"`.
 */
export function useProjectVintagesVintageData<
  TSelectData = ReadContractResult<typeof projectVintagesABI, 'vintageData'>
>(
  config: Omit<
    UseContractReadConfig<typeof projectVintagesABI, 'vintageData', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: projectVintagesABI, functionName: 'vintageData', ...config } as UseContractReadConfig<
    typeof projectVintagesABI,
    'vintageData',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link projectVintagesABI}__.
 */
export function useProjectVintagesWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof projectVintagesABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof projectVintagesABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof projectVintagesABI, TFunctionName>({
    abi: projectVintagesABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"addNewVintage"`.
 */
export function useProjectVintagesAddNewVintage<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof projectVintagesABI, 'addNewVintage'>['abi'],
        'addNewVintage'
      > & { functionName?: 'addNewVintage' }
    : UseContractWriteConfig<TMode, typeof projectVintagesABI, 'addNewVintage'> & {
        abi?: never
        functionName?: 'addNewVintage'
      } = {} as any
) {
  return useContractWrite<TMode, typeof projectVintagesABI, 'addNewVintage'>({
    abi: projectVintagesABI,
    functionName: 'addNewVintage',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"approve"`.
 */
export function useProjectVintagesApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof projectVintagesABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof projectVintagesABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<TMode, typeof projectVintagesABI, 'approve'>({
    abi: projectVintagesABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"fractionalize"`.
 */
export function useProjectVintagesFractionalize<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof projectVintagesABI, 'fractionalize'>['abi'],
        'fractionalize'
      > & { functionName?: 'fractionalize' }
    : UseContractWriteConfig<TMode, typeof projectVintagesABI, 'fractionalize'> & {
        abi?: never
        functionName?: 'fractionalize'
      } = {} as any
) {
  return useContractWrite<TMode, typeof projectVintagesABI, 'fractionalize'>({
    abi: projectVintagesABI,
    functionName: 'fractionalize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"grantRole"`.
 */
export function useProjectVintagesGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof projectVintagesABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof projectVintagesABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any
) {
  return useContractWrite<TMode, typeof projectVintagesABI, 'grantRole'>({
    abi: projectVintagesABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"pause"`.
 */
export function useProjectVintagesPause<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof projectVintagesABI, 'pause'>['abi'], 'pause'> & {
        functionName?: 'pause'
      }
    : UseContractWriteConfig<TMode, typeof projectVintagesABI, 'pause'> & {
        abi?: never
        functionName?: 'pause'
      } = {} as any
) {
  return useContractWrite<TMode, typeof projectVintagesABI, 'pause'>({
    abi: projectVintagesABI,
    functionName: 'pause',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useProjectVintagesRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof projectVintagesABI, 'renounceOwnership'>['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<TMode, typeof projectVintagesABI, 'renounceOwnership'> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof projectVintagesABI, 'renounceOwnership'>({
    abi: projectVintagesABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useProjectVintagesRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof projectVintagesABI, 'renounceRole'>['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof projectVintagesABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any
) {
  return useContractWrite<TMode, typeof projectVintagesABI, 'renounceRole'>({
    abi: projectVintagesABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useProjectVintagesRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof projectVintagesABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof projectVintagesABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any
) {
  return useContractWrite<TMode, typeof projectVintagesABI, 'revokeRole'>({
    abi: projectVintagesABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"safeMint"`.
 */
export function useProjectVintagesSafeMint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof projectVintagesABI, 'safeMint'>['abi'],
        'safeMint'
      > & { functionName?: 'safeMint' }
    : UseContractWriteConfig<TMode, typeof projectVintagesABI, 'safeMint'> & {
        abi?: never
        functionName?: 'safeMint'
      } = {} as any
) {
  return useContractWrite<TMode, typeof projectVintagesABI, 'safeMint'>({
    abi: projectVintagesABI,
    functionName: 'safeMint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useProjectVintagesSafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof projectVintagesABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof projectVintagesABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof projectVintagesABI, 'safeTransferFrom'>({
    abi: projectVintagesABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useProjectVintagesSetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof projectVintagesABI, 'setApprovalForAll'>['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof projectVintagesABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any
) {
  return useContractWrite<TMode, typeof projectVintagesABI, 'setApprovalForAll'>({
    abi: projectVintagesABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"setRegistry"`.
 */
export function useProjectVintagesSetRegistry<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof projectVintagesABI, 'setRegistry'>['abi'],
        'setRegistry'
      > & { functionName?: 'setRegistry' }
    : UseContractWriteConfig<TMode, typeof projectVintagesABI, 'setRegistry'> & {
        abi?: never
        functionName?: 'setRegistry'
      } = {} as any
) {
  return useContractWrite<TMode, typeof projectVintagesABI, 'setRegistry'>({
    abi: projectVintagesABI,
    functionName: 'setRegistry',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"setRetirementStatus"`.
 */
export function useProjectVintagesSetRetirementStatus<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof projectVintagesABI, 'setRetirementStatus'>['abi'],
        'setRetirementStatus'
      > & { functionName?: 'setRetirementStatus' }
    : UseContractWriteConfig<TMode, typeof projectVintagesABI, 'setRetirementStatus'> & {
        abi?: never
        functionName?: 'setRetirementStatus'
      } = {} as any
) {
  return useContractWrite<TMode, typeof projectVintagesABI, 'setRetirementStatus'>({
    abi: projectVintagesABI,
    functionName: 'setRetirementStatus',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useProjectVintagesTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof projectVintagesABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof projectVintagesABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof projectVintagesABI, 'transferFrom'>({
    abi: projectVintagesABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useProjectVintagesTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof projectVintagesABI, 'transferOwnership'>['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<TMode, typeof projectVintagesABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof projectVintagesABI, 'transferOwnership'>({
    abi: projectVintagesABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"unpause"`.
 */
export function useProjectVintagesUnpause<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof projectVintagesABI, 'unpause'>['abi'],
        'unpause'
      > & { functionName?: 'unpause' }
    : UseContractWriteConfig<TMode, typeof projectVintagesABI, 'unpause'> & {
        abi?: never
        functionName?: 'unpause'
      } = {} as any
) {
  return useContractWrite<TMode, typeof projectVintagesABI, 'unpause'>({
    abi: projectVintagesABI,
    functionName: 'unpause',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link projectVintagesABI}__.
 */
export function usePrepareProjectVintagesWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof projectVintagesABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: projectVintagesABI, ...config } as UsePrepareContractWriteConfig<
    typeof projectVintagesABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"addNewVintage"`.
 */
export function usePrepareProjectVintagesAddNewVintage(
  config: Omit<
    UsePrepareContractWriteConfig<typeof projectVintagesABI, 'addNewVintage'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: projectVintagesABI,
    functionName: 'addNewVintage',
    ...config,
  } as UsePrepareContractWriteConfig<typeof projectVintagesABI, 'addNewVintage'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareProjectVintagesApprove(
  config: Omit<UsePrepareContractWriteConfig<typeof projectVintagesABI, 'approve'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: projectVintagesABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof projectVintagesABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"fractionalize"`.
 */
export function usePrepareProjectVintagesFractionalize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof projectVintagesABI, 'fractionalize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: projectVintagesABI,
    functionName: 'fractionalize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof projectVintagesABI, 'fractionalize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareProjectVintagesGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof projectVintagesABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: projectVintagesABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof projectVintagesABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareProjectVintagesPause(
  config: Omit<UsePrepareContractWriteConfig<typeof projectVintagesABI, 'pause'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: projectVintagesABI,
    functionName: 'pause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof projectVintagesABI, 'pause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareProjectVintagesRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof projectVintagesABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: projectVintagesABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof projectVintagesABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareProjectVintagesRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof projectVintagesABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: projectVintagesABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof projectVintagesABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareProjectVintagesRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof projectVintagesABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: projectVintagesABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof projectVintagesABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"safeMint"`.
 */
export function usePrepareProjectVintagesSafeMint(
  config: Omit<UsePrepareContractWriteConfig<typeof projectVintagesABI, 'safeMint'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: projectVintagesABI,
    functionName: 'safeMint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof projectVintagesABI, 'safeMint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareProjectVintagesSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof projectVintagesABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: projectVintagesABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof projectVintagesABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareProjectVintagesSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof projectVintagesABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: projectVintagesABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof projectVintagesABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"setRegistry"`.
 */
export function usePrepareProjectVintagesSetRegistry(
  config: Omit<
    UsePrepareContractWriteConfig<typeof projectVintagesABI, 'setRegistry'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: projectVintagesABI,
    functionName: 'setRegistry',
    ...config,
  } as UsePrepareContractWriteConfig<typeof projectVintagesABI, 'setRegistry'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"setRetirementStatus"`.
 */
export function usePrepareProjectVintagesSetRetirementStatus(
  config: Omit<
    UsePrepareContractWriteConfig<typeof projectVintagesABI, 'setRetirementStatus'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: projectVintagesABI,
    functionName: 'setRetirementStatus',
    ...config,
  } as UsePrepareContractWriteConfig<typeof projectVintagesABI, 'setRetirementStatus'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareProjectVintagesTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof projectVintagesABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: projectVintagesABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof projectVintagesABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareProjectVintagesTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof projectVintagesABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: projectVintagesABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof projectVintagesABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link projectVintagesABI}__ and `functionName` set to `"unpause"`.
 */
export function usePrepareProjectVintagesUnpause(
  config: Omit<UsePrepareContractWriteConfig<typeof projectVintagesABI, 'unpause'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: projectVintagesABI,
    functionName: 'unpause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof projectVintagesABI, 'unpause'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link projectVintagesABI}__.
 */
export function useProjectVintagesEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof projectVintagesABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: projectVintagesABI, ...config } as UseContractEventConfig<
    typeof projectVintagesABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link projectVintagesABI}__ and `eventName` set to `"Approval"`.
 */
export function useProjectVintagesApprovalEvent(
  config: Omit<UseContractEventConfig<typeof projectVintagesABI, 'Approval'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: projectVintagesABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof projectVintagesABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link projectVintagesABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useProjectVintagesApprovalForAllEvent(
  config: Omit<UseContractEventConfig<typeof projectVintagesABI, 'ApprovalForAll'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: projectVintagesABI, eventName: 'ApprovalForAll', ...config } as UseContractEventConfig<
    typeof projectVintagesABI,
    'ApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link projectVintagesABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useProjectVintagesOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof projectVintagesABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: projectVintagesABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof projectVintagesABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link projectVintagesABI}__ and `eventName` set to `"Paused"`.
 */
export function useProjectVintagesPausedEvent(
  config: Omit<UseContractEventConfig<typeof projectVintagesABI, 'Paused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: projectVintagesABI, eventName: 'Paused', ...config } as UseContractEventConfig<
    typeof projectVintagesABI,
    'Paused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link projectVintagesABI}__ and `eventName` set to `"ProjectVintageMinted"`.
 */
export function useProjectVintagesProjectVintageMintedEvent(
  config: Omit<
    UseContractEventConfig<typeof projectVintagesABI, 'ProjectVintageMinted'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: projectVintagesABI,
    eventName: 'ProjectVintageMinted',
    ...config,
  } as UseContractEventConfig<typeof projectVintagesABI, 'ProjectVintageMinted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link projectVintagesABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useProjectVintagesRoleAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof projectVintagesABI, 'RoleAdminChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: projectVintagesABI,
    eventName: 'RoleAdminChanged',
    ...config,
  } as UseContractEventConfig<typeof projectVintagesABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link projectVintagesABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useProjectVintagesRoleGrantedEvent(
  config: Omit<UseContractEventConfig<typeof projectVintagesABI, 'RoleGranted'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: projectVintagesABI, eventName: 'RoleGranted', ...config } as UseContractEventConfig<
    typeof projectVintagesABI,
    'RoleGranted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link projectVintagesABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useProjectVintagesRoleRevokedEvent(
  config: Omit<UseContractEventConfig<typeof projectVintagesABI, 'RoleRevoked'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: projectVintagesABI, eventName: 'RoleRevoked', ...config } as UseContractEventConfig<
    typeof projectVintagesABI,
    'RoleRevoked'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link projectVintagesABI}__ and `eventName` set to `"Transfer"`.
 */
export function useProjectVintagesTransferEvent(
  config: Omit<UseContractEventConfig<typeof projectVintagesABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: projectVintagesABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof projectVintagesABI,
    'Transfer'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link projectVintagesABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useProjectVintagesUnpausedEvent(
  config: Omit<UseContractEventConfig<typeof projectVintagesABI, 'Unpaused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: projectVintagesABI, eventName: 'Unpaused', ...config } as UseContractEventConfig<
    typeof projectVintagesABI,
    'Unpaused'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link registryABI}__.
 */
export function useRegistry(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: registryABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__.
 */
export function useRegistryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof registryABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: registryABI, ...config } as UseContractReadConfig<
    typeof registryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"getCarbonProjectAddress"`.
 */
export function useRegistryGetCarbonProjectAddress<
  TSelectData = ReadContractResult<typeof registryABI, 'getCarbonProjectAddress'>
>(
  config: Omit<
    UseContractReadConfig<typeof registryABI, 'getCarbonProjectAddress', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: registryABI,
    functionName: 'getCarbonProjectAddress',
    ...config,
  } as UseContractReadConfig<typeof registryABI, 'getCarbonProjectAddress', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"getCarbonProjectVintagesAddress"`.
 */
export function useRegistryGetCarbonProjectVintagesAddress<
  TSelectData = ReadContractResult<typeof registryABI, 'getCarbonProjectVintagesAddress'>
>(
  config: Omit<
    UseContractReadConfig<typeof registryABI, 'getCarbonProjectVintagesAddress', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: registryABI,
    functionName: 'getCarbonProjectVintagesAddress',
    ...config,
  } as UseContractReadConfig<typeof registryABI, 'getCarbonProjectVintagesAddress', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"getKyklosTokenAddress"`.
 */
export function useRegistryGetKyklosTokenAddress<
  TSelectData = ReadContractResult<typeof registryABI, 'getKyklosTokenAddress'>
>(
  config: Omit<
    UseContractReadConfig<typeof registryABI, 'getKyklosTokenAddress', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: registryABI,
    functionName: 'getKyklosTokenAddress',
    ...config,
  } as UseContractReadConfig<typeof registryABI, 'getKyklosTokenAddress', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"getKyklosTokenFactoryAddress"`.
 */
export function useRegistryGetKyklosTokenFactoryAddress<
  TSelectData = ReadContractResult<typeof registryABI, 'getKyklosTokenFactoryAddress'>
>(
  config: Omit<
    UseContractReadConfig<typeof registryABI, 'getKyklosTokenFactoryAddress', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: registryABI,
    functionName: 'getKyklosTokenFactoryAddress',
    ...config,
  } as UseContractReadConfig<typeof registryABI, 'getKyklosTokenFactoryAddress', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"getProjectVintageERC20Registry"`.
 */
export function useRegistryGetProjectVintageErc20Registry<
  TSelectData = ReadContractResult<typeof registryABI, 'getProjectVintageERC20Registry'>
>(
  config: Omit<
    UseContractReadConfig<typeof registryABI, 'getProjectVintageERC20Registry', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: registryABI,
    functionName: 'getProjectVintageERC20Registry',
    ...config,
  } as UseContractReadConfig<typeof registryABI, 'getProjectVintageERC20Registry', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"getRetirementCertificatesAddress"`.
 */
export function useRegistryGetRetirementCertificatesAddress<
  TSelectData = ReadContractResult<typeof registryABI, 'getRetirementCertificatesAddress'>
>(
  config: Omit<
    UseContractReadConfig<typeof registryABI, 'getRetirementCertificatesAddress', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: registryABI,
    functionName: 'getRetirementCertificatesAddress',
    ...config,
  } as UseContractReadConfig<typeof registryABI, 'getRetirementCertificatesAddress', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"projectVintageERC20Registry"`.
 */
export function useRegistryProjectVintageErc20Registry<
  TSelectData = ReadContractResult<typeof registryABI, 'projectVintageERC20Registry'>
>(
  config: Omit<
    UseContractReadConfig<typeof registryABI, 'projectVintageERC20Registry', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: registryABI,
    functionName: 'projectVintageERC20Registry',
    ...config,
  } as UseContractReadConfig<typeof registryABI, 'projectVintageERC20Registry', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__.
 */
export function useRegistryWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof registryABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof registryABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof registryABI, TFunctionName>({ abi: registryABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"setCarbonProjectAddress"`.
 */
export function useRegistrySetCarbonProjectAddress<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof registryABI, 'setCarbonProjectAddress'>['abi'],
        'setCarbonProjectAddress'
      > & { functionName?: 'setCarbonProjectAddress' }
    : UseContractWriteConfig<TMode, typeof registryABI, 'setCarbonProjectAddress'> & {
        abi?: never
        functionName?: 'setCarbonProjectAddress'
      } = {} as any
) {
  return useContractWrite<TMode, typeof registryABI, 'setCarbonProjectAddress'>({
    abi: registryABI,
    functionName: 'setCarbonProjectAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"setCarbonProjectVintagesAddress"`.
 */
export function useRegistrySetCarbonProjectVintagesAddress<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof registryABI, 'setCarbonProjectVintagesAddress'>['abi'],
        'setCarbonProjectVintagesAddress'
      > & { functionName?: 'setCarbonProjectVintagesAddress' }
    : UseContractWriteConfig<TMode, typeof registryABI, 'setCarbonProjectVintagesAddress'> & {
        abi?: never
        functionName?: 'setCarbonProjectVintagesAddress'
      } = {} as any
) {
  return useContractWrite<TMode, typeof registryABI, 'setCarbonProjectVintagesAddress'>({
    abi: registryABI,
    functionName: 'setCarbonProjectVintagesAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"setKyklosTokenAddress"`.
 */
export function useRegistrySetKyklosTokenAddress<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof registryABI, 'setKyklosTokenAddress'>['abi'],
        'setKyklosTokenAddress'
      > & { functionName?: 'setKyklosTokenAddress' }
    : UseContractWriteConfig<TMode, typeof registryABI, 'setKyklosTokenAddress'> & {
        abi?: never
        functionName?: 'setKyklosTokenAddress'
      } = {} as any
) {
  return useContractWrite<TMode, typeof registryABI, 'setKyklosTokenAddress'>({
    abi: registryABI,
    functionName: 'setKyklosTokenAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"setKyklosTokenFactoryAddress"`.
 */
export function useRegistrySetKyklosTokenFactoryAddress<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof registryABI, 'setKyklosTokenFactoryAddress'>['abi'],
        'setKyklosTokenFactoryAddress'
      > & { functionName?: 'setKyklosTokenFactoryAddress' }
    : UseContractWriteConfig<TMode, typeof registryABI, 'setKyklosTokenFactoryAddress'> & {
        abi?: never
        functionName?: 'setKyklosTokenFactoryAddress'
      } = {} as any
) {
  return useContractWrite<TMode, typeof registryABI, 'setKyklosTokenFactoryAddress'>({
    abi: registryABI,
    functionName: 'setKyklosTokenFactoryAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"setProjectVintageERC20Registry"`.
 */
export function useRegistrySetProjectVintageErc20Registry<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof registryABI, 'setProjectVintageERC20Registry'>['abi'],
        'setProjectVintageERC20Registry'
      > & { functionName?: 'setProjectVintageERC20Registry' }
    : UseContractWriteConfig<TMode, typeof registryABI, 'setProjectVintageERC20Registry'> & {
        abi?: never
        functionName?: 'setProjectVintageERC20Registry'
      } = {} as any
) {
  return useContractWrite<TMode, typeof registryABI, 'setProjectVintageERC20Registry'>({
    abi: registryABI,
    functionName: 'setProjectVintageERC20Registry',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"setRetirementCertificatesAddress"`.
 */
export function useRegistrySetRetirementCertificatesAddress<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof registryABI, 'setRetirementCertificatesAddress'>['abi'],
        'setRetirementCertificatesAddress'
      > & { functionName?: 'setRetirementCertificatesAddress' }
    : UseContractWriteConfig<TMode, typeof registryABI, 'setRetirementCertificatesAddress'> & {
        abi?: never
        functionName?: 'setRetirementCertificatesAddress'
      } = {} as any
) {
  return useContractWrite<TMode, typeof registryABI, 'setRetirementCertificatesAddress'>({
    abi: registryABI,
    functionName: 'setRetirementCertificatesAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__.
 */
export function usePrepareRegistryWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof registryABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: registryABI, ...config } as UsePrepareContractWriteConfig<
    typeof registryABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"setCarbonProjectAddress"`.
 */
export function usePrepareRegistrySetCarbonProjectAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryABI, 'setCarbonProjectAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: registryABI,
    functionName: 'setCarbonProjectAddress',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registryABI, 'setCarbonProjectAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"setCarbonProjectVintagesAddress"`.
 */
export function usePrepareRegistrySetCarbonProjectVintagesAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryABI, 'setCarbonProjectVintagesAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: registryABI,
    functionName: 'setCarbonProjectVintagesAddress',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registryABI, 'setCarbonProjectVintagesAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"setKyklosTokenAddress"`.
 */
export function usePrepareRegistrySetKyklosTokenAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryABI, 'setKyklosTokenAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: registryABI,
    functionName: 'setKyklosTokenAddress',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registryABI, 'setKyklosTokenAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"setKyklosTokenFactoryAddress"`.
 */
export function usePrepareRegistrySetKyklosTokenFactoryAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryABI, 'setKyklosTokenFactoryAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: registryABI,
    functionName: 'setKyklosTokenFactoryAddress',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registryABI, 'setKyklosTokenFactoryAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"setProjectVintageERC20Registry"`.
 */
export function usePrepareRegistrySetProjectVintageErc20Registry(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryABI, 'setProjectVintageERC20Registry'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: registryABI,
    functionName: 'setProjectVintageERC20Registry',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registryABI, 'setProjectVintageERC20Registry'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"setRetirementCertificatesAddress"`.
 */
export function usePrepareRegistrySetRetirementCertificatesAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryABI, 'setRetirementCertificatesAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: registryABI,
    functionName: 'setRetirementCertificatesAddress',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registryABI, 'setRetirementCertificatesAddress'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link kyklosTokenABI}__.
 */
export function useKyklosToken(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: kyklosTokenABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link kyklosTokenABI}__.
 */
export function useKyklosTokenRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof kyklosTokenABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof kyklosTokenABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: kyklosTokenABI, ...config } as UseContractReadConfig<
    typeof kyklosTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link kyklosTokenABI}__ and `functionName` set to `"allowance"`.
 */
export function useKyklosTokenAllowance<TSelectData = ReadContractResult<typeof kyklosTokenABI, 'allowance'>>(
  config: Omit<
    UseContractReadConfig<typeof kyklosTokenABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: kyklosTokenABI, functionName: 'allowance', ...config } as UseContractReadConfig<
    typeof kyklosTokenABI,
    'allowance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link kyklosTokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useKyklosTokenBalanceOf<TSelectData = ReadContractResult<typeof kyklosTokenABI, 'balanceOf'>>(
  config: Omit<
    UseContractReadConfig<typeof kyklosTokenABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: kyklosTokenABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof kyklosTokenABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link kyklosTokenABI}__ and `functionName` set to `"contractRegistry"`.
 */
export function useKyklosTokenContractRegistry<
  TSelectData = ReadContractResult<typeof kyklosTokenABI, 'contractRegistry'>
>(
  config: Omit<
    UseContractReadConfig<typeof kyklosTokenABI, 'contractRegistry', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: kyklosTokenABI, functionName: 'contractRegistry', ...config } as UseContractReadConfig<
    typeof kyklosTokenABI,
    'contractRegistry',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link kyklosTokenABI}__ and `functionName` set to `"decimals"`.
 */
export function useKyklosTokenDecimals<TSelectData = ReadContractResult<typeof kyklosTokenABI, 'decimals'>>(
  config: Omit<
    UseContractReadConfig<typeof kyklosTokenABI, 'decimals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: kyklosTokenABI, functionName: 'decimals', ...config } as UseContractReadConfig<
    typeof kyklosTokenABI,
    'decimals',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link kyklosTokenABI}__ and `functionName` set to `"minterToId"`.
 */
export function useKyklosTokenMinterToId<TSelectData = ReadContractResult<typeof kyklosTokenABI, 'minterToId'>>(
  config: Omit<
    UseContractReadConfig<typeof kyklosTokenABI, 'minterToId', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: kyklosTokenABI, functionName: 'minterToId', ...config } as UseContractReadConfig<
    typeof kyklosTokenABI,
    'minterToId',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link kyklosTokenABI}__ and `functionName` set to `"name"`.
 */
export function useKyklosTokenName<TSelectData = ReadContractResult<typeof kyklosTokenABI, 'name'>>(
  config: Omit<UseContractReadConfig<typeof kyklosTokenABI, 'name', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: kyklosTokenABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof kyklosTokenABI,
    'name',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link kyklosTokenABI}__ and `functionName` set to `"projectVintageTokenId"`.
 */
export function useKyklosTokenProjectVintageTokenId<
  TSelectData = ReadContractResult<typeof kyklosTokenABI, 'projectVintageTokenId'>
>(
  config: Omit<
    UseContractReadConfig<typeof kyklosTokenABI, 'projectVintageTokenId', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: kyklosTokenABI,
    functionName: 'projectVintageTokenId',
    ...config,
  } as UseContractReadConfig<typeof kyklosTokenABI, 'projectVintageTokenId', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link kyklosTokenABI}__ and `functionName` set to `"symbol"`.
 */
export function useKyklosTokenSymbol<TSelectData = ReadContractResult<typeof kyklosTokenABI, 'symbol'>>(
  config: Omit<UseContractReadConfig<typeof kyklosTokenABI, 'symbol', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: kyklosTokenABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof kyklosTokenABI,
    'symbol',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link kyklosTokenABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useKyklosTokenTotalSupply<TSelectData = ReadContractResult<typeof kyklosTokenABI, 'totalSupply'>>(
  config: Omit<
    UseContractReadConfig<typeof kyklosTokenABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: kyklosTokenABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
    typeof kyklosTokenABI,
    'totalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link kyklosTokenABI}__.
 */
export function useKyklosTokenWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof kyklosTokenABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof kyklosTokenABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof kyklosTokenABI, TFunctionName>({ abi: kyklosTokenABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link kyklosTokenABI}__ and `functionName` set to `"approve"`.
 */
export function useKyklosTokenApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof kyklosTokenABI, 'approve'>['abi'], 'approve'> & {
        functionName?: 'approve'
      }
    : UseContractWriteConfig<TMode, typeof kyklosTokenABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<TMode, typeof kyklosTokenABI, 'approve'>({
    abi: kyklosTokenABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link kyklosTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useKyklosTokenDecreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof kyklosTokenABI, 'decreaseAllowance'>['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<TMode, typeof kyklosTokenABI, 'decreaseAllowance'> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any
) {
  return useContractWrite<TMode, typeof kyklosTokenABI, 'decreaseAllowance'>({
    abi: kyklosTokenABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link kyklosTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useKyklosTokenIncreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof kyklosTokenABI, 'increaseAllowance'>['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<TMode, typeof kyklosTokenABI, 'increaseAllowance'> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any
) {
  return useContractWrite<TMode, typeof kyklosTokenABI, 'increaseAllowance'>({
    abi: kyklosTokenABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link kyklosTokenABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useKyklosTokenOnErc721Received<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof kyklosTokenABI, 'onERC721Received'>['abi'],
        'onERC721Received'
      > & { functionName?: 'onERC721Received' }
    : UseContractWriteConfig<TMode, typeof kyklosTokenABI, 'onERC721Received'> & {
        abi?: never
        functionName?: 'onERC721Received'
      } = {} as any
) {
  return useContractWrite<TMode, typeof kyklosTokenABI, 'onERC721Received'>({
    abi: kyklosTokenABI,
    functionName: 'onERC721Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link kyklosTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function useKyklosTokenTransfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof kyklosTokenABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof kyklosTokenABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<TMode, typeof kyklosTokenABI, 'transfer'>({
    abi: kyklosTokenABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link kyklosTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useKyklosTokenTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof kyklosTokenABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof kyklosTokenABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof kyklosTokenABI, 'transferFrom'>({
    abi: kyklosTokenABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link kyklosTokenABI}__.
 */
export function usePrepareKyklosTokenWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof kyklosTokenABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: kyklosTokenABI, ...config } as UsePrepareContractWriteConfig<
    typeof kyklosTokenABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link kyklosTokenABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareKyklosTokenApprove(
  config: Omit<UsePrepareContractWriteConfig<typeof kyklosTokenABI, 'approve'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: kyklosTokenABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof kyklosTokenABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link kyklosTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareKyklosTokenDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof kyklosTokenABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: kyklosTokenABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof kyklosTokenABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link kyklosTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareKyklosTokenIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof kyklosTokenABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: kyklosTokenABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof kyklosTokenABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link kyklosTokenABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareKyklosTokenOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<typeof kyklosTokenABI, 'onERC721Received'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: kyklosTokenABI,
    functionName: 'onERC721Received',
    ...config,
  } as UsePrepareContractWriteConfig<typeof kyklosTokenABI, 'onERC721Received'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link kyklosTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareKyklosTokenTransfer(
  config: Omit<UsePrepareContractWriteConfig<typeof kyklosTokenABI, 'transfer'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: kyklosTokenABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof kyklosTokenABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link kyklosTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareKyklosTokenTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof kyklosTokenABI, 'transferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: kyklosTokenABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof kyklosTokenABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link kyklosTokenABI}__.
 */
export function useKyklosTokenEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof kyklosTokenABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: kyklosTokenABI, ...config } as UseContractEventConfig<
    typeof kyklosTokenABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link kyklosTokenABI}__ and `eventName` set to `"Approval"`.
 */
export function useKyklosTokenApprovalEvent(
  config: Omit<UseContractEventConfig<typeof kyklosTokenABI, 'Approval'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: kyklosTokenABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof kyklosTokenABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link kyklosTokenABI}__ and `eventName` set to `"FeeBurnt"`.
 */
export function useKyklosTokenFeeBurntEvent(
  config: Omit<UseContractEventConfig<typeof kyklosTokenABI, 'FeeBurnt'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: kyklosTokenABI, eventName: 'FeeBurnt', ...config } as UseContractEventConfig<
    typeof kyklosTokenABI,
    'FeeBurnt'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link kyklosTokenABI}__ and `eventName` set to `"FeePaid"`.
 */
export function useKyklosTokenFeePaidEvent(
  config: Omit<UseContractEventConfig<typeof kyklosTokenABI, 'FeePaid'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: kyklosTokenABI, eventName: 'FeePaid', ...config } as UseContractEventConfig<
    typeof kyklosTokenABI,
    'FeePaid'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link kyklosTokenABI}__ and `eventName` set to `"Retired"`.
 */
export function useKyklosTokenRetiredEvent(
  config: Omit<UseContractEventConfig<typeof kyklosTokenABI, 'Retired'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: kyklosTokenABI, eventName: 'Retired', ...config } as UseContractEventConfig<
    typeof kyklosTokenABI,
    'Retired'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link kyklosTokenABI}__ and `eventName` set to `"Transfer"`.
 */
export function useKyklosTokenTransferEvent(
  config: Omit<UseContractEventConfig<typeof kyklosTokenABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: kyklosTokenABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof kyklosTokenABI,
    'Transfer'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link kyklosTokenStorageABI}__.
 */
export function useKyklosTokenStorage(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: kyklosTokenStorageABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link kyklosTokenStorageABI}__.
 */
export function useKyklosTokenStorageRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof kyklosTokenStorageABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof kyklosTokenStorageABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: kyklosTokenStorageABI, ...config } as UseContractReadConfig<
    typeof kyklosTokenStorageABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link kyklosTokenStorageABI}__ and `functionName` set to `"contractRegistry"`.
 */
export function useKyklosTokenStorageContractRegistry<
  TSelectData = ReadContractResult<typeof kyklosTokenStorageABI, 'contractRegistry'>
>(
  config: Omit<
    UseContractReadConfig<typeof kyklosTokenStorageABI, 'contractRegistry', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: kyklosTokenStorageABI,
    functionName: 'contractRegistry',
    ...config,
  } as UseContractReadConfig<typeof kyklosTokenStorageABI, 'contractRegistry', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link kyklosTokenStorageABI}__ and `functionName` set to `"minterToId"`.
 */
export function useKyklosTokenStorageMinterToId<
  TSelectData = ReadContractResult<typeof kyklosTokenStorageABI, 'minterToId'>
>(
  config: Omit<
    UseContractReadConfig<typeof kyklosTokenStorageABI, 'minterToId', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: kyklosTokenStorageABI, functionName: 'minterToId', ...config } as UseContractReadConfig<
    typeof kyklosTokenStorageABI,
    'minterToId',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link kyklosTokenStorageABI}__ and `functionName` set to `"projectVintageTokenId"`.
 */
export function useKyklosTokenStorageProjectVintageTokenId<
  TSelectData = ReadContractResult<typeof kyklosTokenStorageABI, 'projectVintageTokenId'>
>(
  config: Omit<
    UseContractReadConfig<typeof kyklosTokenStorageABI, 'projectVintageTokenId', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: kyklosTokenStorageABI,
    functionName: 'projectVintageTokenId',
    ...config,
  } as UseContractReadConfig<typeof kyklosTokenStorageABI, 'projectVintageTokenId', TSelectData>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link kyklosTokenFactoryABI}__.
 */
export function useKyklosTokenFactory(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: kyklosTokenFactoryABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link kyklosTokenFactoryABI}__.
 */
export function useKyklosTokenFactoryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof kyklosTokenFactoryABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof kyklosTokenFactoryABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: kyklosTokenFactoryABI, ...config } as UseContractReadConfig<
    typeof kyklosTokenFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link kyklosTokenFactoryABI}__ and `functionName` set to `"beacon"`.
 */
export function useKyklosTokenFactoryBeacon<TSelectData = ReadContractResult<typeof kyklosTokenFactoryABI, 'beacon'>>(
  config: Omit<
    UseContractReadConfig<typeof kyklosTokenFactoryABI, 'beacon', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: kyklosTokenFactoryABI, functionName: 'beacon', ...config } as UseContractReadConfig<
    typeof kyklosTokenFactoryABI,
    'beacon',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link kyklosTokenFactoryABI}__ and `functionName` set to `"bridgeFeeBurnAddress"`.
 */
export function useKyklosTokenFactoryBridgeFeeBurnAddress<
  TSelectData = ReadContractResult<typeof kyklosTokenFactoryABI, 'bridgeFeeBurnAddress'>
>(
  config: Omit<
    UseContractReadConfig<typeof kyklosTokenFactoryABI, 'bridgeFeeBurnAddress', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: kyklosTokenFactoryABI,
    functionName: 'bridgeFeeBurnAddress',
    ...config,
  } as UseContractReadConfig<typeof kyklosTokenFactoryABI, 'bridgeFeeBurnAddress', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link kyklosTokenFactoryABI}__ and `functionName` set to `"bridgeFeeBurnPercentageInBase"`.
 */
export function useKyklosTokenFactoryBridgeFeeBurnPercentageInBase<
  TSelectData = ReadContractResult<typeof kyklosTokenFactoryABI, 'bridgeFeeBurnPercentageInBase'>
>(
  config: Omit<
    UseContractReadConfig<typeof kyklosTokenFactoryABI, 'bridgeFeeBurnPercentageInBase', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: kyklosTokenFactoryABI,
    functionName: 'bridgeFeeBurnPercentageInBase',
    ...config,
  } as UseContractReadConfig<typeof kyklosTokenFactoryABI, 'bridgeFeeBurnPercentageInBase', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link kyklosTokenFactoryABI}__ and `functionName` set to `"bridgeFeePercentageInBase"`.
 */
export function useKyklosTokenFactoryBridgeFeePercentageInBase<
  TSelectData = ReadContractResult<typeof kyklosTokenFactoryABI, 'bridgeFeePercentageInBase'>
>(
  config: Omit<
    UseContractReadConfig<typeof kyklosTokenFactoryABI, 'bridgeFeePercentageInBase', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: kyklosTokenFactoryABI,
    functionName: 'bridgeFeePercentageInBase',
    ...config,
  } as UseContractReadConfig<typeof kyklosTokenFactoryABI, 'bridgeFeePercentageInBase', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link kyklosTokenFactoryABI}__ and `functionName` set to `"bridgeFeeReceiver"`.
 */
export function useKyklosTokenFactoryBridgeFeeReceiver<
  TSelectData = ReadContractResult<typeof kyklosTokenFactoryABI, 'bridgeFeeReceiver'>
>(
  config: Omit<
    UseContractReadConfig<typeof kyklosTokenFactoryABI, 'bridgeFeeReceiver', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: kyklosTokenFactoryABI,
    functionName: 'bridgeFeeReceiver',
    ...config,
  } as UseContractReadConfig<typeof kyklosTokenFactoryABI, 'bridgeFeeReceiver', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link kyklosTokenFactoryABI}__ and `functionName` set to `"contractRegistry"`.
 */
export function useKyklosTokenFactoryContractRegistry<
  TSelectData = ReadContractResult<typeof kyklosTokenFactoryABI, 'contractRegistry'>
>(
  config: Omit<
    UseContractReadConfig<typeof kyklosTokenFactoryABI, 'contractRegistry', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: kyklosTokenFactoryABI,
    functionName: 'contractRegistry',
    ...config,
  } as UseContractReadConfig<typeof kyklosTokenFactoryABI, 'contractRegistry', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link kyklosTokenFactoryABI}__ and `functionName` set to `"deployedContracts"`.
 */
export function useKyklosTokenFactoryDeployedContracts<
  TSelectData = ReadContractResult<typeof kyklosTokenFactoryABI, 'deployedContracts'>
>(
  config: Omit<
    UseContractReadConfig<typeof kyklosTokenFactoryABI, 'deployedContracts', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: kyklosTokenFactoryABI,
    functionName: 'deployedContracts',
    ...config,
  } as UseContractReadConfig<typeof kyklosTokenFactoryABI, 'deployedContracts', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link kyklosTokenFactoryABI}__ and `functionName` set to `"getProjectVintageToErc20"`.
 */
export function useKyklosTokenFactoryGetProjectVintageToErc20<
  TSelectData = ReadContractResult<typeof kyklosTokenFactoryABI, 'getProjectVintageToErc20'>
>(
  config: Omit<
    UseContractReadConfig<typeof kyklosTokenFactoryABI, 'getProjectVintageToErc20', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: kyklosTokenFactoryABI,
    functionName: 'getProjectVintageToErc20',
    ...config,
  } as UseContractReadConfig<typeof kyklosTokenFactoryABI, 'getProjectVintageToErc20', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link kyklosTokenFactoryABI}__ and `functionName` set to `"implementation"`.
 */
export function useKyklosTokenFactoryImplementation<
  TSelectData = ReadContractResult<typeof kyklosTokenFactoryABI, 'implementation'>
>(
  config: Omit<
    UseContractReadConfig<typeof kyklosTokenFactoryABI, 'implementation', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: kyklosTokenFactoryABI,
    functionName: 'implementation',
    ...config,
  } as UseContractReadConfig<typeof kyklosTokenFactoryABI, 'implementation', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link kyklosTokenFactoryABI}__ and `functionName` set to `"owner"`.
 */
export function useKyklosTokenFactoryOwner<TSelectData = ReadContractResult<typeof kyklosTokenFactoryABI, 'owner'>>(
  config: Omit<
    UseContractReadConfig<typeof kyklosTokenFactoryABI, 'owner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: kyklosTokenFactoryABI, functionName: 'owner', ...config } as UseContractReadConfig<
    typeof kyklosTokenFactoryABI,
    'owner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link kyklosTokenFactoryABI}__ and `functionName` set to `"paused"`.
 */
export function useKyklosTokenFactoryPaused<TSelectData = ReadContractResult<typeof kyklosTokenFactoryABI, 'paused'>>(
  config: Omit<
    UseContractReadConfig<typeof kyklosTokenFactoryABI, 'paused', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: kyklosTokenFactoryABI, functionName: 'paused', ...config } as UseContractReadConfig<
    typeof kyklosTokenFactoryABI,
    'paused',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link kyklosTokenFactoryABI}__ and `functionName` set to `"projectVintageToErc20"`.
 */
export function useKyklosTokenFactoryProjectVintageToErc20<
  TSelectData = ReadContractResult<typeof kyklosTokenFactoryABI, 'projectVintageToErc20'>
>(
  config: Omit<
    UseContractReadConfig<typeof kyklosTokenFactoryABI, 'projectVintageToErc20', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: kyklosTokenFactoryABI,
    functionName: 'projectVintageToErc20',
    ...config,
  } as UseContractReadConfig<typeof kyklosTokenFactoryABI, 'projectVintageToErc20', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link kyklosTokenFactoryABI}__ and `functionName` set to `"totalRetired"`.
 */
export function useKyklosTokenFactoryTotalRetired<
  TSelectData = ReadContractResult<typeof kyklosTokenFactoryABI, 'totalRetired'>
>(
  config: Omit<
    UseContractReadConfig<typeof kyklosTokenFactoryABI, 'totalRetired', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: kyklosTokenFactoryABI,
    functionName: 'totalRetired',
    ...config,
  } as UseContractReadConfig<typeof kyklosTokenFactoryABI, 'totalRetired', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link kyklosTokenFactoryABI}__.
 */
export function useKyklosTokenFactoryWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof kyklosTokenFactoryABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof kyklosTokenFactoryABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof kyklosTokenFactoryABI, TFunctionName>({
    abi: kyklosTokenFactoryABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link kyklosTokenFactoryABI}__ and `functionName` set to `"createToken"`.
 */
export function useKyklosTokenFactoryCreateToken<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof kyklosTokenFactoryABI, 'createToken'>['abi'],
        'createToken'
      > & { functionName?: 'createToken' }
    : UseContractWriteConfig<TMode, typeof kyklosTokenFactoryABI, 'createToken'> & {
        abi?: never
        functionName?: 'createToken'
      } = {} as any
) {
  return useContractWrite<TMode, typeof kyklosTokenFactoryABI, 'createToken'>({
    abi: kyklosTokenFactoryABI,
    functionName: 'createToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link kyklosTokenFactoryABI}__ and `functionName` set to `"createToken2"`.
 */
export function useKyklosTokenFactoryCreateToken2<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof kyklosTokenFactoryABI, 'createToken2'>['abi'],
        'createToken2'
      > & { functionName?: 'createToken2' }
    : UseContractWriteConfig<TMode, typeof kyklosTokenFactoryABI, 'createToken2'> & {
        abi?: never
        functionName?: 'createToken2'
      } = {} as any
) {
  return useContractWrite<TMode, typeof kyklosTokenFactoryABI, 'createToken2'>({
    abi: kyklosTokenFactoryABI,
    functionName: 'createToken2',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link kyklosTokenFactoryABI}__ and `functionName` set to `"increaseTotalRetired"`.
 */
export function useKyklosTokenFactoryIncreaseTotalRetired<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof kyklosTokenFactoryABI, 'increaseTotalRetired'>['abi'],
        'increaseTotalRetired'
      > & { functionName?: 'increaseTotalRetired' }
    : UseContractWriteConfig<TMode, typeof kyklosTokenFactoryABI, 'increaseTotalRetired'> & {
        abi?: never
        functionName?: 'increaseTotalRetired'
      } = {} as any
) {
  return useContractWrite<TMode, typeof kyklosTokenFactoryABI, 'increaseTotalRetired'>({
    abi: kyklosTokenFactoryABI,
    functionName: 'increaseTotalRetired',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link kyklosTokenFactoryABI}__ and `functionName` set to `"pause"`.
 */
export function useKyklosTokenFactoryPause<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof kyklosTokenFactoryABI, 'pause'>['abi'],
        'pause'
      > & { functionName?: 'pause' }
    : UseContractWriteConfig<TMode, typeof kyklosTokenFactoryABI, 'pause'> & {
        abi?: never
        functionName?: 'pause'
      } = {} as any
) {
  return useContractWrite<TMode, typeof kyklosTokenFactoryABI, 'pause'>({
    abi: kyklosTokenFactoryABI,
    functionName: 'pause',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link kyklosTokenFactoryABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useKyklosTokenFactoryRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof kyklosTokenFactoryABI, 'renounceOwnership'>['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<TMode, typeof kyklosTokenFactoryABI, 'renounceOwnership'> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof kyklosTokenFactoryABI, 'renounceOwnership'>({
    abi: kyklosTokenFactoryABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link kyklosTokenFactoryABI}__ and `functionName` set to `"setBridgeFeeBurnAddress"`.
 */
export function useKyklosTokenFactorySetBridgeFeeBurnAddress<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof kyklosTokenFactoryABI, 'setBridgeFeeBurnAddress'>['abi'],
        'setBridgeFeeBurnAddress'
      > & { functionName?: 'setBridgeFeeBurnAddress' }
    : UseContractWriteConfig<TMode, typeof kyklosTokenFactoryABI, 'setBridgeFeeBurnAddress'> & {
        abi?: never
        functionName?: 'setBridgeFeeBurnAddress'
      } = {} as any
) {
  return useContractWrite<TMode, typeof kyklosTokenFactoryABI, 'setBridgeFeeBurnAddress'>({
    abi: kyklosTokenFactoryABI,
    functionName: 'setBridgeFeeBurnAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link kyklosTokenFactoryABI}__ and `functionName` set to `"setBridgeFeeBurnPercentageInBase"`.
 */
export function useKyklosTokenFactorySetBridgeFeeBurnPercentageInBase<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof kyklosTokenFactoryABI, 'setBridgeFeeBurnPercentageInBase'>['abi'],
        'setBridgeFeeBurnPercentageInBase'
      > & { functionName?: 'setBridgeFeeBurnPercentageInBase' }
    : UseContractWriteConfig<TMode, typeof kyklosTokenFactoryABI, 'setBridgeFeeBurnPercentageInBase'> & {
        abi?: never
        functionName?: 'setBridgeFeeBurnPercentageInBase'
      } = {} as any
) {
  return useContractWrite<TMode, typeof kyklosTokenFactoryABI, 'setBridgeFeeBurnPercentageInBase'>({
    abi: kyklosTokenFactoryABI,
    functionName: 'setBridgeFeeBurnPercentageInBase',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link kyklosTokenFactoryABI}__ and `functionName` set to `"setBridgeFeePercentageInBase"`.
 */
export function useKyklosTokenFactorySetBridgeFeePercentageInBase<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof kyklosTokenFactoryABI, 'setBridgeFeePercentageInBase'>['abi'],
        'setBridgeFeePercentageInBase'
      > & { functionName?: 'setBridgeFeePercentageInBase' }
    : UseContractWriteConfig<TMode, typeof kyklosTokenFactoryABI, 'setBridgeFeePercentageInBase'> & {
        abi?: never
        functionName?: 'setBridgeFeePercentageInBase'
      } = {} as any
) {
  return useContractWrite<TMode, typeof kyklosTokenFactoryABI, 'setBridgeFeePercentageInBase'>({
    abi: kyklosTokenFactoryABI,
    functionName: 'setBridgeFeePercentageInBase',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link kyklosTokenFactoryABI}__ and `functionName` set to `"setBridgeFeeReceiver"`.
 */
export function useKyklosTokenFactorySetBridgeFeeReceiver<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof kyklosTokenFactoryABI, 'setBridgeFeeReceiver'>['abi'],
        'setBridgeFeeReceiver'
      > & { functionName?: 'setBridgeFeeReceiver' }
    : UseContractWriteConfig<TMode, typeof kyklosTokenFactoryABI, 'setBridgeFeeReceiver'> & {
        abi?: never
        functionName?: 'setBridgeFeeReceiver'
      } = {} as any
) {
  return useContractWrite<TMode, typeof kyklosTokenFactoryABI, 'setBridgeFeeReceiver'>({
    abi: kyklosTokenFactoryABI,
    functionName: 'setBridgeFeeReceiver',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link kyklosTokenFactoryABI}__ and `functionName` set to `"setRegistry"`.
 */
export function useKyklosTokenFactorySetRegistry<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof kyklosTokenFactoryABI, 'setRegistry'>['abi'],
        'setRegistry'
      > & { functionName?: 'setRegistry' }
    : UseContractWriteConfig<TMode, typeof kyklosTokenFactoryABI, 'setRegistry'> & {
        abi?: never
        functionName?: 'setRegistry'
      } = {} as any
) {
  return useContractWrite<TMode, typeof kyklosTokenFactoryABI, 'setRegistry'>({
    abi: kyklosTokenFactoryABI,
    functionName: 'setRegistry',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link kyklosTokenFactoryABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useKyklosTokenFactoryTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof kyklosTokenFactoryABI, 'transferOwnership'>['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<TMode, typeof kyklosTokenFactoryABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof kyklosTokenFactoryABI, 'transferOwnership'>({
    abi: kyklosTokenFactoryABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link kyklosTokenFactoryABI}__ and `functionName` set to `"unpause"`.
 */
export function useKyklosTokenFactoryUnpause<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof kyklosTokenFactoryABI, 'unpause'>['abi'],
        'unpause'
      > & { functionName?: 'unpause' }
    : UseContractWriteConfig<TMode, typeof kyklosTokenFactoryABI, 'unpause'> & {
        abi?: never
        functionName?: 'unpause'
      } = {} as any
) {
  return useContractWrite<TMode, typeof kyklosTokenFactoryABI, 'unpause'>({
    abi: kyklosTokenFactoryABI,
    functionName: 'unpause',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link kyklosTokenFactoryABI}__.
 */
export function usePrepareKyklosTokenFactoryWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof kyklosTokenFactoryABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: kyklosTokenFactoryABI, ...config } as UsePrepareContractWriteConfig<
    typeof kyklosTokenFactoryABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link kyklosTokenFactoryABI}__ and `functionName` set to `"createToken"`.
 */
export function usePrepareKyklosTokenFactoryCreateToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof kyklosTokenFactoryABI, 'createToken'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: kyklosTokenFactoryABI,
    functionName: 'createToken',
    ...config,
  } as UsePrepareContractWriteConfig<typeof kyklosTokenFactoryABI, 'createToken'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link kyklosTokenFactoryABI}__ and `functionName` set to `"createToken2"`.
 */
export function usePrepareKyklosTokenFactoryCreateToken2(
  config: Omit<
    UsePrepareContractWriteConfig<typeof kyklosTokenFactoryABI, 'createToken2'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: kyklosTokenFactoryABI,
    functionName: 'createToken2',
    ...config,
  } as UsePrepareContractWriteConfig<typeof kyklosTokenFactoryABI, 'createToken2'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link kyklosTokenFactoryABI}__ and `functionName` set to `"increaseTotalRetired"`.
 */
export function usePrepareKyklosTokenFactoryIncreaseTotalRetired(
  config: Omit<
    UsePrepareContractWriteConfig<typeof kyklosTokenFactoryABI, 'increaseTotalRetired'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: kyklosTokenFactoryABI,
    functionName: 'increaseTotalRetired',
    ...config,
  } as UsePrepareContractWriteConfig<typeof kyklosTokenFactoryABI, 'increaseTotalRetired'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link kyklosTokenFactoryABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareKyklosTokenFactoryPause(
  config: Omit<UsePrepareContractWriteConfig<typeof kyklosTokenFactoryABI, 'pause'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: kyklosTokenFactoryABI,
    functionName: 'pause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof kyklosTokenFactoryABI, 'pause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link kyklosTokenFactoryABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareKyklosTokenFactoryRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof kyklosTokenFactoryABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: kyklosTokenFactoryABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof kyklosTokenFactoryABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link kyklosTokenFactoryABI}__ and `functionName` set to `"setBridgeFeeBurnAddress"`.
 */
export function usePrepareKyklosTokenFactorySetBridgeFeeBurnAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof kyklosTokenFactoryABI, 'setBridgeFeeBurnAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: kyklosTokenFactoryABI,
    functionName: 'setBridgeFeeBurnAddress',
    ...config,
  } as UsePrepareContractWriteConfig<typeof kyklosTokenFactoryABI, 'setBridgeFeeBurnAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link kyklosTokenFactoryABI}__ and `functionName` set to `"setBridgeFeeBurnPercentageInBase"`.
 */
export function usePrepareKyklosTokenFactorySetBridgeFeeBurnPercentageInBase(
  config: Omit<
    UsePrepareContractWriteConfig<typeof kyklosTokenFactoryABI, 'setBridgeFeeBurnPercentageInBase'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: kyklosTokenFactoryABI,
    functionName: 'setBridgeFeeBurnPercentageInBase',
    ...config,
  } as UsePrepareContractWriteConfig<typeof kyklosTokenFactoryABI, 'setBridgeFeeBurnPercentageInBase'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link kyklosTokenFactoryABI}__ and `functionName` set to `"setBridgeFeePercentageInBase"`.
 */
export function usePrepareKyklosTokenFactorySetBridgeFeePercentageInBase(
  config: Omit<
    UsePrepareContractWriteConfig<typeof kyklosTokenFactoryABI, 'setBridgeFeePercentageInBase'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: kyklosTokenFactoryABI,
    functionName: 'setBridgeFeePercentageInBase',
    ...config,
  } as UsePrepareContractWriteConfig<typeof kyklosTokenFactoryABI, 'setBridgeFeePercentageInBase'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link kyklosTokenFactoryABI}__ and `functionName` set to `"setBridgeFeeReceiver"`.
 */
export function usePrepareKyklosTokenFactorySetBridgeFeeReceiver(
  config: Omit<
    UsePrepareContractWriteConfig<typeof kyklosTokenFactoryABI, 'setBridgeFeeReceiver'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: kyklosTokenFactoryABI,
    functionName: 'setBridgeFeeReceiver',
    ...config,
  } as UsePrepareContractWriteConfig<typeof kyklosTokenFactoryABI, 'setBridgeFeeReceiver'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link kyklosTokenFactoryABI}__ and `functionName` set to `"setRegistry"`.
 */
export function usePrepareKyklosTokenFactorySetRegistry(
  config: Omit<
    UsePrepareContractWriteConfig<typeof kyklosTokenFactoryABI, 'setRegistry'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: kyklosTokenFactoryABI,
    functionName: 'setRegistry',
    ...config,
  } as UsePrepareContractWriteConfig<typeof kyklosTokenFactoryABI, 'setRegistry'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link kyklosTokenFactoryABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareKyklosTokenFactoryTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof kyklosTokenFactoryABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: kyklosTokenFactoryABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof kyklosTokenFactoryABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link kyklosTokenFactoryABI}__ and `functionName` set to `"unpause"`.
 */
export function usePrepareKyklosTokenFactoryUnpause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof kyklosTokenFactoryABI, 'unpause'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: kyklosTokenFactoryABI,
    functionName: 'unpause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof kyklosTokenFactoryABI, 'unpause'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link kyklosTokenFactoryABI}__.
 */
export function useKyklosTokenFactoryEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof kyklosTokenFactoryABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: kyklosTokenFactoryABI, ...config } as UseContractEventConfig<
    typeof kyklosTokenFactoryABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link kyklosTokenFactoryABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useKyklosTokenFactoryOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof kyklosTokenFactoryABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: kyklosTokenFactoryABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof kyklosTokenFactoryABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link kyklosTokenFactoryABI}__ and `eventName` set to `"Paused"`.
 */
export function useKyklosTokenFactoryPausedEvent(
  config: Omit<UseContractEventConfig<typeof kyklosTokenFactoryABI, 'Paused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: kyklosTokenFactoryABI, eventName: 'Paused', ...config } as UseContractEventConfig<
    typeof kyklosTokenFactoryABI,
    'Paused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link kyklosTokenFactoryABI}__ and `eventName` set to `"TokenCreated"`.
 */
export function useKyklosTokenFactoryTokenCreatedEvent(
  config: Omit<UseContractEventConfig<typeof kyklosTokenFactoryABI, 'TokenCreated'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: kyklosTokenFactoryABI,
    eventName: 'TokenCreated',
    ...config,
  } as UseContractEventConfig<typeof kyklosTokenFactoryABI, 'TokenCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link kyklosTokenFactoryABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useKyklosTokenFactoryUnpausedEvent(
  config: Omit<UseContractEventConfig<typeof kyklosTokenFactoryABI, 'Unpaused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: kyklosTokenFactoryABI, eventName: 'Unpaused', ...config } as UseContractEventConfig<
    typeof kyklosTokenFactoryABI,
    'Unpaused'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link kyklosTokenFactoryStorageABI}__.
 */
export function useKyklosTokenFactoryStorage(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: kyklosTokenFactoryStorageABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link kyklosTokenFactoryStorageABI}__.
 */
export function useKyklosTokenFactoryStorageRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof kyklosTokenFactoryStorageABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof kyklosTokenFactoryStorageABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: kyklosTokenFactoryStorageABI, ...config } as UseContractReadConfig<
    typeof kyklosTokenFactoryStorageABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link kyklosTokenFactoryStorageABI}__ and `functionName` set to `"beacon"`.
 */
export function useKyklosTokenFactoryStorageBeacon<
  TSelectData = ReadContractResult<typeof kyklosTokenFactoryStorageABI, 'beacon'>
>(
  config: Omit<
    UseContractReadConfig<typeof kyklosTokenFactoryStorageABI, 'beacon', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: kyklosTokenFactoryStorageABI,
    functionName: 'beacon',
    ...config,
  } as UseContractReadConfig<typeof kyklosTokenFactoryStorageABI, 'beacon', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link kyklosTokenFactoryStorageABI}__ and `functionName` set to `"bridgeFeeBurnAddress"`.
 */
export function useKyklosTokenFactoryStorageBridgeFeeBurnAddress<
  TSelectData = ReadContractResult<typeof kyklosTokenFactoryStorageABI, 'bridgeFeeBurnAddress'>
>(
  config: Omit<
    UseContractReadConfig<typeof kyklosTokenFactoryStorageABI, 'bridgeFeeBurnAddress', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: kyklosTokenFactoryStorageABI,
    functionName: 'bridgeFeeBurnAddress',
    ...config,
  } as UseContractReadConfig<typeof kyklosTokenFactoryStorageABI, 'bridgeFeeBurnAddress', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link kyklosTokenFactoryStorageABI}__ and `functionName` set to `"bridgeFeeBurnPercentageInBase"`.
 */
export function useKyklosTokenFactoryStorageBridgeFeeBurnPercentageInBase<
  TSelectData = ReadContractResult<typeof kyklosTokenFactoryStorageABI, 'bridgeFeeBurnPercentageInBase'>
>(
  config: Omit<
    UseContractReadConfig<typeof kyklosTokenFactoryStorageABI, 'bridgeFeeBurnPercentageInBase', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: kyklosTokenFactoryStorageABI,
    functionName: 'bridgeFeeBurnPercentageInBase',
    ...config,
  } as UseContractReadConfig<typeof kyklosTokenFactoryStorageABI, 'bridgeFeeBurnPercentageInBase', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link kyklosTokenFactoryStorageABI}__ and `functionName` set to `"bridgeFeePercentageInBase"`.
 */
export function useKyklosTokenFactoryStorageBridgeFeePercentageInBase<
  TSelectData = ReadContractResult<typeof kyklosTokenFactoryStorageABI, 'bridgeFeePercentageInBase'>
>(
  config: Omit<
    UseContractReadConfig<typeof kyklosTokenFactoryStorageABI, 'bridgeFeePercentageInBase', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: kyklosTokenFactoryStorageABI,
    functionName: 'bridgeFeePercentageInBase',
    ...config,
  } as UseContractReadConfig<typeof kyklosTokenFactoryStorageABI, 'bridgeFeePercentageInBase', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link kyklosTokenFactoryStorageABI}__ and `functionName` set to `"bridgeFeeReceiver"`.
 */
export function useKyklosTokenFactoryStorageBridgeFeeReceiver<
  TSelectData = ReadContractResult<typeof kyklosTokenFactoryStorageABI, 'bridgeFeeReceiver'>
>(
  config: Omit<
    UseContractReadConfig<typeof kyklosTokenFactoryStorageABI, 'bridgeFeeReceiver', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: kyklosTokenFactoryStorageABI,
    functionName: 'bridgeFeeReceiver',
    ...config,
  } as UseContractReadConfig<typeof kyklosTokenFactoryStorageABI, 'bridgeFeeReceiver', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link kyklosTokenFactoryStorageABI}__ and `functionName` set to `"contractRegistry"`.
 */
export function useKyklosTokenFactoryStorageContractRegistry<
  TSelectData = ReadContractResult<typeof kyklosTokenFactoryStorageABI, 'contractRegistry'>
>(
  config: Omit<
    UseContractReadConfig<typeof kyklosTokenFactoryStorageABI, 'contractRegistry', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: kyklosTokenFactoryStorageABI,
    functionName: 'contractRegistry',
    ...config,
  } as UseContractReadConfig<typeof kyklosTokenFactoryStorageABI, 'contractRegistry', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link kyklosTokenFactoryStorageABI}__ and `functionName` set to `"deployedContracts"`.
 */
export function useKyklosTokenFactoryStorageDeployedContracts<
  TSelectData = ReadContractResult<typeof kyklosTokenFactoryStorageABI, 'deployedContracts'>
>(
  config: Omit<
    UseContractReadConfig<typeof kyklosTokenFactoryStorageABI, 'deployedContracts', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: kyklosTokenFactoryStorageABI,
    functionName: 'deployedContracts',
    ...config,
  } as UseContractReadConfig<typeof kyklosTokenFactoryStorageABI, 'deployedContracts', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link kyklosTokenFactoryStorageABI}__ and `functionName` set to `"projectVintageToErc20"`.
 */
export function useKyklosTokenFactoryStorageProjectVintageToErc20<
  TSelectData = ReadContractResult<typeof kyklosTokenFactoryStorageABI, 'projectVintageToErc20'>
>(
  config: Omit<
    UseContractReadConfig<typeof kyklosTokenFactoryStorageABI, 'projectVintageToErc20', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: kyklosTokenFactoryStorageABI,
    functionName: 'projectVintageToErc20',
    ...config,
  } as UseContractReadConfig<typeof kyklosTokenFactoryStorageABI, 'projectVintageToErc20', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link kyklosTokenFactoryStorageABI}__ and `functionName` set to `"totalRetired"`.
 */
export function useKyklosTokenFactoryStorageTotalRetired<
  TSelectData = ReadContractResult<typeof kyklosTokenFactoryStorageABI, 'totalRetired'>
>(
  config: Omit<
    UseContractReadConfig<typeof kyklosTokenFactoryStorageABI, 'totalRetired', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: kyklosTokenFactoryStorageABI,
    functionName: 'totalRetired',
    ...config,
  } as UseContractReadConfig<typeof kyklosTokenFactoryStorageABI, 'totalRetired', TSelectData>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link nftRetirementBatchABI}__.
 */
export function useNftRetirementBatch(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: nftRetirementBatchABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nftRetirementBatchABI}__.
 */
export function useNftRetirementBatchRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof nftRetirementBatchABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof nftRetirementBatchABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: nftRetirementBatchABI, ...config } as UseContractReadConfig<
    typeof nftRetirementBatchABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useNftRetirementBatchDefaultAdminRole<
  TSelectData = ReadContractResult<typeof nftRetirementBatchABI, 'DEFAULT_ADMIN_ROLE'>
>(
  config: Omit<
    UseContractReadConfig<typeof nftRetirementBatchABI, 'DEFAULT_ADMIN_ROLE', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: nftRetirementBatchABI,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config,
  } as UseContractReadConfig<typeof nftRetirementBatchABI, 'DEFAULT_ADMIN_ROLE', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"URIs"`.
 */
export function useNftRetirementBatchUrIs<TSelectData = ReadContractResult<typeof nftRetirementBatchABI, 'URIs'>>(
  config: Omit<
    UseContractReadConfig<typeof nftRetirementBatchABI, 'URIs', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: nftRetirementBatchABI, functionName: 'URIs', ...config } as UseContractReadConfig<
    typeof nftRetirementBatchABI,
    'URIs',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"VERIFIER_ROLE"`.
 */
export function useNftRetirementBatchVerifierRole<
  TSelectData = ReadContractResult<typeof nftRetirementBatchABI, 'VERIFIER_ROLE'>
>(
  config: Omit<
    UseContractReadConfig<typeof nftRetirementBatchABI, 'VERIFIER_ROLE', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: nftRetirementBatchABI,
    functionName: 'VERIFIER_ROLE',
    ...config,
  } as UseContractReadConfig<typeof nftRetirementBatchABI, 'VERIFIER_ROLE', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useNftRetirementBatchBalanceOf<
  TSelectData = ReadContractResult<typeof nftRetirementBatchABI, 'balanceOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof nftRetirementBatchABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: nftRetirementBatchABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof nftRetirementBatchABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"baseURI"`.
 */
export function useNftRetirementBatchBaseUri<TSelectData = ReadContractResult<typeof nftRetirementBatchABI, 'baseURI'>>(
  config: Omit<
    UseContractReadConfig<typeof nftRetirementBatchABI, 'baseURI', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: nftRetirementBatchABI, functionName: 'baseURI', ...config } as UseContractReadConfig<
    typeof nftRetirementBatchABI,
    'baseURI',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"batchTokenCounter"`.
 */
export function useNftRetirementBatchBatchTokenCounter<
  TSelectData = ReadContractResult<typeof nftRetirementBatchABI, 'batchTokenCounter'>
>(
  config: Omit<
    UseContractReadConfig<typeof nftRetirementBatchABI, 'batchTokenCounter', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: nftRetirementBatchABI,
    functionName: 'batchTokenCounter',
    ...config,
  } as UseContractReadConfig<typeof nftRetirementBatchABI, 'batchTokenCounter', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"contractRegistry"`.
 */
export function useNftRetirementBatchContractRegistry<
  TSelectData = ReadContractResult<typeof nftRetirementBatchABI, 'contractRegistry'>
>(
  config: Omit<
    UseContractReadConfig<typeof nftRetirementBatchABI, 'contractRegistry', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: nftRetirementBatchABI,
    functionName: 'contractRegistry',
    ...config,
  } as UseContractReadConfig<typeof nftRetirementBatchABI, 'contractRegistry', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"getAllNftOfUser"`.
 */
export function useNftRetirementBatchGetAllNftOfUser<
  TSelectData = ReadContractResult<typeof nftRetirementBatchABI, 'getAllNftOfUser'>
>(
  config: Omit<
    UseContractReadConfig<typeof nftRetirementBatchABI, 'getAllNftOfUser', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: nftRetirementBatchABI,
    functionName: 'getAllNftOfUser',
    ...config,
  } as UseContractReadConfig<typeof nftRetirementBatchABI, 'getAllNftOfUser', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"getApproved"`.
 */
export function useNftRetirementBatchGetApproved<
  TSelectData = ReadContractResult<typeof nftRetirementBatchABI, 'getApproved'>
>(
  config: Omit<
    UseContractReadConfig<typeof nftRetirementBatchABI, 'getApproved', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: nftRetirementBatchABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof nftRetirementBatchABI, 'getApproved', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"getBatchNFTData"`.
 */
export function useNftRetirementBatchGetBatchNftData<
  TSelectData = ReadContractResult<typeof nftRetirementBatchABI, 'getBatchNFTData'>
>(
  config: Omit<
    UseContractReadConfig<typeof nftRetirementBatchABI, 'getBatchNFTData', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: nftRetirementBatchABI,
    functionName: 'getBatchNFTData',
    ...config,
  } as UseContractReadConfig<typeof nftRetirementBatchABI, 'getBatchNFTData', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"getConfirmationStatus"`.
 */
export function useNftRetirementBatchGetConfirmationStatus<
  TSelectData = ReadContractResult<typeof nftRetirementBatchABI, 'getConfirmationStatus'>
>(
  config: Omit<
    UseContractReadConfig<typeof nftRetirementBatchABI, 'getConfirmationStatus', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: nftRetirementBatchABI,
    functionName: 'getConfirmationStatus',
    ...config,
  } as UseContractReadConfig<typeof nftRetirementBatchABI, 'getConfirmationStatus', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"getRegistry"`.
 */
export function useNftRetirementBatchGetRegistry<
  TSelectData = ReadContractResult<typeof nftRetirementBatchABI, 'getRegistry'>
>(
  config: Omit<
    UseContractReadConfig<typeof nftRetirementBatchABI, 'getRegistry', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: nftRetirementBatchABI,
    functionName: 'getRegistry',
    ...config,
  } as UseContractReadConfig<typeof nftRetirementBatchABI, 'getRegistry', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useNftRetirementBatchGetRoleAdmin<
  TSelectData = ReadContractResult<typeof nftRetirementBatchABI, 'getRoleAdmin'>
>(
  config: Omit<
    UseContractReadConfig<typeof nftRetirementBatchABI, 'getRoleAdmin', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: nftRetirementBatchABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<typeof nftRetirementBatchABI, 'getRoleAdmin', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"hasRole"`.
 */
export function useNftRetirementBatchHasRole<TSelectData = ReadContractResult<typeof nftRetirementBatchABI, 'hasRole'>>(
  config: Omit<
    UseContractReadConfig<typeof nftRetirementBatchABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: nftRetirementBatchABI, functionName: 'hasRole', ...config } as UseContractReadConfig<
    typeof nftRetirementBatchABI,
    'hasRole',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useNftRetirementBatchIsApprovedForAll<
  TSelectData = ReadContractResult<typeof nftRetirementBatchABI, 'isApprovedForAll'>
>(
  config: Omit<
    UseContractReadConfig<typeof nftRetirementBatchABI, 'isApprovedForAll', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: nftRetirementBatchABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof nftRetirementBatchABI, 'isApprovedForAll', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"name"`.
 */
export function useNftRetirementBatchName<TSelectData = ReadContractResult<typeof nftRetirementBatchABI, 'name'>>(
  config: Omit<
    UseContractReadConfig<typeof nftRetirementBatchABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: nftRetirementBatchABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof nftRetirementBatchABI,
    'name',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"nftList"`.
 */
export function useNftRetirementBatchNftList<TSelectData = ReadContractResult<typeof nftRetirementBatchABI, 'nftList'>>(
  config: Omit<
    UseContractReadConfig<typeof nftRetirementBatchABI, 'nftList', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: nftRetirementBatchABI, functionName: 'nftList', ...config } as UseContractReadConfig<
    typeof nftRetirementBatchABI,
    'nftList',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useNftRetirementBatchOwnerOf<TSelectData = ReadContractResult<typeof nftRetirementBatchABI, 'ownerOf'>>(
  config: Omit<
    UseContractReadConfig<typeof nftRetirementBatchABI, 'ownerOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: nftRetirementBatchABI, functionName: 'ownerOf', ...config } as UseContractReadConfig<
    typeof nftRetirementBatchABI,
    'ownerOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"serialNumberApproved"`.
 */
export function useNftRetirementBatchSerialNumberApproved<
  TSelectData = ReadContractResult<typeof nftRetirementBatchABI, 'serialNumberApproved'>
>(
  config: Omit<
    UseContractReadConfig<typeof nftRetirementBatchABI, 'serialNumberApproved', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: nftRetirementBatchABI,
    functionName: 'serialNumberApproved',
    ...config,
  } as UseContractReadConfig<typeof nftRetirementBatchABI, 'serialNumberApproved', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useNftRetirementBatchSupportsInterface<
  TSelectData = ReadContractResult<typeof nftRetirementBatchABI, 'supportsInterface'>
>(
  config: Omit<
    UseContractReadConfig<typeof nftRetirementBatchABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: nftRetirementBatchABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof nftRetirementBatchABI, 'supportsInterface', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"symbol"`.
 */
export function useNftRetirementBatchSymbol<TSelectData = ReadContractResult<typeof nftRetirementBatchABI, 'symbol'>>(
  config: Omit<
    UseContractReadConfig<typeof nftRetirementBatchABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: nftRetirementBatchABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof nftRetirementBatchABI,
    'symbol',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useNftRetirementBatchTokenUri<
  TSelectData = ReadContractResult<typeof nftRetirementBatchABI, 'tokenURI'>
>(
  config: Omit<
    UseContractReadConfig<typeof nftRetirementBatchABI, 'tokenURI', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: nftRetirementBatchABI, functionName: 'tokenURI', ...config } as UseContractReadConfig<
    typeof nftRetirementBatchABI,
    'tokenURI',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nftRetirementBatchABI}__.
 */
export function useNftRetirementBatchWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof nftRetirementBatchABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof nftRetirementBatchABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof nftRetirementBatchABI, TFunctionName>({
    abi: nftRetirementBatchABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"approve"`.
 */
export function useNftRetirementBatchApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof nftRetirementBatchABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof nftRetirementBatchABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<TMode, typeof nftRetirementBatchABI, 'approve'>({
    abi: nftRetirementBatchABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"burn"`.
 */
export function useNftRetirementBatchBurn<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof nftRetirementBatchABI, 'burn'>['abi'], 'burn'> & {
        functionName?: 'burn'
      }
    : UseContractWriteConfig<TMode, typeof nftRetirementBatchABI, 'burn'> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any
) {
  return useContractWrite<TMode, typeof nftRetirementBatchABI, 'burn'>({
    abi: nftRetirementBatchABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"confirmRetirement"`.
 */
export function useNftRetirementBatchConfirmRetirement<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof nftRetirementBatchABI, 'confirmRetirement'>['abi'],
        'confirmRetirement'
      > & { functionName?: 'confirmRetirement' }
    : UseContractWriteConfig<TMode, typeof nftRetirementBatchABI, 'confirmRetirement'> & {
        abi?: never
        functionName?: 'confirmRetirement'
      } = {} as any
) {
  return useContractWrite<TMode, typeof nftRetirementBatchABI, 'confirmRetirement'>({
    abi: nftRetirementBatchABI,
    functionName: 'confirmRetirement',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"fractionalize"`.
 */
export function useNftRetirementBatchFractionalize<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof nftRetirementBatchABI, 'fractionalize'>['abi'],
        'fractionalize'
      > & { functionName?: 'fractionalize' }
    : UseContractWriteConfig<TMode, typeof nftRetirementBatchABI, 'fractionalize'> & {
        abi?: never
        functionName?: 'fractionalize'
      } = {} as any
) {
  return useContractWrite<TMode, typeof nftRetirementBatchABI, 'fractionalize'>({
    abi: nftRetirementBatchABI,
    functionName: 'fractionalize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"grantRole"`.
 */
export function useNftRetirementBatchGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof nftRetirementBatchABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof nftRetirementBatchABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any
) {
  return useContractWrite<TMode, typeof nftRetirementBatchABI, 'grantRole'>({
    abi: nftRetirementBatchABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"mintEmptyBatch"`.
 */
export function useNftRetirementBatchMintEmptyBatch<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof nftRetirementBatchABI, 'mintEmptyBatch'>['abi'],
        'mintEmptyBatch'
      > & { functionName?: 'mintEmptyBatch' }
    : UseContractWriteConfig<TMode, typeof nftRetirementBatchABI, 'mintEmptyBatch'> & {
        abi?: never
        functionName?: 'mintEmptyBatch'
      } = {} as any
) {
  return useContractWrite<TMode, typeof nftRetirementBatchABI, 'mintEmptyBatch'>({
    abi: nftRetirementBatchABI,
    functionName: 'mintEmptyBatch',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"rejectRetirement"`.
 */
export function useNftRetirementBatchRejectRetirement<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof nftRetirementBatchABI, 'rejectRetirement'>['abi'],
        'rejectRetirement'
      > & { functionName?: 'rejectRetirement' }
    : UseContractWriteConfig<TMode, typeof nftRetirementBatchABI, 'rejectRetirement'> & {
        abi?: never
        functionName?: 'rejectRetirement'
      } = {} as any
) {
  return useContractWrite<TMode, typeof nftRetirementBatchABI, 'rejectRetirement'>({
    abi: nftRetirementBatchABI,
    functionName: 'rejectRetirement',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useNftRetirementBatchRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof nftRetirementBatchABI, 'renounceRole'>['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof nftRetirementBatchABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any
) {
  return useContractWrite<TMode, typeof nftRetirementBatchABI, 'renounceRole'>({
    abi: nftRetirementBatchABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useNftRetirementBatchRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof nftRetirementBatchABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof nftRetirementBatchABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any
) {
  return useContractWrite<TMode, typeof nftRetirementBatchABI, 'revokeRole'>({
    abi: nftRetirementBatchABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useNftRetirementBatchSafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof nftRetirementBatchABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof nftRetirementBatchABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof nftRetirementBatchABI, 'safeTransferFrom'>({
    abi: nftRetirementBatchABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useNftRetirementBatchSetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof nftRetirementBatchABI, 'setApprovalForAll'>['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof nftRetirementBatchABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any
) {
  return useContractWrite<TMode, typeof nftRetirementBatchABI, 'setApprovalForAll'>({
    abi: nftRetirementBatchABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"setBaseURI"`.
 */
export function useNftRetirementBatchSetBaseUri<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof nftRetirementBatchABI, 'setBaseURI'>['abi'],
        'setBaseURI'
      > & { functionName?: 'setBaseURI' }
    : UseContractWriteConfig<TMode, typeof nftRetirementBatchABI, 'setBaseURI'> & {
        abi?: never
        functionName?: 'setBaseURI'
      } = {} as any
) {
  return useContractWrite<TMode, typeof nftRetirementBatchABI, 'setBaseURI'>({
    abi: nftRetirementBatchABI,
    functionName: 'setBaseURI',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"setRegistry"`.
 */
export function useNftRetirementBatchSetRegistry<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof nftRetirementBatchABI, 'setRegistry'>['abi'],
        'setRegistry'
      > & { functionName?: 'setRegistry' }
    : UseContractWriteConfig<TMode, typeof nftRetirementBatchABI, 'setRegistry'> & {
        abi?: never
        functionName?: 'setRegistry'
      } = {} as any
) {
  return useContractWrite<TMode, typeof nftRetirementBatchABI, 'setRegistry'>({
    abi: nftRetirementBatchABI,
    functionName: 'setRegistry',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"setSerialandQuantity"`.
 */
export function useNftRetirementBatchSetSerialandQuantity<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof nftRetirementBatchABI, 'setSerialandQuantity'>['abi'],
        'setSerialandQuantity'
      > & { functionName?: 'setSerialandQuantity' }
    : UseContractWriteConfig<TMode, typeof nftRetirementBatchABI, 'setSerialandQuantity'> & {
        abi?: never
        functionName?: 'setSerialandQuantity'
      } = {} as any
) {
  return useContractWrite<TMode, typeof nftRetirementBatchABI, 'setSerialandQuantity'>({
    abi: nftRetirementBatchABI,
    functionName: 'setSerialandQuantity',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"setToPending"`.
 */
export function useNftRetirementBatchSetToPending<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof nftRetirementBatchABI, 'setToPending'>['abi'],
        'setToPending'
      > & { functionName?: 'setToPending' }
    : UseContractWriteConfig<TMode, typeof nftRetirementBatchABI, 'setToPending'> & {
        abi?: never
        functionName?: 'setToPending'
      } = {} as any
) {
  return useContractWrite<TMode, typeof nftRetirementBatchABI, 'setToPending'>({
    abi: nftRetirementBatchABI,
    functionName: 'setToPending',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useNftRetirementBatchTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof nftRetirementBatchABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof nftRetirementBatchABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof nftRetirementBatchABI, 'transferFrom'>({
    abi: nftRetirementBatchABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"updateBatchWithData"`.
 */
export function useNftRetirementBatchUpdateBatchWithData<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof nftRetirementBatchABI, 'updateBatchWithData'>['abi'],
        'updateBatchWithData'
      > & { functionName?: 'updateBatchWithData' }
    : UseContractWriteConfig<TMode, typeof nftRetirementBatchABI, 'updateBatchWithData'> & {
        abi?: never
        functionName?: 'updateBatchWithData'
      } = {} as any
) {
  return useContractWrite<TMode, typeof nftRetirementBatchABI, 'updateBatchWithData'>({
    abi: nftRetirementBatchABI,
    functionName: 'updateBatchWithData',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nftRetirementBatchABI}__.
 */
export function usePrepareNftRetirementBatchWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof nftRetirementBatchABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: nftRetirementBatchABI, ...config } as UsePrepareContractWriteConfig<
    typeof nftRetirementBatchABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareNftRetirementBatchApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nftRetirementBatchABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: nftRetirementBatchABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof nftRetirementBatchABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareNftRetirementBatchBurn(
  config: Omit<UsePrepareContractWriteConfig<typeof nftRetirementBatchABI, 'burn'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: nftRetirementBatchABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof nftRetirementBatchABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"confirmRetirement"`.
 */
export function usePrepareNftRetirementBatchConfirmRetirement(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nftRetirementBatchABI, 'confirmRetirement'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: nftRetirementBatchABI,
    functionName: 'confirmRetirement',
    ...config,
  } as UsePrepareContractWriteConfig<typeof nftRetirementBatchABI, 'confirmRetirement'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"fractionalize"`.
 */
export function usePrepareNftRetirementBatchFractionalize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nftRetirementBatchABI, 'fractionalize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: nftRetirementBatchABI,
    functionName: 'fractionalize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof nftRetirementBatchABI, 'fractionalize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareNftRetirementBatchGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nftRetirementBatchABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: nftRetirementBatchABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof nftRetirementBatchABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"mintEmptyBatch"`.
 */
export function usePrepareNftRetirementBatchMintEmptyBatch(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nftRetirementBatchABI, 'mintEmptyBatch'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: nftRetirementBatchABI,
    functionName: 'mintEmptyBatch',
    ...config,
  } as UsePrepareContractWriteConfig<typeof nftRetirementBatchABI, 'mintEmptyBatch'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"rejectRetirement"`.
 */
export function usePrepareNftRetirementBatchRejectRetirement(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nftRetirementBatchABI, 'rejectRetirement'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: nftRetirementBatchABI,
    functionName: 'rejectRetirement',
    ...config,
  } as UsePrepareContractWriteConfig<typeof nftRetirementBatchABI, 'rejectRetirement'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareNftRetirementBatchRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nftRetirementBatchABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: nftRetirementBatchABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof nftRetirementBatchABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareNftRetirementBatchRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nftRetirementBatchABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: nftRetirementBatchABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof nftRetirementBatchABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareNftRetirementBatchSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nftRetirementBatchABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: nftRetirementBatchABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof nftRetirementBatchABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareNftRetirementBatchSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nftRetirementBatchABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: nftRetirementBatchABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof nftRetirementBatchABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"setBaseURI"`.
 */
export function usePrepareNftRetirementBatchSetBaseUri(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nftRetirementBatchABI, 'setBaseURI'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: nftRetirementBatchABI,
    functionName: 'setBaseURI',
    ...config,
  } as UsePrepareContractWriteConfig<typeof nftRetirementBatchABI, 'setBaseURI'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"setRegistry"`.
 */
export function usePrepareNftRetirementBatchSetRegistry(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nftRetirementBatchABI, 'setRegistry'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: nftRetirementBatchABI,
    functionName: 'setRegistry',
    ...config,
  } as UsePrepareContractWriteConfig<typeof nftRetirementBatchABI, 'setRegistry'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"setSerialandQuantity"`.
 */
export function usePrepareNftRetirementBatchSetSerialandQuantity(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nftRetirementBatchABI, 'setSerialandQuantity'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: nftRetirementBatchABI,
    functionName: 'setSerialandQuantity',
    ...config,
  } as UsePrepareContractWriteConfig<typeof nftRetirementBatchABI, 'setSerialandQuantity'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"setToPending"`.
 */
export function usePrepareNftRetirementBatchSetToPending(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nftRetirementBatchABI, 'setToPending'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: nftRetirementBatchABI,
    functionName: 'setToPending',
    ...config,
  } as UsePrepareContractWriteConfig<typeof nftRetirementBatchABI, 'setToPending'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareNftRetirementBatchTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nftRetirementBatchABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: nftRetirementBatchABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof nftRetirementBatchABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `functionName` set to `"updateBatchWithData"`.
 */
export function usePrepareNftRetirementBatchUpdateBatchWithData(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nftRetirementBatchABI, 'updateBatchWithData'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: nftRetirementBatchABI,
    functionName: 'updateBatchWithData',
    ...config,
  } as UsePrepareContractWriteConfig<typeof nftRetirementBatchABI, 'updateBatchWithData'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nftRetirementBatchABI}__.
 */
export function useNftRetirementBatchEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof nftRetirementBatchABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: nftRetirementBatchABI, ...config } as UseContractEventConfig<
    typeof nftRetirementBatchABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `eventName` set to `"Approval"`.
 */
export function useNftRetirementBatchApprovalEvent(
  config: Omit<UseContractEventConfig<typeof nftRetirementBatchABI, 'Approval'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: nftRetirementBatchABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof nftRetirementBatchABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useNftRetirementBatchApprovalForAllEvent(
  config: Omit<UseContractEventConfig<typeof nftRetirementBatchABI, 'ApprovalForAll'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: nftRetirementBatchABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof nftRetirementBatchABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `eventName` set to `"BatchMinted"`.
 */
export function useNftRetirementBatchBatchMintedEvent(
  config: Omit<UseContractEventConfig<typeof nftRetirementBatchABI, 'BatchMinted'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: nftRetirementBatchABI, eventName: 'BatchMinted', ...config } as UseContractEventConfig<
    typeof nftRetirementBatchABI,
    'BatchMinted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `eventName` set to `"BatchStatusUpdate"`.
 */
export function useNftRetirementBatchBatchStatusUpdateEvent(
  config: Omit<
    UseContractEventConfig<typeof nftRetirementBatchABI, 'BatchStatusUpdate'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: nftRetirementBatchABI,
    eventName: 'BatchStatusUpdate',
    ...config,
  } as UseContractEventConfig<typeof nftRetirementBatchABI, 'BatchStatusUpdate'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `eventName` set to `"BatchUpdated"`.
 */
export function useNftRetirementBatchBatchUpdatedEvent(
  config: Omit<UseContractEventConfig<typeof nftRetirementBatchABI, 'BatchUpdated'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: nftRetirementBatchABI,
    eventName: 'BatchUpdated',
    ...config,
  } as UseContractEventConfig<typeof nftRetirementBatchABI, 'BatchUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useNftRetirementBatchRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof nftRetirementBatchABI, 'RoleAdminChanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: nftRetirementBatchABI,
    eventName: 'RoleAdminChanged',
    ...config,
  } as UseContractEventConfig<typeof nftRetirementBatchABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useNftRetirementBatchRoleGrantedEvent(
  config: Omit<UseContractEventConfig<typeof nftRetirementBatchABI, 'RoleGranted'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: nftRetirementBatchABI, eventName: 'RoleGranted', ...config } as UseContractEventConfig<
    typeof nftRetirementBatchABI,
    'RoleGranted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useNftRetirementBatchRoleRevokedEvent(
  config: Omit<UseContractEventConfig<typeof nftRetirementBatchABI, 'RoleRevoked'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: nftRetirementBatchABI, eventName: 'RoleRevoked', ...config } as UseContractEventConfig<
    typeof nftRetirementBatchABI,
    'RoleRevoked'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nftRetirementBatchABI}__ and `eventName` set to `"Transfer"`.
 */
export function useNftRetirementBatchTransferEvent(
  config: Omit<UseContractEventConfig<typeof nftRetirementBatchABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: nftRetirementBatchABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof nftRetirementBatchABI,
    'Transfer'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link accessControlABI}__.
 */
export function useAccessControl(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: accessControlABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__.
 */
export function useAccessControlRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof accessControlABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof accessControlABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: accessControlABI, ...config } as UseContractReadConfig<
    typeof accessControlABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useAccessControlDefaultAdminRole<
  TSelectData = ReadContractResult<typeof accessControlABI, 'DEFAULT_ADMIN_ROLE'>
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, 'DEFAULT_ADMIN_ROLE', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config,
  } as UseContractReadConfig<typeof accessControlABI, 'DEFAULT_ADMIN_ROLE', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useAccessControlGetRoleAdmin<TSelectData = ReadContractResult<typeof accessControlABI, 'getRoleAdmin'>>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, 'getRoleAdmin', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: accessControlABI, functionName: 'getRoleAdmin', ...config } as UseContractReadConfig<
    typeof accessControlABI,
    'getRoleAdmin',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"hasRole"`.
 */
export function useAccessControlHasRole<TSelectData = ReadContractResult<typeof accessControlABI, 'hasRole'>>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: accessControlABI, functionName: 'hasRole', ...config } as UseContractReadConfig<
    typeof accessControlABI,
    'hasRole',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useAccessControlSupportsInterface<
  TSelectData = ReadContractResult<typeof accessControlABI, 'supportsInterface'>
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof accessControlABI, 'supportsInterface', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__.
 */
export function useAccessControlWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof accessControlABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof accessControlABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof accessControlABI, TFunctionName>({ abi: accessControlABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function useAccessControlGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof accessControlABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof accessControlABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any
) {
  return useContractWrite<TMode, typeof accessControlABI, 'grantRole'>({
    abi: accessControlABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useAccessControlRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof accessControlABI, 'renounceRole'>['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof accessControlABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any
) {
  return useContractWrite<TMode, typeof accessControlABI, 'renounceRole'>({
    abi: accessControlABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useAccessControlRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof accessControlABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof accessControlABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any
) {
  return useContractWrite<TMode, typeof accessControlABI, 'revokeRole'>({
    abi: accessControlABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__.
 */
export function usePrepareAccessControlWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof accessControlABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: accessControlABI, ...config } as UsePrepareContractWriteConfig<
    typeof accessControlABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareAccessControlGrantRole(
  config: Omit<UsePrepareContractWriteConfig<typeof accessControlABI, 'grantRole'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareAccessControlRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareAccessControlRevokeRole(
  config: Omit<UsePrepareContractWriteConfig<typeof accessControlABI, 'revokeRole'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, 'revokeRole'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__.
 */
export function useAccessControlEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof accessControlABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: accessControlABI, ...config } as UseContractEventConfig<
    typeof accessControlABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useAccessControlRoleAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof accessControlABI, 'RoleAdminChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: accessControlABI, eventName: 'RoleAdminChanged', ...config } as UseContractEventConfig<
    typeof accessControlABI,
    'RoleAdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useAccessControlRoleGrantedEvent(
  config: Omit<UseContractEventConfig<typeof accessControlABI, 'RoleGranted'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: accessControlABI, eventName: 'RoleGranted', ...config } as UseContractEventConfig<
    typeof accessControlABI,
    'RoleGranted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useAccessControlRoleRevokedEvent(
  config: Omit<UseContractEventConfig<typeof accessControlABI, 'RoleRevoked'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: accessControlABI, eventName: 'RoleRevoked', ...config } as UseContractEventConfig<
    typeof accessControlABI,
    'RoleRevoked'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function useIAccessControl(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: iAccessControlABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function useIAccessControlRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iAccessControlABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof iAccessControlABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: iAccessControlABI, ...config } as UseContractReadConfig<
    typeof iAccessControlABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useIAccessControlGetRoleAdmin<
  TSelectData = ReadContractResult<typeof iAccessControlABI, 'getRoleAdmin'>
>(
  config: Omit<
    UseContractReadConfig<typeof iAccessControlABI, 'getRoleAdmin', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: iAccessControlABI, functionName: 'getRoleAdmin', ...config } as UseContractReadConfig<
    typeof iAccessControlABI,
    'getRoleAdmin',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"hasRole"`.
 */
export function useIAccessControlHasRole<TSelectData = ReadContractResult<typeof iAccessControlABI, 'hasRole'>>(
  config: Omit<
    UseContractReadConfig<typeof iAccessControlABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: iAccessControlABI, functionName: 'hasRole', ...config } as UseContractReadConfig<
    typeof iAccessControlABI,
    'hasRole',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function useIAccessControlWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof iAccessControlABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof iAccessControlABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof iAccessControlABI, TFunctionName>({ abi: iAccessControlABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function useIAccessControlGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iAccessControlABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof iAccessControlABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any
) {
  return useContractWrite<TMode, typeof iAccessControlABI, 'grantRole'>({
    abi: iAccessControlABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useIAccessControlRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iAccessControlABI, 'renounceRole'>['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof iAccessControlABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any
) {
  return useContractWrite<TMode, typeof iAccessControlABI, 'renounceRole'>({
    abi: iAccessControlABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useIAccessControlRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iAccessControlABI, 'revokeRole'>['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof iAccessControlABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any
) {
  return useContractWrite<TMode, typeof iAccessControlABI, 'revokeRole'>({
    abi: iAccessControlABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function usePrepareIAccessControlWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof iAccessControlABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: iAccessControlABI, ...config } as UsePrepareContractWriteConfig<
    typeof iAccessControlABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareIAccessControlGrantRole(
  config: Omit<UsePrepareContractWriteConfig<typeof iAccessControlABI, 'grantRole'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareIAccessControlRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareIAccessControlRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, 'revokeRole'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function useIAccessControlEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof iAccessControlABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: iAccessControlABI, ...config } as UseContractEventConfig<
    typeof iAccessControlABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useIAccessControlRoleAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof iAccessControlABI, 'RoleAdminChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: iAccessControlABI,
    eventName: 'RoleAdminChanged',
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useIAccessControlRoleGrantedEvent(
  config: Omit<UseContractEventConfig<typeof iAccessControlABI, 'RoleGranted'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: iAccessControlABI, eventName: 'RoleGranted', ...config } as UseContractEventConfig<
    typeof iAccessControlABI,
    'RoleGranted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useIAccessControlRoleRevokedEvent(
  config: Omit<UseContractEventConfig<typeof iAccessControlABI, 'RoleRevoked'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: iAccessControlABI, eventName: 'RoleRevoked', ...config } as UseContractEventConfig<
    typeof iAccessControlABI,
    'RoleRevoked'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnable(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ownableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ownableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ownableABI, ...config } as UseContractReadConfig<
    typeof ownableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"owner"`.
 */
export function useOwnableOwner<TSelectData = ReadContractResult<typeof ownableABI, 'owner'>>(
  config: Omit<UseContractReadConfig<typeof ownableABI, 'owner', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ownableABI, functionName: 'owner', ...config } as UseContractReadConfig<
    typeof ownableABI,
    'owner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ownableABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof ownableABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof ownableABI, TFunctionName>({ abi: ownableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useOwnableRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ownableABI, 'renounceOwnership'>['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<TMode, typeof ownableABI, 'renounceOwnership'> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ownableABI, 'renounceOwnership'>({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOwnableTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ownableABI, 'transferOwnership'>['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<TMode, typeof ownableABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ownableABI, 'transferOwnership'>({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function usePrepareOwnableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: ownableABI, ...config } as UsePrepareContractWriteConfig<
    typeof ownableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareOwnableRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOwnableTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ownableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: ownableABI, ...config } as UseContractEventConfig<typeof ownableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOwnableOwnershipTransferredEvent(
  config: Omit<UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ownableABI, eventName: 'OwnershipTransferred', ...config } as UseContractEventConfig<
    typeof ownableABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc1822ProxiableABI}__.
 */
export function useIerc1822Proxiable(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc1822ProxiableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1822ProxiableABI}__.
 */
export function useIerc1822ProxiableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc1822ProxiableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof ierc1822ProxiableABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ierc1822ProxiableABI, ...config } as UseContractReadConfig<
    typeof ierc1822ProxiableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1822ProxiableABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useIerc1822ProxiableProxiableUuid<
  TSelectData = ReadContractResult<typeof ierc1822ProxiableABI, 'proxiableUUID'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc1822ProxiableABI, 'proxiableUUID', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc1822ProxiableABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<typeof ierc1822ProxiableABI, 'proxiableUUID', TSelectData>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc1967ABI}__.
 */
export function useIerc1967(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc1967ABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1967ABI}__.
 */
export function useIerc1967Event<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc1967ABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: ierc1967ABI, ...config } as UseContractEventConfig<typeof ierc1967ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1967ABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useIerc1967AdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof ierc1967ABI, 'AdminChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ierc1967ABI, eventName: 'AdminChanged', ...config } as UseContractEventConfig<
    typeof ierc1967ABI,
    'AdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1967ABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useIerc1967BeaconUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof ierc1967ABI, 'BeaconUpgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ierc1967ABI, eventName: 'BeaconUpgraded', ...config } as UseContractEventConfig<
    typeof ierc1967ABI,
    'BeaconUpgraded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1967ABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useIerc1967UpgradedEvent(
  config: Omit<UseContractEventConfig<typeof ierc1967ABI, 'Upgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ierc1967ABI, eventName: 'Upgraded', ...config } as UseContractEventConfig<
    typeof ierc1967ABI,
    'Upgraded'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link proxyABI}__.
 */
export function useProxy(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: proxyABI, ...config })
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link pausableABI}__.
 */
export function usePausable(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: pausableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pausableABI}__.
 */
export function usePausableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof pausableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof pausableABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: pausableABI, ...config } as UseContractReadConfig<
    typeof pausableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pausableABI}__ and `functionName` set to `"paused"`.
 */
export function usePausablePaused<TSelectData = ReadContractResult<typeof pausableABI, 'paused'>>(
  config: Omit<UseContractReadConfig<typeof pausableABI, 'paused', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: pausableABI, functionName: 'paused', ...config } as UseContractReadConfig<
    typeof pausableABI,
    'paused',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableABI}__.
 */
export function usePausableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof pausableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: pausableABI, ...config } as UseContractEventConfig<typeof pausableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableABI}__ and `eventName` set to `"Paused"`.
 */
export function usePausablePausedEvent(
  config: Omit<UseContractEventConfig<typeof pausableABI, 'Paused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: pausableABI, eventName: 'Paused', ...config } as UseContractEventConfig<
    typeof pausableABI,
    'Paused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableABI}__ and `eventName` set to `"Unpaused"`.
 */
export function usePausableUnpausedEvent(
  config: Omit<UseContractEventConfig<typeof pausableABI, 'Unpaused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: pausableABI, eventName: 'Unpaused', ...config } as UseContractEventConfig<
    typeof pausableABI,
    'Unpaused'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link beaconProxyABI}__.
 */
export function useBeaconProxy(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: beaconProxyABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link beaconProxyABI}__.
 */
export function useBeaconProxyEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof beaconProxyABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: beaconProxyABI, ...config } as UseContractEventConfig<
    typeof beaconProxyABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link beaconProxyABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useBeaconProxyAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof beaconProxyABI, 'AdminChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: beaconProxyABI, eventName: 'AdminChanged', ...config } as UseContractEventConfig<
    typeof beaconProxyABI,
    'AdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link beaconProxyABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useBeaconProxyBeaconUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof beaconProxyABI, 'BeaconUpgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: beaconProxyABI, eventName: 'BeaconUpgraded', ...config } as UseContractEventConfig<
    typeof beaconProxyABI,
    'BeaconUpgraded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link beaconProxyABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useBeaconProxyUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof beaconProxyABI, 'Upgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: beaconProxyABI, eventName: 'Upgraded', ...config } as UseContractEventConfig<
    typeof beaconProxyABI,
    'Upgraded'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iBeaconABI}__.
 */
export function useIBeacon(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: iBeaconABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBeaconABI}__.
 */
export function useIBeaconRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iBeaconABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof iBeaconABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: iBeaconABI, ...config } as UseContractReadConfig<
    typeof iBeaconABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBeaconABI}__ and `functionName` set to `"implementation"`.
 */
export function useIBeaconImplementation<TSelectData = ReadContractResult<typeof iBeaconABI, 'implementation'>>(
  config: Omit<
    UseContractReadConfig<typeof iBeaconABI, 'implementation', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: iBeaconABI, functionName: 'implementation', ...config } as UseContractReadConfig<
    typeof iBeaconABI,
    'implementation',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc1967UpgradeABI}__.
 */
export function useErc1967Upgrade(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc1967UpgradeABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeABI}__.
 */
export function useErc1967UpgradeEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc1967UpgradeABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: erc1967UpgradeABI, ...config } as UseContractEventConfig<
    typeof erc1967UpgradeABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useErc1967UpgradeAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof erc1967UpgradeABI, 'AdminChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc1967UpgradeABI, eventName: 'AdminChanged', ...config } as UseContractEventConfig<
    typeof erc1967UpgradeABI,
    'AdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useErc1967UpgradeBeaconUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof erc1967UpgradeABI, 'BeaconUpgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc1967UpgradeABI, eventName: 'BeaconUpgraded', ...config } as UseContractEventConfig<
    typeof erc1967UpgradeABI,
    'BeaconUpgraded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useErc1967UpgradeUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof erc1967UpgradeABI, 'Upgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc1967UpgradeABI, eventName: 'Upgraded', ...config } as UseContractEventConfig<
    typeof erc1967UpgradeABI,
    'Upgraded'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc20ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: erc20ABI, ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20Allowance<TSelectData = ReadContractResult<typeof erc20ABI, 'allowance'>>(
  config: Omit<UseContractReadConfig<typeof erc20ABI, 'allowance', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc20ABI, functionName: 'allowance', ...config } as UseContractReadConfig<
    typeof erc20ABI,
    'allowance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BalanceOf<TSelectData = ReadContractResult<typeof erc20ABI, 'balanceOf'>>(
  config: Omit<UseContractReadConfig<typeof erc20ABI, 'balanceOf', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc20ABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof erc20ABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20Decimals<TSelectData = ReadContractResult<typeof erc20ABI, 'decimals'>>(
  config: Omit<UseContractReadConfig<typeof erc20ABI, 'decimals', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc20ABI, functionName: 'decimals', ...config } as UseContractReadConfig<
    typeof erc20ABI,
    'decimals',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"name"`.
 */
export function useErc20Name<TSelectData = ReadContractResult<typeof erc20ABI, 'name'>>(
  config: Omit<UseContractReadConfig<typeof erc20ABI, 'name', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc20ABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof erc20ABI,
    'name',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20Symbol<TSelectData = ReadContractResult<typeof erc20ABI, 'symbol'>>(
  config: Omit<UseContractReadConfig<typeof erc20ABI, 'symbol', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc20ABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof erc20ABI,
    'symbol',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TotalSupply<TSelectData = ReadContractResult<typeof erc20ABI, 'totalSupply'>>(
  config: Omit<UseContractReadConfig<typeof erc20ABI, 'totalSupply', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc20ABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
    typeof erc20ABI,
    'totalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Write<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc20ABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof erc20ABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, TFunctionName>({ abi: erc20ABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc20ABI, 'approve'>['abi'], 'approve'> & {
        functionName?: 'approve'
      }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, 'approve'>({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20DecreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'decreaseAllowance'>['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'decreaseAllowance'> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, 'decreaseAllowance'>({
    abi: erc20ABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20IncreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'increaseAllowance'>['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'increaseAllowance'> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, 'increaseAllowance'>({
    abi: erc20ABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20Transfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc20ABI, 'transfer'>['abi'], 'transfer'> & {
        functionName?: 'transfer'
      }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, 'transfer'>({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, 'transferFrom'>({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function usePrepareErc20Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc20ABI, ...config } as UsePrepareContractWriteConfig<
    typeof erc20ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20Approve(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc20ABI, functionName: 'approve', ...config } as UsePrepareContractWriteConfig<
    typeof erc20ABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20DecreaseAllowance(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20IncreaseAllowance(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20Transfer(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Event<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc20ABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: erc20ABI, ...config } as UseContractEventConfig<typeof erc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20ApprovalEvent(
  config: Omit<UseContractEventConfig<typeof erc20ABI, 'Approval'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc20ABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof erc20ABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TransferEvent(
  config: Omit<UseContractEventConfig<typeof erc20ABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc20ABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof erc20ABI,
    'Transfer'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc20ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ierc20ABI, ...config } as UseContractReadConfig<
    typeof ierc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20Allowance<TSelectData = ReadContractResult<typeof ierc20ABI, 'allowance'>>(
  config: Omit<UseContractReadConfig<typeof ierc20ABI, 'allowance', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ierc20ABI, functionName: 'allowance', ...config } as UseContractReadConfig<
    typeof ierc20ABI,
    'allowance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20BalanceOf<TSelectData = ReadContractResult<typeof ierc20ABI, 'balanceOf'>>(
  config: Omit<UseContractReadConfig<typeof ierc20ABI, 'balanceOf', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ierc20ABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof ierc20ABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20TotalSupply<TSelectData = ReadContractResult<typeof ierc20ABI, 'totalSupply'>>(
  config: Omit<UseContractReadConfig<typeof ierc20ABI, 'totalSupply', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ierc20ABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
    typeof ierc20ABI,
    'totalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Write<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ierc20ABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof ierc20ABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20ABI, TFunctionName>({ abi: ierc20ABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ierc20ABI, 'approve'>['abi'], 'approve'> & {
        functionName?: 'approve'
      }
    : UseContractWriteConfig<TMode, typeof ierc20ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20ABI, 'approve'>({
    abi: ierc20ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20Transfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ierc20ABI, 'transfer'>['abi'], 'transfer'> & {
        functionName?: 'transfer'
      }
    : UseContractWriteConfig<TMode, typeof ierc20ABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20ABI, 'transfer'>({
    abi: ierc20ABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc20ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20ABI, 'transferFrom'>({
    abi: ierc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function usePrepareIerc20Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20ABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: ierc20ABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc20ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20Approve(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20ABI, 'approve'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20Transfer(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20ABI, 'transfer'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20TransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20ABI, 'transferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Event<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc20ABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: ierc20ABI, ...config } as UseContractEventConfig<typeof ierc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20ApprovalEvent(
  config: Omit<UseContractEventConfig<typeof ierc20ABI, 'Approval'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ierc20ABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof ierc20ABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20TransferEvent(
  config: Omit<UseContractEventConfig<typeof ierc20ABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ierc20ABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof ierc20ABI,
    'Transfer'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc721ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: erc721ABI, ...config } as UseContractReadConfig<
    typeof erc721ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721BalanceOf<TSelectData = ReadContractResult<typeof erc721ABI, 'balanceOf'>>(
  config: Omit<UseContractReadConfig<typeof erc721ABI, 'balanceOf', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721ABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof erc721ABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721GetApproved<TSelectData = ReadContractResult<typeof erc721ABI, 'getApproved'>>(
  config: Omit<UseContractReadConfig<typeof erc721ABI, 'getApproved', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721ABI, functionName: 'getApproved', ...config } as UseContractReadConfig<
    typeof erc721ABI,
    'getApproved',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721IsApprovedForAll<TSelectData = ReadContractResult<typeof erc721ABI, 'isApprovedForAll'>>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'isApprovedForAll', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: erc721ABI, functionName: 'isApprovedForAll', ...config } as UseContractReadConfig<
    typeof erc721ABI,
    'isApprovedForAll',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"name"`.
 */
export function useErc721Name<TSelectData = ReadContractResult<typeof erc721ABI, 'name'>>(
  config: Omit<UseContractReadConfig<typeof erc721ABI, 'name', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721ABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof erc721ABI,
    'name',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721OwnerOf<TSelectData = ReadContractResult<typeof erc721ABI, 'ownerOf'>>(
  config: Omit<UseContractReadConfig<typeof erc721ABI, 'ownerOf', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721ABI, functionName: 'ownerOf', ...config } as UseContractReadConfig<
    typeof erc721ABI,
    'ownerOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721SupportsInterface<TSelectData = ReadContractResult<typeof erc721ABI, 'supportsInterface'>>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: erc721ABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
    typeof erc721ABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721Symbol<TSelectData = ReadContractResult<typeof erc721ABI, 'symbol'>>(
  config: Omit<UseContractReadConfig<typeof erc721ABI, 'symbol', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721ABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof erc721ABI,
    'symbol',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721TokenUri<TSelectData = ReadContractResult<typeof erc721ABI, 'tokenURI'>>(
  config: Omit<UseContractReadConfig<typeof erc721ABI, 'tokenURI', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721ABI, functionName: 'tokenURI', ...config } as UseContractReadConfig<
    typeof erc721ABI,
    'tokenURI',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Write<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721ABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof erc721ABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721ABI, TFunctionName>({ abi: erc721ABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721ABI, 'approve'>['abi'], 'approve'> & {
        functionName?: 'approve'
      }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721ABI, 'approve'>({
    abi: erc721ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721SafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721ABI, 'safeTransferFrom'>({
    abi: erc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721SetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, 'setApprovalForAll'>['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721ABI, 'setApprovalForAll'>({
    abi: erc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721ABI, 'transferFrom'>({
    abi: erc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 */
export function usePrepareErc721Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721ABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc721ABI, ...config } as UsePrepareContractWriteConfig<
    typeof erc721ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721Approve(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721ABI, 'approve'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721SafeTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721ABI, 'safeTransferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721SetApprovalForAll(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721ABI, 'setApprovalForAll'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721TransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721ABI, 'transferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Event<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc721ABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: erc721ABI, ...config } as UseContractEventConfig<typeof erc721ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721ApprovalEvent(
  config: Omit<UseContractEventConfig<typeof erc721ABI, 'Approval'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc721ABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof erc721ABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721ApprovalForAllEvent(
  config: Omit<UseContractEventConfig<typeof erc721ABI, 'ApprovalForAll'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc721ABI, eventName: 'ApprovalForAll', ...config } as UseContractEventConfig<
    typeof erc721ABI,
    'ApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721TransferEvent(
  config: Omit<UseContractEventConfig<typeof erc721ABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc721ABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof erc721ABI,
    'Transfer'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc721ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc721ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ierc721ABI, ...config } as UseContractReadConfig<
    typeof ierc721ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc721BalanceOf<TSelectData = ReadContractResult<typeof ierc721ABI, 'balanceOf'>>(
  config: Omit<UseContractReadConfig<typeof ierc721ABI, 'balanceOf', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ierc721ABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof ierc721ABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc721GetApproved<TSelectData = ReadContractResult<typeof ierc721ABI, 'getApproved'>>(
  config: Omit<UseContractReadConfig<typeof ierc721ABI, 'getApproved', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ierc721ABI, functionName: 'getApproved', ...config } as UseContractReadConfig<
    typeof ierc721ABI,
    'getApproved',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc721IsApprovedForAll<TSelectData = ReadContractResult<typeof ierc721ABI, 'isApprovedForAll'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'isApprovedForAll', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: ierc721ABI, functionName: 'isApprovedForAll', ...config } as UseContractReadConfig<
    typeof ierc721ABI,
    'isApprovedForAll',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc721OwnerOf<TSelectData = ReadContractResult<typeof ierc721ABI, 'ownerOf'>>(
  config: Omit<UseContractReadConfig<typeof ierc721ABI, 'ownerOf', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ierc721ABI, functionName: 'ownerOf', ...config } as UseContractReadConfig<
    typeof ierc721ABI,
    'ownerOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc721SupportsInterface<TSelectData = ReadContractResult<typeof ierc721ABI, 'supportsInterface'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: ierc721ABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
    typeof ierc721ABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Write<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ierc721ABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof ierc721ABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc721ABI, TFunctionName>({ abi: ierc721ABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ierc721ABI, 'approve'>['abi'], 'approve'> & {
        functionName?: 'approve'
      }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'approve'>({
    abi: ierc721ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721SafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'safeTransferFrom'>({
    abi: ierc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721SetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ABI, 'setApprovalForAll'>['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'setApprovalForAll'>({
    abi: ierc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'transferFrom'>({
    abi: ierc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function usePrepareIerc721Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc721ABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: ierc721ABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc721ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721Approve(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc721ABI, 'approve'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721SafeTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc721ABI, 'safeTransferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721TransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc721ABI, 'transferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Event<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc721ABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: ierc721ABI, ...config } as UseContractEventConfig<typeof ierc721ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721ApprovalEvent(
  config: Omit<UseContractEventConfig<typeof ierc721ABI, 'Approval'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ierc721ABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof ierc721ABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721ApprovalForAllEvent(
  config: Omit<UseContractEventConfig<typeof ierc721ABI, 'ApprovalForAll'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ierc721ABI, eventName: 'ApprovalForAll', ...config } as UseContractEventConfig<
    typeof ierc721ABI,
    'ApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721TransferEvent(
  config: Omit<UseContractEventConfig<typeof ierc721ABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ierc721ABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof ierc721ABI,
    'Transfer'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721ReceiverABI}__.
 */
export function useIerc721Receiver(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc721ReceiverABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__.
 */
export function useIerc721ReceiverWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ierc721ReceiverABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof ierc721ReceiverABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc721ReceiverABI, TFunctionName>({
    abi: ierc721ReceiverABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useIerc721ReceiverOnErc721Received<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ReceiverABI, 'onERC721Received'>['abi'],
        'onERC721Received'
      > & { functionName?: 'onERC721Received' }
    : UseContractWriteConfig<TMode, typeof ierc721ReceiverABI, 'onERC721Received'> & {
        abi?: never
        functionName?: 'onERC721Received'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc721ReceiverABI, 'onERC721Received'>({
    abi: ierc721ReceiverABI,
    functionName: 'onERC721Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__.
 */
export function usePrepareIerc721ReceiverWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc721ReceiverABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: ierc721ReceiverABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc721ReceiverABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareIerc721ReceiverOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ReceiverABI, 'onERC721Received'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc721ReceiverABI,
    functionName: 'onERC721Received',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ReceiverABI, 'onERC721Received'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc165ABI}__.
 */
export function useErc165(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc165ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__.
 */
export function useErc165Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc165ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof erc165ABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: erc165ABI, ...config } as UseContractReadConfig<
    typeof erc165ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc165SupportsInterface<TSelectData = ReadContractResult<typeof erc165ABI, 'supportsInterface'>>(
  config: Omit<
    UseContractReadConfig<typeof erc165ABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: erc165ABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
    typeof erc165ABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function useIerc165(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc165ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function useIerc165Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc165ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ierc165ABI, ...config } as UseContractReadConfig<
    typeof ierc165ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc165SupportsInterface<TSelectData = ReadContractResult<typeof ierc165ABI, 'supportsInterface'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc165ABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: ierc165ABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
    typeof ierc165ABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20Metadata(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc20MetadataABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ierc20MetadataABI, ...config } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20MetadataAllowance<TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'allowance'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: ierc20MetadataABI, functionName: 'allowance', ...config } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    'allowance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20MetadataBalanceOf<TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'balanceOf'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: ierc20MetadataABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"decimals"`.
 */
export function useIerc20MetadataDecimals<TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'decimals'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'decimals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: ierc20MetadataABI, functionName: 'decimals', ...config } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    'decimals',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"name"`.
 */
export function useIerc20MetadataName<TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'name'>>(
  config: Omit<UseContractReadConfig<typeof ierc20MetadataABI, 'name', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ierc20MetadataABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    'name',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc20MetadataSymbol<TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'symbol'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: ierc20MetadataABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    'symbol',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20MetadataTotalSupply<TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'totalSupply'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: ierc20MetadataABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    'totalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ierc20MetadataABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof ierc20MetadataABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, TFunctionName>({ abi: ierc20MetadataABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20MetadataApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20MetadataABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc20MetadataABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, 'approve'>({
    abi: ierc20MetadataABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20MetadataTransfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20MetadataABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof ierc20MetadataABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, 'transfer'>({
    abi: ierc20MetadataABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20MetadataTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20MetadataABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc20MetadataABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, 'transferFrom'>({
    abi: ierc20MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function usePrepareIerc20MetadataWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20MetadataABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: ierc20MetadataABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc20MetadataABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20MetadataApprove(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'approve'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20MetadataTransfer(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transfer'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20MetadataTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc20MetadataABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: ierc20MetadataABI, ...config } as UseContractEventConfig<
    typeof ierc20MetadataABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20MetadataApprovalEvent(
  config: Omit<UseContractEventConfig<typeof ierc20MetadataABI, 'Approval'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ierc20MetadataABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof ierc20MetadataABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20MetadataTransferEvent(
  config: Omit<UseContractEventConfig<typeof ierc20MetadataABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ierc20MetadataABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof ierc20MetadataABI,
    'Transfer'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721BurnableABI}__.
 */
export function useErc721Burnable(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc721BurnableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__.
 */
export function useErc721BurnableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc721BurnableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof erc721BurnableABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: erc721BurnableABI, ...config } as UseContractReadConfig<
    typeof erc721BurnableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721BurnableBalanceOf<TSelectData = ReadContractResult<typeof erc721BurnableABI, 'balanceOf'>>(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: erc721BurnableABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof erc721BurnableABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721BurnableGetApproved<TSelectData = ReadContractResult<typeof erc721BurnableABI, 'getApproved'>>(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, 'getApproved', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: erc721BurnableABI, functionName: 'getApproved', ...config } as UseContractReadConfig<
    typeof erc721BurnableABI,
    'getApproved',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721BurnableIsApprovedForAll<
  TSelectData = ReadContractResult<typeof erc721BurnableABI, 'isApprovedForAll'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, 'isApprovedForAll', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc721BurnableABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableABI, 'isApprovedForAll', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"name"`.
 */
export function useErc721BurnableName<TSelectData = ReadContractResult<typeof erc721BurnableABI, 'name'>>(
  config: Omit<UseContractReadConfig<typeof erc721BurnableABI, 'name', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721BurnableABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof erc721BurnableABI,
    'name',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721BurnableOwnerOf<TSelectData = ReadContractResult<typeof erc721BurnableABI, 'ownerOf'>>(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, 'ownerOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: erc721BurnableABI, functionName: 'ownerOf', ...config } as UseContractReadConfig<
    typeof erc721BurnableABI,
    'ownerOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721BurnableSupportsInterface<
  TSelectData = ReadContractResult<typeof erc721BurnableABI, 'supportsInterface'>
>(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc721BurnableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableABI, 'supportsInterface', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721BurnableSymbol<TSelectData = ReadContractResult<typeof erc721BurnableABI, 'symbol'>>(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: erc721BurnableABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof erc721BurnableABI,
    'symbol',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721BurnableTokenUri<TSelectData = ReadContractResult<typeof erc721BurnableABI, 'tokenURI'>>(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, 'tokenURI', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: erc721BurnableABI, functionName: 'tokenURI', ...config } as UseContractReadConfig<
    typeof erc721BurnableABI,
    'tokenURI',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__.
 */
export function useErc721BurnableWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721BurnableABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof erc721BurnableABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721BurnableABI, TFunctionName>({ abi: erc721BurnableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721BurnableApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721BurnableABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc721BurnableABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721BurnableABI, 'approve'>({
    abi: erc721BurnableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"burn"`.
 */
export function useErc721BurnableBurn<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721BurnableABI, 'burn'>['abi'], 'burn'> & {
        functionName?: 'burn'
      }
    : UseContractWriteConfig<TMode, typeof erc721BurnableABI, 'burn'> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721BurnableABI, 'burn'>({
    abi: erc721BurnableABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721BurnableSafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721BurnableABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof erc721BurnableABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721BurnableABI, 'safeTransferFrom'>({
    abi: erc721BurnableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721BurnableSetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721BurnableABI, 'setApprovalForAll'>['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof erc721BurnableABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721BurnableABI, 'setApprovalForAll'>({
    abi: erc721BurnableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721BurnableTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721BurnableABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc721BurnableABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721BurnableABI, 'transferFrom'>({
    abi: erc721BurnableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__.
 */
export function usePrepareErc721BurnableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721BurnableABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc721BurnableABI, ...config } as UsePrepareContractWriteConfig<
    typeof erc721BurnableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721BurnableApprove(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'approve'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: erc721BurnableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareErc721BurnableBurn(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'burn'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: erc721BurnableABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721BurnableSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc721BurnableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721BurnableSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc721BurnableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721BurnableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc721BurnableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BurnableABI}__.
 */
export function useErc721BurnableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc721BurnableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: erc721BurnableABI, ...config } as UseContractEventConfig<
    typeof erc721BurnableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BurnableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721BurnableApprovalEvent(
  config: Omit<UseContractEventConfig<typeof erc721BurnableABI, 'Approval'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc721BurnableABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof erc721BurnableABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BurnableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721BurnableApprovalForAllEvent(
  config: Omit<UseContractEventConfig<typeof erc721BurnableABI, 'ApprovalForAll'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc721BurnableABI, eventName: 'ApprovalForAll', ...config } as UseContractEventConfig<
    typeof erc721BurnableABI,
    'ApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BurnableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721BurnableTransferEvent(
  config: Omit<UseContractEventConfig<typeof erc721BurnableABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc721BurnableABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof erc721BurnableABI,
    'Transfer'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721Metadata(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc721MetadataABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721MetadataRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof ierc721MetadataABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ierc721MetadataABI, ...config } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc721MetadataBalanceOf<TSelectData = ReadContractResult<typeof ierc721MetadataABI, 'balanceOf'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: ierc721MetadataABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc721MetadataGetApproved<
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, 'getApproved'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'getApproved', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: ierc721MetadataABI, functionName: 'getApproved', ...config } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    'getApproved',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc721MetadataIsApprovedForAll<
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, 'isApprovedForAll'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'isApprovedForAll', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataABI, 'isApprovedForAll', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"name"`.
 */
export function useIerc721MetadataName<TSelectData = ReadContractResult<typeof ierc721MetadataABI, 'name'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: ierc721MetadataABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    'name',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc721MetadataOwnerOf<TSelectData = ReadContractResult<typeof ierc721MetadataABI, 'ownerOf'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'ownerOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: ierc721MetadataABI, functionName: 'ownerOf', ...config } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    'ownerOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc721MetadataSupportsInterface<
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, 'supportsInterface'>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataABI, 'supportsInterface', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc721MetadataSymbol<TSelectData = ReadContractResult<typeof ierc721MetadataABI, 'symbol'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: ierc721MetadataABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    'symbol',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useIerc721MetadataTokenUri<TSelectData = ReadContractResult<typeof ierc721MetadataABI, 'tokenURI'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'tokenURI', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({ abi: ierc721MetadataABI, functionName: 'tokenURI', ...config } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    'tokenURI',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721MetadataWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ierc721MetadataABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof ierc721MetadataABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc721MetadataABI, TFunctionName>({
    abi: ierc721MetadataABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721MetadataApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721MetadataABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc721MetadataABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc721MetadataABI, 'approve'>({
    abi: ierc721MetadataABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721MetadataSafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721MetadataABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc721MetadataABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc721MetadataABI, 'safeTransferFrom'>({
    abi: ierc721MetadataABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721MetadataSetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721MetadataABI, 'setApprovalForAll'>['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof ierc721MetadataABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc721MetadataABI, 'setApprovalForAll'>({
    abi: ierc721MetadataABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721MetadataTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721MetadataABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc721MetadataABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc721MetadataABI, 'transferFrom'>({
    abi: ierc721MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function usePrepareIerc721MetadataWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc721MetadataABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: ierc721MetadataABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc721MetadataABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721MetadataApprove(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'approve'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721MetadataSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721MetadataSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721MetadataTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721MetadataEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc721MetadataABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: ierc721MetadataABI, ...config } as UseContractEventConfig<
    typeof ierc721MetadataABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721MetadataApprovalEvent(
  config: Omit<UseContractEventConfig<typeof ierc721MetadataABI, 'Approval'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ierc721MetadataABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof ierc721MetadataABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721MetadataApprovalForAllEvent(
  config: Omit<UseContractEventConfig<typeof ierc721MetadataABI, 'ApprovalForAll'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ierc721MetadataABI, eventName: 'ApprovalForAll', ...config } as UseContractEventConfig<
    typeof ierc721MetadataABI,
    'ApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721MetadataTransferEvent(
  config: Omit<UseContractEventConfig<typeof ierc721MetadataABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ierc721MetadataABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof ierc721MetadataABI,
    'Transfer'
  >)
}
